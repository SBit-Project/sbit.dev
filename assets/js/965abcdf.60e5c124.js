"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[9909],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),h=a,d=m["".concat(l,".").concat(h)]||m[h]||p[h]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6007:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"Unauthenticated REST Interface",description:"Unauthenticated REST Interface",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:7},l=void 0,c={unversionedId:"SBit-Core/Development/REST-interface",id:"SBit-Core/Development/REST-interface",title:"Unauthenticated REST Interface",description:"Unauthenticated REST Interface",source:"@site/docs/SBit-Core/Development/REST-interface.md",sourceDirName:"SBit-Core/Development",slug:"/SBit-Core/Development/REST-interface",permalink:"/sbit.dev/docs/SBit-Core/Development/REST-interface",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Unauthenticated REST Interface",description:"Unauthenticated REST Interface",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Release Process",permalink:"/sbit.dev/docs/SBit-Core/Development/release-process"},next:{title:"Shared Libraries",permalink:"/sbit.dev/docs/SBit-Core/Development/shared-libraries"}},u={},p=[{value:"REST Interface consistency guarantees",id:"rest-interface-consistency-guarantees",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Supported API",id:"supported-api",level:2},{value:"Transactions",id:"transactions",level:3},{value:"Blocks",id:"blocks",level:3},{value:"Blockheaders",id:"blockheaders",level:3},{value:"Blockhash by height",id:"blockhash-by-height",level:3},{value:"Chaininfos",id:"chaininfos",level:3},{value:"Query UTXO set",id:"query-utxo-set",level:3},{value:"Memory pool",id:"memory-pool",level:3}],m={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The REST API can be enabled with the ",(0,i.kt)("inlineCode",{parentName:"p"},"-rest")," option."),(0,i.kt)("p",null,"The interface runs on the same port as the JSON-RPC interface, by default port 22002 for mainnet, port 22302 for testnet,\nand port 22402 for regtest."),(0,i.kt)("h2",{id:"rest-interface-consistency-guarantees"},"REST Interface consistency guarantees"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"JSON-RPC-interface#rpc-consistency-guarantees"},"same guarantees as for the RPC Interface"),"\napply."),(0,i.kt)("h2",{id:"limitations"},"Limitations"),(0,i.kt)("p",null,"There is a known issue in the REST interface that can cause a node to crash if\ntoo many http connections are being opened at the same time because the system runs\nout of available file descriptors. To prevent this from happening you might\nwant to increase the number of maximum allowed file descriptors in your system\nand try to prevent opening too many connections to your rest interface at the\nsame time if this is under your control. It is hard to give general advice\nsince this depends on your system but if you make several hundred requests at\nonce you are definitely at risk of encountering this issue."),(0,i.kt)("h2",{id:"supported-api"},"Supported API"),(0,i.kt)("h3",{id:"transactions"},"Transactions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`GET /rest/tx/<TX-HASH>.<bin|hex|json>`\n")),(0,i.kt)("p",null,"Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats."),(0,i.kt)("p",null,'By default, this endpoint will only search the mempool.\nTo query for a confirmed transaction, enable the transaction index via "txindex=1" command line / configuration option.'),(0,i.kt)("h3",{id:"blocks"},"Blocks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`\n`GET /rest/block/notxdetails/<BLOCK-HASH>.<bin|hex|json>`\n")),(0,i.kt)("p",null,"Given a block hash: returns a block, in binary, hex-encoded binary or JSON formats.\nResponds with 404 if the block doesn't exist."),(0,i.kt)("p",null,"The HTTP request and response are both handled entirely in-memory."),(0,i.kt)("p",null,"With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response."),(0,i.kt)("h3",{id:"blockheaders"},"Blockheaders"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`\n")),(0,i.kt)("p",null,"Given a block hash: returns COUNT amount of blockheaders in upward direction.\nReturns empty if the block doesn't exist or it isn't in the active chain."),(0,i.kt)("h3",{id:"blockhash-by-height"},"Blockhash by height"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`GET /rest/blockhashbyheight/<HEIGHT>.<bin|hex|json>`\n")),(0,i.kt)("p",null,"Given a height: returns hash of block in best-block-chain at height provided."),(0,i.kt)("h3",{id:"chaininfos"},"Chaininfos"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`GET /rest/chaininfo.json`\n")),(0,i.kt)("p",null,"Returns various state info regarding block chain processing.\nOnly supports JSON as output format."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"chain : (string) current network name (main, test, regtest)"),(0,i.kt)("li",{parentName:"ul"},"blocks : (numeric) the current number of blocks processed in the server"),(0,i.kt)("li",{parentName:"ul"},"headers : (numeric) the current number of headers we have validated"),(0,i.kt)("li",{parentName:"ul"},"bestblockhash : (string) the hash of the currently best block"),(0,i.kt)("li",{parentName:"ul"},"difficulty : (numeric) the current difficulty"),(0,i.kt)("li",{parentName:"ul"},"mediantime : (numeric) the median time of the 11 blocks before the most recent block on the blockchain"),(0,i.kt)("li",{parentName:"ul"},"verificationprogress : (numeric) estimate of verification progress ","[0..1]"),(0,i.kt)("li",{parentName:"ul"},"chainwork : (string) total amount of work in active chain, in hexadecimal"),(0,i.kt)("li",{parentName:"ul"},"pruned : (boolean) if the blocks are subject to pruning"),(0,i.kt)("li",{parentName:"ul"},"pruneheight : (numeric) highest block available"),(0,i.kt)("li",{parentName:"ul"},"softforks : (array) status of softforks in progress")),(0,i.kt)("h3",{id:"query-utxo-set"},"Query UTXO set"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n")),(0,i.kt)("p",null,"The getutxo command allows querying of the UTXO set given a set of outpoints.\nSee BIP64 for input and output serialisation:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki"},"https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'$ curl localhost:22302/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff7627ff72e5e8b0f71210f92ea7a4000c5d75-0.json 2>/dev/null | json_pp\n{\n   "chainHeight" : 325347,\n   "chaintipHash" : "00000000fb01a7f3745a717f8caebee056c484e6e0bfe4a9591c235bb70506fb",\n   "bitmap": "1",\n   "utxos" : [\n      {\n         "height" : 2147483647,\n         "value" : 8.8687,\n         "scriptPubKey" : {\n            "asm" : "OP_DUP OP_HASH160 1c7cebb529b86a04c683dfa87be49de35bcf589e OP_EQUALVERIFY OP_CHECKSIG",\n            "hex" : "76a9141c7cebb529b86a04c683dfa87be49de35bcf589e88ac",\n            "reqSigs" : 1,\n            "type" : "pubkeyhash",\n            "addresses" : [\n               "mi7as51dvLJsizWnTMurtRmrP8hG2m1XvD"\n            ]\n         }\n      }\n   ]\n}\n')),(0,i.kt)("h3",{id:"memory-pool"},"Memory pool"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`GET /rest/mempool/info.json`\n")),(0,i.kt)("p",null,"Returns various information about the TX mempool.\nOnly supports JSON as output format."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"loaded : (boolean) if the mempool is fully loaded"),(0,i.kt)("li",{parentName:"ul"},"size : (numeric) the number of transactions in the TX mempool"),(0,i.kt)("li",{parentName:"ul"},"bytes : (numeric) size of the TX mempool in bytes"),(0,i.kt)("li",{parentName:"ul"},"usage : (numeric) total TX mempool memory usage"),(0,i.kt)("li",{parentName:"ul"},"maxmempool : (numeric) maximum memory usage for the mempool in bytes"),(0,i.kt)("li",{parentName:"ul"},"mempoolminfee : (numeric) minimum feerate (BTC per KB) for tx to be accepted")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"`GET /rest/mempool/contents.json`\n")),(0,i.kt)("p",null,"Returns transactions in the TX mempool.\nOnly supports JSON as output format."),(0,i.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Running a web browser on the same node with a REST enabled sbitd can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like ",(0,i.kt)("inlineCode",{parentName:"p"},'<script src="http://127.0.0.1:22002/rest/tx/1234567890.json">')," which might break the nodes privacy."))))}h.isMDXComponent=!0}}]);