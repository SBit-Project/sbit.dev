"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[915],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8352:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={title:"Developer Notes",description:"SBit Developer Notes",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:2},s=void 0,p={unversionedId:"SBit-Core/Development/developer-notes",id:"SBit-Core/Development/developer-notes",title:"Developer Notes",description:"SBit Developer Notes",source:"@site/docs/SBit-Core/Development/developer-notes.md",sourceDirName:"SBit-Core/Development",slug:"/SBit-Core/Development/developer-notes",permalink:"/sbit.dev/docs/SBit-Core/Development/developer-notes",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Developer Notes",description:"SBit Developer Notes",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Benchmarking",permalink:"/sbit.dev/docs/SBit-Core/Development/benchmarking"},next:{title:"DNS Seed operators",permalink:"/sbit.dev/docs/SBit-Core/Development/dnsseed-policy"}},d={},m=[{value:"Coding Style (General)",id:"coding-style-general",level:2},{value:"Coding Style (C++)",id:"coding-style-c",level:2},{value:"Coding Style (Python)",id:"coding-style-python",level:2},{value:"Coding Style (Doxygen-compatible comments)",id:"coding-style-doxygen-compatible-comments",level:2},{value:"Generating Documentation",id:"generating-documentation",level:3},{value:"Development tips and tricks",id:"development-tips-and-tricks",level:2},{value:"Compiling for debugging",id:"compiling-for-debugging",level:3},{value:"Compiling for gprof profiling",id:"compiling-for-gprof-profiling",level:3},{value:"debug.log",id:"debuglog",level:3},{value:"Testnet and Regtest modes",id:"testnet-and-regtest-modes",level:3},{value:"DEBUG_LOCKORDER",id:"debug_lockorder",level:3},{value:"Valgrind suppressions file",id:"valgrind-suppressions-file",level:3},{value:"Compiling for test coverage",id:"compiling-for-test-coverage",level:3},{value:"Performance profiling with perf",id:"performance-profiling-with-perf",level:3},{value:"Sanitizers",id:"sanitizers",level:3},{value:"Locking/mutex usage notes",id:"lockingmutex-usage-notes",level:2},{value:"Threads",id:"threads",level:2},{value:"Ignoring IDE/editor files",id:"ignoring-ideeditor-files",level:2},{value:"General SBit Core",id:"general-sbit-core",level:2},{value:"Wallet",id:"wallet",level:2},{value:"General C++",id:"general-c",level:2},{value:"C++ data structures",id:"c-data-structures",level:2},{value:"Strings and formatting",id:"strings-and-formatting",level:2},{value:"Shadowing",id:"shadowing",level:2},{value:"Threads and synchronization",id:"threads-and-synchronization",level:2},{value:"Scripts",id:"scripts",level:2},{value:"Shebang",id:"shebang",level:3},{value:"Source code organization",id:"source-code-organization",level:2},{value:"GUI",id:"gui",level:2},{value:"Upgrading LevelDB",id:"upgrading-leveldb",level:2},{value:"File Descriptor Counts",id:"file-descriptor-counts",level:3},{value:"Consensus Compatibility",id:"consensus-compatibility",level:3},{value:"Scripted diffs",id:"scripted-diffs",level:2},{value:"Suggestions and examples",id:"suggestions-and-examples",level:3},{value:"Release notes",id:"release-notes",level:2},{value:"RPC interface guidelines",id:"rpc-interface-guidelines",level:2},{value:"Internal interface guidelines",id:"internal-interface-guidelines",level:2}],c={toc:m};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"coding-style-general"},"Coding Style (General)"),(0,r.kt)("p",null,"Various coding styles have been used during the history of the codebase,\nand the result is not very consistent. However, we're now trying to converge to\na single style, which is specified below. When writing patches, favor the new\nstyle over attempting to mimic the surrounding style, except for move-only\ncommits."),(0,r.kt)("p",null,"Do not submit patches solely to modify the style of existing code."),(0,r.kt)("h2",{id:"coding-style-c"},"Coding Style (C++)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Indentation and whitespace rules")," as specified in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/.clang-format"},"src/.clang-format"),". You can use the provided\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/contrib/devtools/README.md#clang-format-diffpy"},"clang-format-diff script"),"\ntool to clean up patches automatically before submission."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Braces on new lines for classes, functions, methods."),(0,r.kt)("li",{parentName:"ul"},"Braces on the same line for everything else."),(0,r.kt)("li",{parentName:"ul"},"4 space indentation (no tabs) for every block except namespaces."),(0,r.kt)("li",{parentName:"ul"},"No indentation for ",(0,r.kt)("inlineCode",{parentName:"li"},"public"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"protected"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"private")," or for ",(0,r.kt)("inlineCode",{parentName:"li"},"namespace"),"."),(0,r.kt)("li",{parentName:"ul"},"No extra spaces inside parenthesis; don't do ",(0,r.kt)("inlineCode",{parentName:"li"},"( this )"),"."),(0,r.kt)("li",{parentName:"ul"},"No space after function names; one space after ",(0,r.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"for")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"while"),"."),(0,r.kt)("li",{parentName:"ul"},"If an ",(0,r.kt)("inlineCode",{parentName:"li"},"if")," only has a single-statement ",(0,r.kt)("inlineCode",{parentName:"li"},"then"),"-clause, it can appear\non the same line as the ",(0,r.kt)("inlineCode",{parentName:"li"},"if"),", without braces. In every other case,\nbraces are required, and the ",(0,r.kt)("inlineCode",{parentName:"li"},"then")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"else")," clauses must appear\ncorrectly indented on a new line."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Symbol naming conventions"),". These are preferred in new code, but are not\nrequired when doing so would need changes to significant pieces of existing\ncode."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Variable (including function arguments) and namespace names are all lowercase and may use ",(0,r.kt)("inlineCode",{parentName:"li"},"_")," to\nseparate words (snake_case).",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Class member variables have a ",(0,r.kt)("inlineCode",{parentName:"li"},"m_")," prefix."),(0,r.kt)("li",{parentName:"ul"},"Global variables have a ",(0,r.kt)("inlineCode",{parentName:"li"},"g_")," prefix."))),(0,r.kt)("li",{parentName:"ul"},"Compile-time constant names are all uppercase, and use ",(0,r.kt)("inlineCode",{parentName:"li"},"_")," to separate words."),(0,r.kt)("li",{parentName:"ul"},"Class names, function names, and method names are UpperCamelCase\n(PascalCase). Do not prefix class names with ",(0,r.kt)("inlineCode",{parentName:"li"},"C"),"."),(0,r.kt)("li",{parentName:"ul"},"Test suite naming convention: The Boost test suite in file\n",(0,r.kt)("inlineCode",{parentName:"li"},"src/test/foo_tests.cpp")," should be named ",(0,r.kt)("inlineCode",{parentName:"li"},"foo_tests"),". Test suite names\nmust be unique."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Miscellaneous")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"++i")," is preferred over ",(0,r.kt)("inlineCode",{parentName:"li"},"i++"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nullptr")," is preferred over ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"(void*)0"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"static_assert")," is preferred over ",(0,r.kt)("inlineCode",{parentName:"li"},"assert")," where possible. Generally; compile-time checking is preferred over run-time checking.")))),(0,r.kt)("p",null,"Block style example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int g_count = 0;\n\nnamespace foo {\nclass Class\n{\n    std::string m_name;\n\npublic:\n    bool Function(const std::string& s, int n)\n    {\n        // Comment summarising what this section of code does\n        for (int i = 0; i < n; ++i) {\n            int total_sum = 0;\n            // When something fails, return early\n            if (!Something()) return false;\n            ...\n            if (SomethingElse(i)) {\n                total_sum += ComputeSomething(g_count);\n            } else {\n                DoSomething(m_name, total_sum);\n            }\n        }\n\n        // Success return is usually at the end\n        return true;\n    }\n}\n} // namespace foo\n")),(0,r.kt)("h2",{id:"coding-style-python"},"Coding Style (Python)"),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/test/functional/README.md#style-guidelines"},"/test/functional/README.md#style-guidelines"),"."),(0,r.kt)("h2",{id:"coding-style-doxygen-compatible-comments"},"Coding Style (Doxygen-compatible comments)"),(0,r.kt)("p",null,"Use Doxygen-compatible comment blocks for functions, methods, and fields."),(0,r.kt)("p",null,"For example, to describe a function use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * ... Description ...\n *\n * @param[in]  arg1 input description...\n * @param[in]  arg2 input description...\n * @param[out] arg3 output description...\n * @return Return cases...\n * @throws Error type and cases...\n * @pre  Pre-condition for function...\n * @post Post-condition for function...\n */\nbool function(int arg1, const char *arg2, std::string& arg3)\n")),(0,r.kt)("p",null,"A complete list of ",(0,r.kt)("inlineCode",{parentName:"p"},"@xxx")," commands can be found at ",(0,r.kt)("a",{parentName:"p",href:"http://www.doxygen.nl/manual/commands.html"},"http://www.doxygen.nl/manual/commands.html"),".\nAs Doxygen recognizes the comments by the delimiters (",(0,r.kt)("inlineCode",{parentName:"p"},"/**")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"*/")," in this case), you don't\n",(0,r.kt)("em",{parentName:"p"},"need")," to provide any commands for a comment to be valid; just a description text is fine."),(0,r.kt)("p",null,"To describe a class, use the same construct above the class definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Alerts are for notifying old versions if they become too obsolete and\n * need to upgrade. The message is displayed in the status bar.\n * @see GetWarnings()\n */\nclass CAlert\n")),(0,r.kt)("p",null,"To describe a member or variable use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//! Description before the member\nint var;\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int var; //!< Description after the member\n")),(0,r.kt)("p",null,"Also OK:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"///\n/// ... Description ...\n///\nbool function2(int arg1, const char *arg2)\n")),(0,r.kt)("p",null,"Not picked up by Doxygen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//\n// ... Description ...\n//\n")),(0,r.kt)("p",null,"Also not picked up by Doxygen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n * ... Description ...\n */\n")),(0,r.kt)("p",null,"A full list of comment syntaxes picked up by Doxygen can be found at ",(0,r.kt)("a",{parentName:"p",href:"http://www.doxygen.nl/manual/docblocks.html"},"http://www.doxygen.nl/manual/docblocks.html"),",\nbut the above styles are favored."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Avoiding duplicating type and input/output information in function\ndescriptions.")))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Use backticks (","`","`",") to refer to ",(0,r.kt)("inlineCode",{parentName:"li"},"argument")," names in function and\nparameter descriptions.")))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Backticks aren't required when referring to functions Doxygen already knows\nabout; it will build hyperlinks for these automatically. See\n",(0,r.kt)("a",{parentName:"li",href:"http://www.doxygen.nl/manual/autolink.html"},"http://www.doxygen.nl/manual/autolink.html")," for complete info.")))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Avoid linking to external documentation; links can break.")))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Javadoc and all valid Doxygen comments are stripped from Doxygen source code\npreviews (",(0,r.kt)("inlineCode",{parentName:"li"},"STRIP_CODE_COMMENTS = YES")," in 'Doxyfile.in'). If\nyou want a comment to be preserved, it must instead use ",(0,r.kt)("inlineCode",{parentName:"li"},"//")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"/* */"),".")))),(0,r.kt)("h3",{id:"generating-documentation"},"Generating Documentation"),(0,r.kt)("p",null,"The documentation can be generated with ",(0,r.kt)("inlineCode",{parentName:"p"},"make docs")," and cleaned up with ",(0,r.kt)("inlineCode",{parentName:"p"},"make\nclean-docs"),". The resulting files are located in ",(0,r.kt)("inlineCode",{parentName:"p"},"doc/doxygen/html"),"; open\n",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," in that directory to view the homepage."),(0,r.kt)("p",null,"Before running ",(0,r.kt)("inlineCode",{parentName:"p"},"make docs"),", you'll need to install these dependencies:"),(0,r.kt)("p",null,"Linux: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt install doxygen graphviz\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"brew install doxygen graphviz`\n")),(0,r.kt)("h2",{id:"development-tips-and-tricks"},"Development tips and tricks"),(0,r.kt)("h3",{id:"compiling-for-debugging"},"Compiling for debugging"),(0,r.kt)("p",null,"Run configure with ",(0,r.kt)("inlineCode",{parentName:"p"},"--enable-debug")," to add additional compiler flags that\nproduce better debugging builds."),(0,r.kt)("h3",{id:"compiling-for-gprof-profiling"},"Compiling for gprof profiling"),(0,r.kt)("p",null,"Run configure with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--enable-gprof")," option, then make."),(0,r.kt)("h3",{id:"debuglog"},"debug.log"),(0,r.kt)("p",null,"If the code is behaving strangely, take a look in the ",(0,r.kt)("inlineCode",{parentName:"p"},"debug.log")," file in the data directory;\nerror and debugging messages are written there."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"-debug=...")," command-line option controls debugging; running with just ",(0,r.kt)("inlineCode",{parentName:"p"},"-debug")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-debug=1")," will turn\non all categories (and give you a very large ",(0,r.kt)("inlineCode",{parentName:"p"},"debug.log")," file)."),(0,r.kt)("p",null,"The Qt code routes ",(0,r.kt)("inlineCode",{parentName:"p"},"qDebug()")," output to ",(0,r.kt)("inlineCode",{parentName:"p"},"debug.log"),' under category "qt": run with ',(0,r.kt)("inlineCode",{parentName:"p"},"-debug=qt"),"\nto see it."),(0,r.kt)("h3",{id:"testnet-and-regtest-modes"},"Testnet and Regtest modes"),(0,r.kt)("p",null,"Run with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-testnet"),' option to run with "play sbit" on the test network, if you\nare testing multi-machine code that needs to operate across the internet.'),(0,r.kt)("p",null,"If you are testing something that can run on one machine, run with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-regtest")," option.\nIn regression test mode, blocks can be created on-demand; see ",(0,r.kt)("inlineCode",{parentName:"p"},"test/functional/")," for tests\nthat run in ",(0,r.kt)("inlineCode",{parentName:"p"},"-regtest")," mode."),(0,r.kt)("h3",{id:"debug_lockorder"},"DEBUG_LOCKORDER"),(0,r.kt)("p",null,"SBit Core is a multi-threaded application, and deadlocks or other\nmulti-threading bugs can be very difficult to track down. The ",(0,r.kt)("inlineCode",{parentName:"p"},"--enable-debug"),"\nconfigure option adds ",(0,r.kt)("inlineCode",{parentName:"p"},"-DDEBUG_LOCKORDER")," to the compiler flags. This inserts\nrun-time checks to keep track of which locks are held and adds warnings to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"debug.log")," file if inconsistencies are detected."),(0,r.kt)("h3",{id:"valgrind-suppressions-file"},"Valgrind suppressions file"),(0,r.kt)("p",null,"Valgrind is a programming tool for memory debugging, memory leak detection, and\nprofiling. The repo contains a Valgrind suppressions file\n(",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/blob/master/contrib/valgrind.supp"},(0,r.kt)("inlineCode",{parentName:"a"},"valgrind.supp")),")\nwhich includes known Valgrind warnings in our dependencies that cannot be fixed\nin-tree. Example use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ valgrind --suppressions=contrib/valgrind.supp src/test/test_bitcoin\n$ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n      --show-leak-kinds=all src/test/test_bitcoin --log_level=test_suite\n$ valgrind -v --leak-check=full src/bitcoind -printtoconsole\n$ ./test/functional/test_runner.py --valgrind\n")),(0,r.kt)("h3",{id:"compiling-for-test-coverage"},"Compiling for test coverage"),(0,r.kt)("p",null,"LCOV can be used to generate a test coverage report based upon ",(0,r.kt)("inlineCode",{parentName:"p"},"make check"),"\nexecution. LCOV must be installed on your system (e.g. the ",(0,r.kt)("inlineCode",{parentName:"p"},"lcov")," package\non Debian/Ubuntu)."),(0,r.kt)("p",null,"To enable LCOV report generation during test runs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./configure --enable-lcov\nmake\nmake cov\n\n# A coverage report will now be accessible at `./test_bitcoin.coverage/index.html`.\n")),(0,r.kt)("h3",{id:"performance-profiling-with-perf"},"Performance profiling with perf"),(0,r.kt)("p",null,"Profiling is a good way to get a precise idea of where time is being spent in\ncode. One tool for doing profiling on Linux platforms is called\n",(0,r.kt)("a",{parentName:"p",href:"http://www.brendangregg.com/perf.html"},(0,r.kt)("inlineCode",{parentName:"a"},"perf")),", and has been integrated into\nthe functional test framework. Perf can observe a running process and sample\n(at some frequency) where its execution is."),(0,r.kt)("p",null,"Perf installation is contingent on which kernel version you're running; see\n",(0,r.kt)("a",{parentName:"p",href:"https://askubuntu.com/questions/50145/how-to-install-perf-monitoring-tool"},"this thread"),"\nfor specific instructions."),(0,r.kt)("p",null,"Certain kernel parameters may need to be set for perf to be able to inspect the\nrunning process's stack."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ sudo sysctl -w kernel.perf_event_paranoid=-1\n$ sudo sysctl -w kernel.kptr_restrict=0\n")),(0,r.kt)("p",null,"Make sure you ",(0,r.kt)("a",{parentName:"p",href:"https://lwn.net/Articles/420403/"},"understand the security\ntrade-offs")," of setting these kernel\nparameters."),(0,r.kt)("p",null,"To profile a running sbitd process for 60 seconds, you could use an\ninvocation of ",(0,r.kt)("inlineCode",{parentName:"p"},"perf record")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ perf record \\\n    -g --call-graph dwarf --per-thread -F 140 \\\n    -p `pgrep sbitd` -- sleep 60\n")),(0,r.kt)("p",null,"You could then analyze the results by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"perf report --stdio | c++filt | less\n")),(0,r.kt)("p",null,"or using a graphical tool like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/KDAB/hotspot"},"Hotspot"),"."),(0,r.kt)("p",null,"See the functional test documentation for how to invoke perf within tests."),(0,r.kt)("h3",{id:"sanitizers"},"Sanitizers"),(0,r.kt)("p",null,'SBit Core can be compiled with various "sanitizers" enabled, which add\ninstrumentation for issues regarding things like memory safety, thread race\nconditions, or undefined behavior. This is controlled with the\n',(0,r.kt)("inlineCode",{parentName:"p"},"--with-sanitizers")," configure flag, which should be a comma separated list of\nsanitizers to enable. The sanitizer list should correspond to supported\n",(0,r.kt)("inlineCode",{parentName:"p"},"-fsanitize=")," options in your compiler. These sanitizers have runtime overhead,\nso they are most useful when testing changes or producing debugging builds."),(0,r.kt)("p",null,"Some examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Enable both the address sanitizer and the undefined behavior sanitizer\n./configure --with-sanitizers=address,undefined\n\n# Enable the thread sanitizer\n./configure --with-sanitizers=thread\n")),(0,r.kt)("p",null,'If you are compiling with GCC you will typically need to install corresponding\n"san" libraries to actually compile with these flags, e.g. libasan for the\naddress sanitizer, libtsan for the thread sanitizer, and libubsan for the\nundefined sanitizer. If you are missing required libraries, the configure script\nwill fail with a linker error when testing the sanitizer flags.'),(0,r.kt)("p",null,"The test suite should pass cleanly with the ",(0,r.kt)("inlineCode",{parentName:"p"},"thread")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," sanitizers,\nbut there are a number of known problems when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," sanitizer. The\naddress sanitizer is known to fail in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/src/crypto/sha256_sse4.cpp"},"sha256_sse4::Transform")," which makes it unusable\nunless you also use ",(0,r.kt)("inlineCode",{parentName:"p"},"--disable-asm")," when running configure. We would like to fix\nsanitizer issues, so please send pull requests if you can fix any errors found\nby the address sanitizer (or any other sanitizer)."),(0,r.kt)("p",null,"Not all sanitizer options can be enabled at the same time, e.g. trying to build\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"--with-sanitizers=address,thread")," will fail in the configure script as\nthese sanitizers are mutually incompatible. Refer to your compiler manual to\nlearn more about these options and which sanitizers are supported by your\ncompiler."),(0,r.kt)("p",null,"Additional resources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/AddressSanitizer.html"},"AddressSanitizer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/LeakSanitizer.html"},"LeakSanitizer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/MemorySanitizer.html"},"MemorySanitizer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/ThreadSanitizer.html"},"ThreadSanitizer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html"},"UndefinedBehaviorSanitizer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html"},"GCC Instrumentation Options")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/google/sanitizers/wiki"},"Google Sanitizers Wiki")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bitcoin/issues/12691"},"Issue #12691: Enable -fsanitize flags in Travis"))),(0,r.kt)("h2",{id:"lockingmutex-usage-notes"},"Locking/mutex usage notes"),(0,r.kt)("p",null,"The code is multi-threaded and uses mutexes and the\n",(0,r.kt)("inlineCode",{parentName:"p"},"LOCK")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TRY_LOCK")," macros to protect data structures."),(0,r.kt)("p",null,"Deadlocks due to inconsistent lock ordering (thread 1 locks ",(0,r.kt)("inlineCode",{parentName:"p"},"cs_main")," and then\n",(0,r.kt)("inlineCode",{parentName:"p"},"cs_wallet"),", while thread 2 locks them in the opposite order: result, deadlock\nas each waits for the other to release its lock) are a problem. Compile with\n",(0,r.kt)("inlineCode",{parentName:"p"},"-DDEBUG_LOCKORDER")," (or use ",(0,r.kt)("inlineCode",{parentName:"p"},"--enable-debug"),") to get lock order inconsistencies\nreported in the ",(0,r.kt)("inlineCode",{parentName:"p"},"debug.log")," file."),(0,r.kt)("p",null,"Re-architecting the core code so there are better-defined interfaces\nbetween the various components is a goal, with any necessary locking\ndone by the components (e.g. see the self-contained ",(0,r.kt)("inlineCode",{parentName:"p"},"FillableSigningProvider")," class\nand its ",(0,r.kt)("inlineCode",{parentName:"p"},"cs_KeyStore")," lock for example)."),(0,r.kt)("h2",{id:"threads"},"Threads"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/bitcoind_8cpp.html#a0ddf1224851353fc92bfbff6f499fa97"},"Main thread (",(0,r.kt)("inlineCode",{parentName:"a"},"bitcoind"),")"),"\n: Started from ",(0,r.kt)("inlineCode",{parentName:"p"},"main()")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"bitcoind.cpp"),". Responsible for starting up and\nshutting down the application.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/init_8cpp.html#ae9e290a0e829ec0198518de2eda579d1"},"ThreadImport (",(0,r.kt)("inlineCode",{parentName:"a"},"b-loadblk"),")"),"\n: Loads blocks from ",(0,r.kt)("inlineCode",{parentName:"p"},"blk*.dat")," files or ",(0,r.kt)("inlineCode",{parentName:"p"},"-loadblock=<file>")," on startup.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/validation_8cpp.html#a925a33e7952a157922b0bbb8dab29a20"},"ThreadScriptCheck (",(0,r.kt)("inlineCode",{parentName:"a"},"b-scriptch.x"),")"),"\n: Parallel script validation threads for transactions in blocks.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/httpserver_8cpp.html#abb9f6ea8819672bd9a62d3695070709c"},"ThreadHTTP (",(0,r.kt)("inlineCode",{parentName:"a"},"b-http"),")"),"\n: Libevent thread to listen for RPC and REST connections.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/httpserver_8cpp.html#aa6a7bc27265043bc0193220c5ae3a55f"},"HTTP worker threads(",(0,r.kt)("inlineCode",{parentName:"a"},"b-httpworker.x"),")"),"\n: Threads to service RPC and REST requests.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/class_base_index.html#a96a7407421fbf877509248bbe64f8d87"},"Indexer threads (",(0,r.kt)("inlineCode",{parentName:"a"},"b-txindex"),", etc)"),"\n: One thread per indexer.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/class_c_scheduler.html#a14d2800815da93577858ea078aed1fba"},"SchedulerThread (",(0,r.kt)("inlineCode",{parentName:"a"},"b-scheduler"),")"),"\n: Does asynchronous background tasks like dumping wallet contents, dumping\naddrman and running asynchronous validationinterface callbacks.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/torcontrol_8cpp.html#a4faed3692d57a0d7bdbecf3b37f72de0"},"TorControlThread (",(0,r.kt)("inlineCode",{parentName:"a"},"b-torcontrol"),")"),"\n: Libevent thread for tor connections.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Net threads:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/class_c_connman.html#aacdbb7148575a31bb33bc345e2bf22a9"},"ThreadMessageHandler (",(0,r.kt)("inlineCode",{parentName:"a"},"b-msghand"),")"),"\n: Application level message handling (sending and receiving). Almost\nall net_processing and validation logic runs on this thread.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/class_c_connman.html#aa7c6970ed98a4a7bafbc071d24897d13"},"ThreadDNSAddressSeed (",(0,r.kt)("inlineCode",{parentName:"a"},"b-dnsseed"),")"),"\n: Loads addresses of peers from the DNS.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/net_8cpp.html#a63f82a71c4169290c2db1651a9bbe249"},"ThreadMapPort (",(0,r.kt)("inlineCode",{parentName:"a"},"b-upnp"),")"),"\n: Universal plug-and-play startup/shutdown.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/class_c_connman.html#a765597cbfe99c083d8fa3d61bb464e34"},"ThreadSocketHandler (",(0,r.kt)("inlineCode",{parentName:"a"},"b-net"),")"),"\n: Sends/Receives data from peers on port 8333.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/class_c_connman.html#a0b787caf95e52a346a2b31a580d60a62"},"ThreadOpenAddedConnections (",(0,r.kt)("inlineCode",{parentName:"a"},"b-addcon"),")"),"\n: Opens network connections to added nodes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doxygen.bitcoincore.org/class_c_connman.html#a55e9feafc3bab78e5c9d408c207faa45"},"ThreadOpenConnections (",(0,r.kt)("inlineCode",{parentName:"a"},"b-opencon"),")"),"\n: Initiates new connections to peers."))))),(0,r.kt)("h2",{id:"ignoring-ideeditor-files"},"Ignoring IDE/editor files"),(0,r.kt)("p",null,"In closed-source environments in which everyone uses the same IDE, it is common\nto add temporary files it produces to the project-wide ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore")," file."),(0,r.kt)("p",null,"However, in open source software such as SBit Core, where everyone uses\ntheir own editors/IDE/tools, it is less common. Only you know what files your\neditor produces and this may change from version to version. The canonical way\nto do this is thus to create your local gitignore. Add this to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.gitconfig"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[core]\n        excludesfile = /home/.../.gitignore_global\n")),(0,r.kt)("p",null,"(alternatively, type the command ",(0,r.kt)("inlineCode",{parentName:"p"},"git config --global core.excludesfile ~/.gitignore_global"),"\non a terminal)"),(0,r.kt)("p",null,"Then put your favourite tool's temporary filenames in that file, e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# NetBeans\nnbproject/\n")),(0,r.kt)("p",null,"Another option is to create a per-repository excludes file ",(0,r.kt)("inlineCode",{parentName:"p"},".git/info/exclude"),".\nThese are not committed but apply only to one repository."),(0,r.kt)("p",null,"If a set of tools is used by the build system or scripts the repository (for\nexample, lcov) it is perfectly acceptable to add its files to ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore"),"\nand commit them."),(0,r.kt)("h1",{id:"development-guidelines"},"Development guidelines"),(0,r.kt)("p",null,"A few non-style-related recommendations for developers, as well as points to\npay attention to for reviewers of SBit Core code."),(0,r.kt)("h2",{id:"general-sbit-core"},"General SBit Core"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"New features should be exposed on RPC first, then can be made available in the GUI."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": RPC allows for better automatic testing. The test suite for\nthe GUI is very limited."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Make sure pull requests pass Travis CI before merging."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Rationale"),": Makes sure that they pass thorough testing, and that the tester will keep passing\non the master branch. Otherwise, all new pull requests will start failing the tests, resulting in\nconfusion and mayhem.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Explanation"),": If the test suite is to be updated for a change, this has to\nbe done first."))))),(0,r.kt)("h2",{id:"wallet"},"Wallet"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Make sure that no crashes happen with run-time option ",(0,r.kt)("inlineCode",{parentName:"p"},"-disablewallet"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Include ",(0,r.kt)("inlineCode",{parentName:"p"},"db_cxx.h")," (BerkeleyDB header) only when ",(0,r.kt)("inlineCode",{parentName:"p"},"ENABLE_WALLET")," is set."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB.")))),(0,r.kt)("h2",{id:"general-c"},"General C++"),(0,r.kt)("p",null,"For general C++ guidelines, you may refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://isocpp.github.io/CppCoreGuidelines/"},"C++ Core\nGuidelines"),"."),(0,r.kt)("p",null,"Common misconceptions are clarified in those sections:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Passing (non-)fundamental types in the ",(0,r.kt)("a",{parentName:"p",href:"https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-conventional"},"C++ Core\nGuideline"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Assertions should not have side-effects."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Even though the source code is set to refuse to compile\nwith assertions disabled, having side-effects in assertions is unexpected and\nmakes the code harder to understand."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you use the ",(0,r.kt)("inlineCode",{parentName:"p"},".h"),", you must link the ",(0,r.kt)("inlineCode",{parentName:"p"},".cpp"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Include files define the interface for the code in implementation files. Including one but\nnot linking the other is confusing. Please avoid that. Moving functions from\nthe ",(0,r.kt)("inlineCode",{parentName:"li"},".h")," to the ",(0,r.kt)("inlineCode",{parentName:"li"},".cpp")," should not result in build errors."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example, by using\n",(0,r.kt)("inlineCode",{parentName:"p"},"unique_ptr")," for allocations in a function."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": This avoids memory and resource leaks, and ensures exception safety."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"MakeUnique()")," to construct objects owned by ",(0,r.kt)("inlineCode",{parentName:"p"},"unique_ptr"),"s."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"MakeUnique")," is concise and ensures exception safety in complex expressions.\n",(0,r.kt)("inlineCode",{parentName:"li"},"MakeUnique")," is a temporary project local implementation of ",(0,r.kt)("inlineCode",{parentName:"li"},"std::make_unique")," (C++14).")))),(0,r.kt)("h2",{id:"c-data-structures"},"C++ data structures"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Never use the ",(0,r.kt)("inlineCode",{parentName:"p"},"std::map []")," syntax when reading from a map, but instead use ",(0,r.kt)("inlineCode",{parentName:"p"},".find()"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"[]")," does an insert (of the default element) if the item doesn't\nexist in the map yet. This has resulted in memory leaks in the past, as well as\nrace conditions (expecting read-read behavior). Using ",(0,r.kt)("inlineCode",{parentName:"li"},"[]")," is fine for ",(0,r.kt)("em",{parentName:"li"},"writing")," to a map."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Do not compare an iterator from one data structure with an iterator of\nanother data structure (even if of the same type)."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),': Behavior is undefined. In C++ parlor this means "may reformat\nthe universe", in practice this has resulted in at least one hard-to-debug crash bug.'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Watch out for out-of-bounds vector access. ",(0,r.kt)("inlineCode",{parentName:"p"},"&vch[vch.size()]")," is illegal,\nincluding ",(0,r.kt)("inlineCode",{parentName:"p"},"&vch[0]")," for an empty vector. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"vch.data()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"vch.data() +\nvch.size()")," instead.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Vector bounds checking is only enabled in debug mode. Do not rely on it.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Initialize all non-static class members where they are defined.\nIf this is skipped for a good reason (i.e., optimization on the critical\npath), add an explicit comment about this."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Ensure determinism by avoiding accidental use of uninitialized\nvalues. Also, static analyzers balk about this.\nInitializing the members in the declaration makes it easy to\nspot uninitialized ones.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class A\n{\n    uint32_t m_count{0};\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By default, declare constructors ",(0,r.kt)("inlineCode",{parentName:"p"},"explicit"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": This is a precaution to avoid unintended\n",(0,r.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/cpp/language/converting_constructor"},"conversions"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use explicitly signed or unsigned ",(0,r.kt)("inlineCode",{parentName:"p"},"char"),"s, or even better ",(0,r.kt)("inlineCode",{parentName:"p"},"uint8_t")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"int8_t"),". Do not use bare ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," unless it is to pass to a third-party API.\nThis type can be signed or unsigned depending on the architecture, which can\nlead to interoperability problems or dangerous conditions such as\nout-of-bounds array accesses.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Prefer explicit constructions over implicit ones that rely on 'magical' C++ behavior."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Easier to understand what is happening, thus easier to spot mistakes, even for those\nthat are not language lawyers."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Span")," as function argument when it can operate on any range-like container."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Compared to ",(0,r.kt)("inlineCode",{parentName:"li"},"Foo(const vector<int>&)")," this avoids the need for a (potentially expensive)\nconversion to vector if the caller happens to have the input stored in another type of container.\nHowever, be aware of the pitfalls documented in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/SBit-Project/sbit/src/span.h"},"span.h"),".")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void Foo(Span<const int> data);\n\nstd::vector<int> vec{1,2,3};\nFoo(vec);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Prefer ",(0,r.kt)("inlineCode",{parentName:"p"},"enum class")," (scoped enumerations) over ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," (traditional enumerations) where possible."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Scoped enumerations avoid two potential pitfalls/problems with traditional C++ enumerations: implicit conversions to ",(0,r.kt)("inlineCode",{parentName:"li"},"int"),", and name clashes due to enumerators being exported to the surrounding scope."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"switch")," statement on an enumeration example:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"enum class Tabs {\n    INFO,\n    CONSOLE,\n    GRAPH,\n    PEERS\n};\n\nint GetInt(Tabs tab)\n{\n    switch (tab) {\n    case Tabs::INFO: return 0;\n    case Tabs::CONSOLE: return 1;\n    case Tabs::GRAPH: return 2;\n    case Tabs::PEERS: return 3;\n    } // no default case, so the compiler can warn about missing cases\n    assert(false);\n}\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Rationale"),": The comment documents skipping ",(0,r.kt)("inlineCode",{parentName:"p"},"default:")," label, and it complies with ",(0,r.kt)("inlineCode",{parentName:"p"},"clang-format")," rules. The assertion prevents firing of ",(0,r.kt)("inlineCode",{parentName:"p"},"-Wreturn-type")," warning on some compilers."),(0,r.kt)("h2",{id:"strings-and-formatting"},"Strings and formatting"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Be careful of ",(0,r.kt)("inlineCode",{parentName:"p"},"LogPrint")," versus ",(0,r.kt)("inlineCode",{parentName:"p"},"LogPrintf"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"LogPrint")," takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," argument, ",(0,r.kt)("inlineCode",{parentName:"p"},"LogPrintf")," does not."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Confusion of these can result in runtime exceptions due to\nformatting mismatch, and it is easy to get wrong because of subtly similar naming."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string"),", avoid C string manipulation functions."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": C++ string handling is marginally safer, less scope for\nbuffer overflows, and surprises with ",(0,r.kt)("inlineCode",{parentName:"li"},"\\0")," characters. Also, some C string manipulations\ntend to act differently depending on platform, or even the user locale."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"ParseInt32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ParseInt64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ParseUInt32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ParseUInt64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ParseDouble")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"utilstrencodings.h")," for number parsing."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": These functions do overflow checking and avoid pesky locale issues."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Avoid using locale dependent functions if possible. You can use the provided\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/test/lint/lint-locale-dependence.sh"},(0,r.kt)("inlineCode",{parentName:"a"},"lint-locale-dependence.sh")),"\nto check for accidental use of locale dependent functions."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Rationale"),": Unnecessary locale dependence can cause bugs that are very tricky to isolate and fix.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"These functions are known to be locale dependent:\n",(0,r.kt)("inlineCode",{parentName:"p"},"alphasort"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"asctime"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"asprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"atof"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"atoi"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"atol"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"atoll"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"atoq"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"btowc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ctime"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fgetwc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fgetws"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fputwc"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"fputws"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fscanf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fwprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"getdate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"getwc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"getwchar"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isalnum"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"isalpha"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isblank"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iscntrl"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isdigit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isgraph"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"islower"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isprint"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"ispunct"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isspace"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isupper"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswalnum"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswalpha"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswblank"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"iswcntrl"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswctype"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswdigit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswgraph"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswlower"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswprint"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"iswpunct"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswspace"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswupper"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"iswxdigit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isxdigit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mblen"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"mbrlen"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mbrtowc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mbsinit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mbsnrtowcs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mbsrtowcs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mbstowcs"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"mbtowc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mktime"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"putwc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"putwchar"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"scanf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"snprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sprintf"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"sscanf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"stoi"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"stol"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"stoll"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strcasecmp"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strcasestr"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strcoll"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"strfmon"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strftime"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strncasecmp"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strptime"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtod"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtof"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"strtoimax"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtol"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtold"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtoll"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtoq"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtoul"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"strtoull"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtoumax"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strtouq"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strxfrm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"swprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tolower"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"toupper"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"towctrans"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"towlower"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"towupper"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ungetwc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vasprintf"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"vdprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"versionsort"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vfprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vfscanf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vfwprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vprintf"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"vscanf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vsnprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vsprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vsscanf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vswprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"vwprintf"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"wcrtomb"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcscasecmp"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcscoll"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcsftime"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcsncasecmp"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcsnrtombs"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"wcsrtombs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstod"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstof"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstoimax"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstol"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstold"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"wcstoll"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstombs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstoul"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstoull"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcstoumax"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcswidth"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"wcsxfrm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wctob"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wctomb"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wctrans"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wctype"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wcwidth"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"wprintf"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For ",(0,r.kt)("inlineCode",{parentName:"p"},"strprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LogPrint"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LogPrintf")," formatting characters don't need size specifiers."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},".c_str()")," sparingly. Its only valid use is to pass C++ strings to C functions that take NULL-terminated\nstrings."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Do not use it when passing a sized array (so along with ",(0,r.kt)("inlineCode",{parentName:"p"},".size()"),"). Use ",(0,r.kt)("inlineCode",{parentName:"p"},".data()")," instead to get a pointer\nto the raw data."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Although this is guaranteed to be safe starting with C++11, ",(0,r.kt)("inlineCode",{parentName:"li"},".data()")," communicates the intent better."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Do not use it when passing strings to ",(0,r.kt)("inlineCode",{parentName:"p"},"tfm::format"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strprintf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LogPrint[f]"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": This is redundant. Tinyformat handles strings."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Do not use it to convert to ",(0,r.kt)("inlineCode",{parentName:"p"},"QString"),". Use ",(0,r.kt)("inlineCode",{parentName:"p"},"QString::fromStdString()"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Qt has built-in functionality for converting their string\ntype from/to C++. No need to roll your own."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In cases where do you call ",(0,r.kt)("inlineCode",{parentName:"p"},".c_str()"),", you might want to additionally check that the string does not contain embedded '\\0' characters, because\nit will (necessarily) truncate the string. This might be used to hide parts of the string from logging or to circumvent\nchecks. If a use of strings is sensitive to this, take care to check the string for embedded NULL characters first\nand reject it if there are any (see ",(0,r.kt)("inlineCode",{parentName:"p"},"ParsePrechecks")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"strencodings.cpp")," for an example)."))))),(0,r.kt)("h2",{id:"shadowing"},"Shadowing"),(0,r.kt)("p",null,"Although the shadowing warning (",(0,r.kt)("inlineCode",{parentName:"p"},"-Wshadow"),") is not enabled by default (it prevents issues arising\nfrom using a different variable with the same name),\nplease name variables so that their names do not shadow variables defined in the source code."),(0,r.kt)("p",null,"When using nested cycles, do not name the inner cycle variable the same as in\nthe upper cycle, etc."),(0,r.kt)("h2",{id:"threads-and-synchronization"},"Threads and synchronization"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Prefer ",(0,r.kt)("inlineCode",{parentName:"p"},"Mutex")," type to ",(0,r.kt)("inlineCode",{parentName:"p"},"RecursiveMutex")," one")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Consistently use ",(0,r.kt)("a",{parentName:"p",href:"https://clang.llvm.org/docs/ThreadSafetyAnalysis.html"},"Clang Thread Safety Analysis")," annotations to\nget compile-time warnings about potential race conditions in code. Combine annotations in function declarations with\nrun-time asserts in function definitions:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// txmempool.h\nclass CTxMemPool\n{\npublic:\n    ...\n    mutable RecursiveMutex cs;\n    ...\n    void UpdateTransactionsFromBlock(...) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, cs);\n    ...\n}\n\n// txmempool.cpp\nvoid CTxMemPool::UpdateTransactionsFromBlock(...)\n{\n    AssertLockHeld(::cs_main);\n    AssertLockHeld(cs);\n    ...\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// validation.h\nclass ChainstateManager\n{\npublic:\n    ...\n    bool ProcessNewBlock(...) EXCLUSIVE_LOCKS_REQUIRED(!::cs_main);\n    ...\n}\n\n// validation.cpp\nbool ChainstateManager::ProcessNewBlock(...)\n{\n    AssertLockNotHeld(::cs_main);\n    ...\n    LOCK(::cs_main);\n    ...\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Build and run tests with ",(0,r.kt)("inlineCode",{parentName:"p"},"-DDEBUG_LOCKORDER")," to verify that no potential\ndeadlocks are introduced. As of 0.12, this is defined by default when\nconfiguring with ",(0,r.kt)("inlineCode",{parentName:"p"},"--enable-debug"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"LOCK"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"TRY_LOCK")," be aware that the lock exists in the context of\nthe current scope, so surround the statement and the code that needs the lock\nwith braces."))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"OK")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"{\n    TRY_LOCK(cs_vNodes, lockNodes);\n    ...\n}\n")))),(0,r.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Wrong")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"TRY_LOCK(cs_vNodes, lockNodes);\n{\n    ...\n}\n")))),(0,r.kt)("h2",{id:"scripts"},"Scripts"),(0,r.kt)("h3",{id:"shebang"},"Shebang"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env bash")," instead of obsolete ",(0,r.kt)("inlineCode",{parentName:"p"},"#!/bin/bash"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/dylanaraps/pure-bash-bible#shebang"},(0,r.kt)("em",{parentName:"a"},"Rationale")),":"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"#!/bin/bash")," assumes it is always installed to /bin/ which can cause issues;"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env bash")," searches the user's PATH to find the bash binary."))))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"OK")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/usr/bin/env bash\n")))),(0,r.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Wrong")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n")))),(0,r.kt)("h2",{id:"source-code-organization"},"Source code organization"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Implementation code should go into the ",(0,r.kt)("inlineCode",{parentName:"p"},".cpp")," file and not the ",(0,r.kt)("inlineCode",{parentName:"p"},".h"),", unless necessary due to template usage or\nwhen performance due to inlining is critical."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Shorter and simpler header files are easier to read and reduce compile time."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use only the lowercase alphanumerics (",(0,r.kt)("inlineCode",{parentName:"p"},"a-z0-9"),"), underscore (",(0,r.kt)("inlineCode",{parentName:"p"},"_"),") and hyphen (",(0,r.kt)("inlineCode",{parentName:"p"},"-"),") in source code filenames."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"grep"),":ing and auto-completing filenames is easier when using a consistent\nnaming pattern. Potential problems when building on case-insensitive filesystems are\navoided when using only lowercase characters in source code filenames."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Every ",(0,r.kt)("inlineCode",{parentName:"p"},".cpp")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".h")," file should ",(0,r.kt)("inlineCode",{parentName:"p"},"#include")," every header file it directly uses classes, functions or other\ndefinitions from, even if those headers are already included indirectly through other headers."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Excluding headers because they are already indirectly included results in compilation\nfailures when those indirect dependencies change. Furthermore, it obscures what the real code\ndependencies are."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Don't import anything into the global namespace (",(0,r.kt)("inlineCode",{parentName:"p"},"using namespace ..."),"). Use\nfully specified types such as ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Avoids symbol conflicts."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Terminate namespaces with a comment (",(0,r.kt)("inlineCode",{parentName:"p"},"// namespace mynamespace"),"). The comment\nshould be placed on the same line as the brace closing the namespace, e.g."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace mynamespace {\n...\n} // namespace mynamespace\n\nnamespace {\n...\n} // namespace\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Rationale"),": Avoids confusion about the namespace context.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"#include <primitives/transaction.h>")," bracket syntax instead of\n",(0,r.kt)("inlineCode",{parentName:"p"},'#include "primitives/transactions.h"')," quote syntax."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Bracket syntax is less ambiguous because the preprocessor\nsearches a fixed list of include directories without taking location of the\nsource file into account. This allows quoted includes to stand out more when\nthe location of the source file actually is relevant."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use include guards to avoid the problem of double inclusion. The header file\n",(0,r.kt)("inlineCode",{parentName:"p"},"foo/bar.h")," should use the include guard identifier ",(0,r.kt)("inlineCode",{parentName:"p"},"BITCOIN_FOO_BAR_H"),", e.g."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#ifndef BITCOIN_FOO_BAR_H\n#define BITCOIN_FOO_BAR_H\n...\n#endif // BITCOIN_FOO_BAR_H\n")),(0,r.kt)("h2",{id:"gui"},"GUI"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Do not display or manipulate dialogs in model code (classes ",(0,r.kt)("inlineCode",{parentName:"p"},"*Model"),")."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Model classes pass through events and data from the core, they\nshould not interact with the user. That's where View classes come in. The converse also\nholds: try to not directly access core data structures from Views."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Avoid adding slow or blocking code in the GUI thread. In particular, do not\nadd new ",(0,r.kt)("inlineCode",{parentName:"p"},"interfaces::Node")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"interfaces::Wallet")," method calls, even if they\nmay be fast now, in case they are changed to lock or communicate across\nprocesses in the future."),(0,r.kt)("p",{parentName:"li"},"Prefer to offload work from the GUI thread to worker threads (see\n",(0,r.kt)("inlineCode",{parentName:"p"},"RPCExecutor")," in console code as an example) or take other steps (see\n",(0,r.kt)("a",{parentName:"p",href:"https://doc.qt.io/archives/qq/qq27-responsive-guis.html"},"https://doc.qt.io/archives/qq/qq27-responsive-guis.html"),") to keep the GUI\nresponsive."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Blocking the GUI thread can increase latency, and lead to\nhangs and deadlocks.")))),(0,r.kt)("h2",{id:"upgrading-leveldb"},"Upgrading LevelDB"),(0,r.kt)("p",null,"Extra care must be taken when upgrading LevelDB. This section explains issues\nyou must be aware of."),(0,r.kt)("h3",{id:"file-descriptor-counts"},"File Descriptor Counts"),(0,r.kt)("p",null,"In most configurations, we use the default LevelDB value for ",(0,r.kt)("inlineCode",{parentName:"p"},"max_open_files"),",\nwhich is 1000 at the time of this writing. If LevelDB actually uses this many\nfile descriptors, it will cause problems with Bitcoin's ",(0,r.kt)("inlineCode",{parentName:"p"},"select()")," loop, because\nit may cause new sockets to be created where the fd value is >= 1024. For this\nreason, on 64-bit Unix systems, we rely on an internal LevelDB optimization that\nuses ",(0,r.kt)("inlineCode",{parentName:"p"},"mmap()")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"close()")," to open table files without actually retaining\nreferences to the table file descriptors. If you are upgrading LevelDB, you must\nsanity check the changes to make sure that this assumption remains valid."),(0,r.kt)("p",null,"In addition to reviewing the upstream changes in ",(0,r.kt)("inlineCode",{parentName:"p"},"env_posix.cc"),", you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"lsof")," to\ncheck this. For example, on Linux this command will show open ",(0,r.kt)("inlineCode",{parentName:"p"},".ldb")," file counts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ lsof -p $(pidof bitcoind) |\\\n    awk \'BEGIN { fd=0; mem=0; } /ldb$/ { if ($4 == "mem") mem++; else fd++ } END { printf "mem = %s, fd = %s\\n", mem, fd}\'\nmem = 119, fd = 0\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"mem")," value shows how many files are mmap'ed, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"fd")," value shows you\nmany file descriptors these files are using. You should check that ",(0,r.kt)("inlineCode",{parentName:"p"},"fd")," is a\nsmall number (usually 0 on 64-bit hosts)."),(0,r.kt)("p",null,"See the notes in the ",(0,r.kt)("inlineCode",{parentName:"p"},"SetMaxOpenFiles()")," function in ",(0,r.kt)("inlineCode",{parentName:"p"},"dbwrapper.cc")," for more\ndetails."),(0,r.kt)("h3",{id:"consensus-compatibility"},"Consensus Compatibility"),(0,r.kt)("p",null,"It is possible for LevelDB changes to inadvertently change consensus\ncompatibility between nodes. This happened in Bitcoin 0.8 (when LevelDB was\nfirst introduced). When upgrading LevelDB, you should review the upstream changes\nto check for issues affecting consensus compatibility."),(0,r.kt)("p",null,'For example, if LevelDB had a bug that accidentally prevented a key from being\nreturned in an edge case, and that bug was fixed upstream, the bug "fix" would\nbe an incompatible consensus change. In this situation, the correct behavior\nwould be to revert the upstream fix before applying the updates to Bitcoin\'s\ncopy of LevelDB. In general, you should be wary of any upstream changes affecting\nwhat data is returned from LevelDB queries.'),(0,r.kt)("h2",{id:"scripted-diffs"},"Scripted diffs"),(0,r.kt)("p",null,"For reformatting and refactoring commits where the changes can be easily automated using a bash script, we use\nscripted-diff commits. The bash script is included in the commit message and our Travis CI job checks that\nthe result of the script is identical to the commit. This aids reviewers since they can verify that the script\ndoes exactly what it is supposed to do. It is also helpful for rebasing (since the same script can just be re-run\non the new master commit)."),(0,r.kt)("p",null,"To create a scripted-diff:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"start the commit message with ",(0,r.kt)("inlineCode",{parentName:"li"},"scripted-diff:")," (and then a description of the diff on the same line)"),(0,r.kt)("li",{parentName:"ul"},"in the commit message include the bash script between lines containing just the following text:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-BEGIN VERIFY SCRIPT-")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-END VERIFY SCRIPT-"))))),(0,r.kt)("p",null,"The scripted-diff is verified by the tool ",(0,r.kt)("inlineCode",{parentName:"p"},"test/lint/commit-script-check.sh"),". The tool's default behavior, when supplied\nwith a commit is to verify all scripted-diffs from the beginning of time up to said commit. Internally, the tool passes\nthe first supplied argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"git rev-list --reverse")," to determine which commits to verify script-diffs for, ignoring\ncommits that don't conform to the commit message format described above."),(0,r.kt)("p",null,"For development, it might be more convenient to verify all scripted-diffs in a range ",(0,r.kt)("inlineCode",{parentName:"p"},"A..B"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"test/lint/commit-script-check.sh origin/master..HEAD\n")),(0,r.kt)("h3",{id:"suggestions-and-examples"},"Suggestions and examples"),(0,r.kt)("p",null,"If you need to replace in multiple files, prefer ",(0,r.kt)("inlineCode",{parentName:"p"},"git ls-files")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," or globbing, and ",(0,r.kt)("inlineCode",{parentName:"p"},"git grep")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"grep"),", to\navoid changing files that are not under version control."),(0,r.kt)("p",null,"For efficient replacement scripts, reduce the selection to the files that potentially need to be modified, so for\nexample, instead of a blanket ",(0,r.kt)("inlineCode",{parentName:"p"},"git ls-files src | xargs sed -i s/apple/orange/"),", use\n",(0,r.kt)("inlineCode",{parentName:"p"},"git grep -l apple src | xargs sed -i s/apple/orange/"),"."),(0,r.kt)("p",null,"Also, it is good to keep the selection of files as specific as possible \u2014 for example, replace only in directories where\nyou expect replacements \u2014 because it reduces the risk that a rebase of your commit by re-running the script will\nintroduce accidental changes."),(0,r.kt)("p",null,"Some good examples of scripted-diff:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/commit/301bd41a2e6765b185bd55f4c541f9e27aeea29d"},"scripted-diff: Rename InitInterfaces to NodeContext"),"\nuses an elegant script to replace occurrences of multiple terms in all source files.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/commit/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a"},"scripted-diff: Remove g_connman, g_banman globals"),"\nreplaces specific terms in a list of specific source files.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/commit/fac03ec43a15ad547161e37e53ea82482cc508f9"},"scripted-diff: Replace fprintf with tfm::format"),"\ndoes a global replacement but excludes certain directories."))),(0,r.kt)("p",null,"To find all previous uses of scripted diffs in the repository, do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'git log --grep="-BEGIN VERIFY SCRIPT-"\n')),(0,r.kt)("h2",{id:"release-notes"},"Release notes"),(0,r.kt)("p",null,"Release notes should be written for any PR that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"introduces a notable new feature"),(0,r.kt)("li",{parentName:"ul"},"fixes a significant bug"),(0,r.kt)("li",{parentName:"ul"},"changes an API or configuration model"),(0,r.kt)("li",{parentName:"ul"},"makes any other visible change to the end-user experience.")),(0,r.kt)("p",null,"Release notes should be added to a PR-specific release note file at\n",(0,r.kt)("inlineCode",{parentName:"p"},"/doc/release-notes-<PR number>.md")," to avoid conflicts between multiple PRs.\nAll ",(0,r.kt)("inlineCode",{parentName:"p"},"release-notes*")," files are merged into a single release-notes file prior to the release."),(0,r.kt)("h2",{id:"rpc-interface-guidelines"},"RPC interface guidelines"),(0,r.kt)("p",null,"A few guidelines for introducing and reviewing new RPC interfaces:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Method naming: use consecutive lower-case names such as ",(0,r.kt)("inlineCode",{parentName:"p"},"getrawtransaction")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"submitblock"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Consistency with the existing interface."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Argument naming: use snake case ",(0,r.kt)("inlineCode",{parentName:"p"},"fee_delta")," (and not, e.g. camel case ",(0,r.kt)("inlineCode",{parentName:"p"},"feeDelta"),")"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Consistency with the existing interface."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use the JSON parser for parsing, don't manually parse integers or strings from\narguments unless absolutely necessary."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Rationale"),": Introduces hand-rolled string manipulation code at both the caller and callee sites,\nwhich is error-prone, and it is easy to get things such as escaping wrong.\nJSON already supports nested data structures, no need to re-invent the wheel.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Exception"),": AmountFromValue can parse amounts as string. This was introduced because many JSON\nparsers and formatters hard-code handling decimal numbers as floating-point\nvalues, resulting in potential loss of precision. This is unacceptable for\nmonetary values. ",(0,r.kt)("strong",{parentName:"p"},"Always")," use ",(0,r.kt)("inlineCode",{parentName:"p"},"AmountFromValue")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ValueFromAmount")," when\ninputting or outputting monetary values. The only exceptions to this are\n",(0,r.kt)("inlineCode",{parentName:"p"},"prioritisetransaction")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"getblocktemplate")," because their interface\nis specified as-is in BIP22.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Missing arguments and 'null' should be treated the same: as default values. If there is no\ndefault value, both cases should fail in the same way. The easiest way to follow this\nguideline is to detect unspecified arguments with ",(0,r.kt)("inlineCode",{parentName:"p"},"params[x].isNull()")," instead of\n",(0,r.kt)("inlineCode",{parentName:"p"},"params.size() <= x"),". The former returns true if the argument is either null or missing,\nwhile the latter returns true if is missing, and false if it is null."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Avoids surprises when switching to name-based arguments. Missing name-based arguments\nare passed as 'null'."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Try not to overload methods on argument type. E.g. don't make ",(0,r.kt)("inlineCode",{parentName:"p"},"getblock(true)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},'getblock("hash")'),"\ndo different things."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Rationale"),": This is impossible to use with ",(0,r.kt)("inlineCode",{parentName:"p"},"sbit-cli"),", and can be surprising to users.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Exception"),": Some RPC calls can take both an ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),", most notably when a bool was switched\nto a multi-value, or due to other historical reasons. ",(0,r.kt)("strong",{parentName:"p"},"Always")," have false map to 0 and\ntrue to 1 in this case.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Don't forget to fill in the argument names correctly in the RPC command table."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": If not, the call can not be used with name-based arguments."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Set okSafeMode in the RPC command table to a sensible value: safe mode is when the\nblockchain is regarded to be in a confused state, and the client deems it unsafe to\ndo anything irreversible such as send. Anything that just queries should be permitted."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Troubleshooting a node in safe mode is difficult if half the\nRPCs don't work."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add every non-string RPC argument ",(0,r.kt)("inlineCode",{parentName:"p"},"(method, idx, name)")," to the table ",(0,r.kt)("inlineCode",{parentName:"p"},"vRPCConvertParams")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"rpc/client.cpp"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"sbit-cli")," and the GUI debug console use this table to determine how to\nconvert a plaintext command line to JSON. If the types don't match, the method can be unusable\nfrom there."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A RPC method must either be a wallet method or a non-wallet method. Do not\nintroduce new methods that differ in behavior based on the presence of a wallet."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": As well as complicating the implementation and interfering\nwith the introduction of multi-wallet, wallet and non-wallet code should be\nseparated to avoid introducing circular dependencies between code units."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Try to make the RPC response a JSON object."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": If a RPC response is not a JSON object, then it is harder to avoid API breakage if\nnew data in the response is needed."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Wallet RPCs call BlockUntilSyncedToCurrentChain to maintain consistency with\n",(0,r.kt)("inlineCode",{parentName:"p"},"getblockchaininfo"),"'s state immediately prior to the call's execution. Wallet\nRPCs whose behavior does ",(0,r.kt)("em",{parentName:"p"},"not")," depend on the current chainstate may omit this\ncall."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": In previous versions of Bitcoin Core, the wallet was always\nin-sync with the chainstate (by virtue of them all being updated in the\nsame cs_main lock). In order to maintain the behavior that wallet RPCs\nreturn results as of at least the highest best-known block an RPC\nclient may be aware of prior to entering a wallet RPC call, we must block\nuntil the wallet is caught up to the chainstate as of the RPC call's entry.\nThis also makes the API much easier for RPC clients to reason about."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Be aware of RPC method aliases and generally avoid registering the same\ncallback function pointer for different RPCs."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Rationale"),": RPC methods registered with the same function pointer will be\nconsidered aliases and only the first method name will show up in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"help")," RPC command list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Exception"),": Using RPC method aliases may be appropriate in cases where a\nnew RPC is replacing a deprecated RPC, to avoid both RPCs confusingly\nshowing up in the command list.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("em",{parentName:"p"},"invalid")," bech32 addresses (e.g. in the constant array ",(0,r.kt)("inlineCode",{parentName:"p"},"EXAMPLE_ADDRESS"),") for\n",(0,r.kt)("inlineCode",{parentName:"p"},"RPCExamples")," help documentation."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": Prevent accidental transactions by users and encourage the use\nof bech32 addresses by default."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"UNIX_EPOCH_TIME")," constant when describing UNIX epoch time or\ntimestamps in the documentation."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Rationale"),": User-facing consistency.")))),(0,r.kt)("h2",{id:"internal-interface-guidelines"},"Internal interface guidelines"),(0,r.kt)("p",null,"Internal interfaces between parts of the codebase that are meant to be\nindependent (node, wallet, GUI), are defined in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/interfaces/"},(0,r.kt)("inlineCode",{parentName:"a"},"src/interfaces/")),". The main interface classes defined\nthere are ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/interfaces/chain.h"},(0,r.kt)("inlineCode",{parentName:"a"},"interfaces::Chain")),", used by wallet to\naccess the node's latest chain state,\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/interfaces/node.h"},(0,r.kt)("inlineCode",{parentName:"a"},"interfaces::Node")),", used by the GUI to control the\nnode, and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/interfaces/wallet.h"},(0,r.kt)("inlineCode",{parentName:"a"},"interfaces::Wallet")),", used by the GUI\nto control an individual wallet. There are also more specialized interface\ntypes like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/interfaces/handler.h"},(0,r.kt)("inlineCode",{parentName:"a"},"interfaces::Handler")),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/interfaces/chain.h"},(0,r.kt)("inlineCode",{parentName:"a"},"interfaces::ChainClient"))," passed to and from\nvarious interface methods."),(0,r.kt)("p",null,"Interface classes are written in a particular style so node, wallet, and GUI\ncode doesn't need to run in the same process, and so the class declarations\nwork more easily with tools and libraries supporting interprocess\ncommunication:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Interface classes should be abstract and have methods that are ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/abstract_class"},"pure\nvirtual"),". This\nallows multiple implementations to inherit from the same interface class,\nparticularly so one implementation can execute functionality in the local\nprocess, and other implementations can forward calls to remote processes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Interface method definitions should wrap existing functionality instead of\nimplementing new functionality. Any substantial new node or wallet\nfunctionality should be implemented in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/node/"},(0,r.kt)("inlineCode",{parentName:"a"},"src/node/"))," or\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/wallet/"},(0,r.kt)("inlineCode",{parentName:"a"},"src/wallet/"))," and just exposed in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/interfaces/"},(0,r.kt)("inlineCode",{parentName:"a"},"src/interfaces/"))," instead of being implemented there,\nso it can be more modular and accessible to unit tests.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Interface method parameter and return types should either be serializable or\nbe other interface classes. Interface methods shouldn't pass references to\nobjects that can't be serialized or accessed from another process."),(0,r.kt)("p",{parentName:"li"},"Examples:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Good: takes string argument and returns interface class pointer\nvirtual unique_ptr<interfaces::Wallet> loadWallet(std::string filename) = 0;\n\n// Bad: returns CWallet reference that can't be used from another process\nvirtual CWallet& loadWallet(std::string filename) = 0;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Good: accepts and returns primitive types\nvirtual bool findBlock(const uint256& hash, int& out_height, int64_t& out_time) = 0;\n\n// Bad: returns pointer to internal node in a linked list inaccessible to\n// other processes\nvirtual const CBlockIndex* findBlock(const uint256& hash) = 0;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Good: takes plain callback type and returns interface pointer\nusing TipChangedFn = std::function<void(int block_height, int64_t block_time)>;\nvirtual std::unique_ptr<interfaces::Handler> handleTipChanged(TipChangedFn fn) = 0;\n\n// Bad: returns boost connection specific to local process\nusing TipChangedFn = std::function<void(int block_height, int64_t block_time)>;\nvirtual boost::signals2::scoped_connection connectTipChanged(TipChangedFn fn) = 0;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For consistency and friendliness to code generation tools, interface method\ninput and inout parameters should be ordered first and output parameters\nshould come last."),(0,r.kt)("p",{parentName:"li"},"Example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Good: error output param is last\nvirtual bool broadcastTransaction(const CTransactionRef& tx, CAmount max_fee, std::string& error) = 0;\n\n// Bad: error output param is between input params\nvirtual bool broadcastTransaction(const CTransactionRef& tx, std::string& error, CAmount max_fee) = 0;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For friendliness to code generation tools, interface methods should not be\noverloaded:"),(0,r.kt)("p",{parentName:"li"},"Example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Good: method names are unique\nvirtual bool disconnectByAddress(const CNetAddr& net_addr) = 0;\nvirtual bool disconnectById(NodeId id) = 0;\n\n// Bad: methods are overloaded by type\nvirtual bool disconnect(const CNetAddr& net_addr) = 0;\nvirtual bool disconnect(NodeId id) = 0;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For consistency and friendliness to code generation tools, interface method\nnames should be ",(0,r.kt)("inlineCode",{parentName:"p"},"lowerCamelCase")," and standalone function names should be\n",(0,r.kt)("inlineCode",{parentName:"p"},"UpperCamelCase"),"."),(0,r.kt)("p",{parentName:"li"},"Examples:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Good: lowerCamelCase method name\nvirtual void blockConnected(const CBlock& block, int height) = 0;\n\n// Bad: uppercase class method\nvirtual void BlockConnected(const CBlock& block, int height) = 0;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Good: UpperCamelCase standalone function name\nstd::unique_ptr<Node> MakeNode(LocalInit& init);\n\n// Bad: lowercase standalone function\nstd::unique_ptr<Node> makeNode(LocalInit& init);\n")),(0,r.kt)("p",{parentName:"li"},"Note: This last convention isn't generally followed outside of\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/src/interfaces/"},(0,r.kt)("inlineCode",{parentName:"a"},"src/interfaces/")),", though it did come up for discussion\nbefore in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/pull/14635"},"#14635"),"."))))}u.isMDXComponent=!0}}]);