"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[1935],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return b}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),l=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(r),b=a,f=u["".concat(d,".").concat(b)]||u[b]||p[b]||s;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3389:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var n=r(7462),a=r(3366),s=(r(7294),r(3905)),i=["components"],o={title:"SBIT Address",description:"Represents a SBIT address. Addresses are the most popular way to make SBIT transactions.",keywords:["sbit","bitcoin","blockchain","ethereum","sbitcore","tools"],sidebar_position:2},d=void 0,l={unversionedId:"Tools/SBitcore-lib/address",id:"Tools/SBitcore-lib/address",title:"SBIT Address",description:"Represents a SBIT address. Addresses are the most popular way to make SBIT transactions.",source:"@site/docs/Tools/SBitcore-lib/address.md",sourceDirName:"Tools/SBitcore-lib",slug:"/Tools/SBitcore-lib/address",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/address",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"SBIT Address",description:"Represents a SBIT address. Addresses are the most popular way to make SBIT transactions.",keywords:["sbit","bitcoin","blockchain","ethereum","sbitcore","tools"],sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"SBitcore-Lib",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/"},next:{title:"SBIT Block",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/block"}},c={},p=[{value:"Instantiate an Address",id:"instantiate-an-address",level:2},{value:"Validating an Address",id:"validating-an-address",level:2}],u={toc:p};function b(e){var t=e.components,r=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Represents a SBIT address. Addresses are the most popular way to make SBIT transactions."),(0,s.kt)("h2",{id:"instantiate-an-address"},"Instantiate an Address"),(0,s.kt)("p",null,"To be able to receive SBITs an address is needed, but in order to spend them a private key is necessary. Please take a look at the ",(0,s.kt)("a",{parentName:"p",href:"privatekey"},(0,s.kt)("inlineCode",{parentName:"a"},"PrivateKey"))," docs for more information about exporting and saving a key.  "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"var privateKey = new PrivateKey();\nvar address = privateKey.toAddress();\n")),(0,s.kt)("p",null,"You can also instantiate an Address from a String, ",(0,s.kt)("a",{parentName:"p",href:"publickey"},"PublicKey"),", or ",(0,s.kt)("a",{parentName:"p",href:"hierarchical"},"HDPublicKey"),", in case you are not the owner of the private key."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// from a string\nvar address = Address.fromString('mwkXG8NnB2snbqWTcpNiK6qqGHm1LebHDc');\n\n// a default network address from a public key\nvar publicKey = PublicKey(privateKey);\nvar address = new Address(publicKey);\n// alternative interface\nvar address = Address.fromPublicKey(publicKey);\n\n// a testnet address from a public key\nvar publicKey = new PublicKey(privateKey);\nvar address = new Address(publicKey, Networks.testnet);\n")),(0,s.kt)("p",null,"A pay-to-script-hash multisignature Address can be instantiated from an array of ",(0,s.kt)("a",{parentName:"p",href:"publickey"},"PublicKeys"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// a 2-of-3 address from public keys\nvar p2shAddress = new Address([publicKey1, publicKey2, publicKey3], 2);\n")),(0,s.kt)("h2",{id:"validating-an-address"},"Validating an Address"),(0,s.kt)("p",null,"The main use that we expect you'll have for the ",(0,s.kt)("inlineCode",{parentName:"p"},"Address"),' class in SBitcore is validating that an address is a valid one, what type of address it is (you may be interested on knowing if the address is a simple "pay to public key hash" address or a "pay to script hash" address) and what network does the address belong to.'),(0,s.kt)("p",null,"The code to do these validations looks like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// validate an address\nif (Address.isValid(input){\n  ...\n}\n\n// validate that an input field is a valid testnet address\nif (Address.isValid(input, Networks.testnet){\n  ...\n}\n\n// validate that an input field is a valid livenet pubkeyhash\nif (Address.isValid(input, Networks.livenet, Address.PayToPublicKeyHash){\n  ...\n}\n\n// get the specific validation error that can occurred\nvar error = Address.getValidationError(input, Networks.testnet);\n  if (error) {\n    // handle the error\n  }\n}\n")))}b.isMDXComponent=!0}}]);