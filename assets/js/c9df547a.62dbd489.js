"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[6690],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),i=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=i(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=i(n),m=r,b=u["".concat(d,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(b,l(l({ref:t},s),{},{components:n})):a.createElement(b,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5960:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],c={title:"Sbit JS API Reference",description:"Sbit JS API Reference",keywords:["sbit","API","js","tools"]},d=void 0,i={unversionedId:"Tools/SBit-JS",id:"Tools/SBit-JS",title:"Sbit JS API Reference",description:"Sbit JS API Reference",source:"@site/docs/Tools/SBit-JS.md",sourceDirName:"Tools",slug:"/Tools/SBit-JS",permalink:"/sbit.dev/docs/Tools/SBit-JS",tags:[],version:"current",frontMatter:{title:"Sbit JS API Reference",description:"Sbit JS API Reference",keywords:["sbit","API","js","tools"]},sidebar:"tutorialSidebar",previous:{title:"SBIT Address Converter",permalink:"/sbit.dev/docs/Tools/Address-Converter"},next:{title:"Sbitd RPC JS",permalink:"/sbit.dev/docs/Tools/SBitd-RPC-JS"}},s={},p=[{value:"Running Sbit RPC",id:"running-sbit-rpc",level:2},{value:"SRC20 Example",id:"src20-example",level:2},{value:"Sbit",id:"sbit",level:2},{value:"contract",id:"contract",level:2},{value:"rawCall",id:"rawcall",level:2},{value:"constructor",id:"constructor",level:2},{value:"call",id:"call",level:2},{value:"send",id:"send",level:2},{value:"Method Overloading",id:"method-overloading",level:2},{value:"logs",id:"logs",level:2},{value:"onLogs",id:"onlogs",level:2},{value:"logEmitter",id:"logemitter",level:2},{value:"receipt",id:"receipt",level:2},{value:"rawCall",id:"rawcall-1",level:2},{value:"All RPC Methods",id:"all-rpc-methods",level:2},{value:"Example: getblockcount",id:"example-getblockcount",level:2},{value:"Example: getnewaddress",id:"example-getnewaddress",level:2},{value:"Example: fromhexaddress",id:"example-fromhexaddress",level:2},{value:"Example: gettransactionreceipt",id:"example-gettransactionreceipt",level:2},{value:"IContractInfo",id:"icontractinfo",level:2},{value:"IContractCallResult",id:"icontractcallresult",level:2},{value:"IContractSendRequestOptions",id:"icontractsendrequestoptions",level:2},{value:"IContractSendResult",id:"icontractsendresult",level:2},{value:"References",id:"references",level:3},{value:"IRPCGetTransactionResult",id:"irpcgettransactionresult",level:2},{value:"IContractSendReceipt",id:"icontractsendreceipt",level:2},{value:"References",id:"references-1",level:3},{value:"IRPCWaitForLogsRequest",id:"irpcwaitforlogsrequest",level:2},{value:"IContractEventLogs",id:"icontracteventlogs",level:2},{value:"IContractEventLog",id:"icontracteventlog",level:2},{value:"IDecodedSolidityEvent",id:"idecodedsolidityevent",level:2},{value:"IRPCGetTransactionReceiptBase",id:"irpcgettransactionreceiptbase",level:2},{value:"IContractsRepoData",id:"icontractsrepodata",level:2}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To install sbitjs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install sbitjs\n")),(0,o.kt)("p",null,"SbitJS is a JavaScript library for developing DApp on the Sbit blockchain. You can use this library to develop frontend UI that runs in the browser, as well as backend server scripts that run in NodeJS."),(0,o.kt)("p",null,"The main classes are:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Class"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"SbitRPCRaw"),(0,o.kt)("td",{parentName:"tr",align:null},"Direct access to ",(0,o.kt)("inlineCode",{parentName:"td"},"sbitd"),"'s blockchain RPC service, using JSONRPC 1.0 calling convention.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"SbitRPC"),(0,o.kt)("td",{parentName:"tr",align:null},"Wrapper for ",(0,o.kt)("inlineCode",{parentName:"td"},"SbitRPCRaw"),", to provide interface like JSONRPC 2.0.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Contract"),(0,o.kt)("td",{parentName:"tr",align:null},"An abstraction for interacting with smart contracts. Handles ",(0,o.kt)("a",{parentName:"td",href:"https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI"},"ABI encoding/decoding"),".")))),(0,o.kt)("p",null,"SbitJS is developed using ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript"),", and as such, comes with robust type definitions for all the APIs. We recommend using ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"VSCode")," to take advantage of language support, such as type hinting and autocompletion."),(0,o.kt)("p",null,"But you can also choose to use plain JavaScript and notepad if you prefer."),(0,o.kt)("p",null,"This document is the reference for SbitJS API, and its basic uses. For a tutorial-style introduction to SbitJS, see: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbitbook/blob/master/part2/src20-js.md"},"SbitBook - SRC20 With SbitJS"),"."),(0,o.kt)("h2",{id:"running-sbit-rpc"},"Running Sbit RPC"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To run sbitd in development mode.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it --rm \\\n  --name myapp \\\n  -v `pwd`:/dapp \\\n  -p 22002:22002 \\\n  sbitproject/sbitportal\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"To run sbitd for the test network (testnet):")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -it --rm \\\n  --name myapp \\\n  -e "SBIT_NETWORK=testnet" \\\n  -v `pwd`:/dapp \\\n  -p 22002:22002 \\\n  sbitproject/sbitportal\n')),(0,o.kt)("p",null,"SbitJS relies on ",(0,o.kt)("inlineCode",{parentName:"p"},"sbitd")," to provide the JSON-RPC service for accessing the SBIT blockchain."),(0,o.kt)("p",null,"For more details, see: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbitbook/blob/master/SUMMARY.md#part-1---running-sbit"},"SbitBook - Running SBIT"),"."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},'The default JSON-RPC credential is "sbit:test", running on port 22002'))),(0,o.kt)("h2",{id:"src20-example"},"SRC20 Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  Sbit,\n} from "sbitjs"\n\nconst repoData = require("./solar.json")\nconst sbit = new Sbit("http://sbit:test@localhost:22002", repoData)\n\nconst myToken = sbit.contract("zeppelin-solidity/contracts/token/CappedToken.sol")\n\nasync function transfer(fromAddr, toAddr, amount) {\n  const tx = await myToken.send("transfer", [toAddr, amount], {\n    senderAddress: fromAddr,\n  })\n\n  console.log("transfer tx:", tx.txid)\n  console.log(tx)\n\n  await tx.confirm(3)\n  console.log("transfer confirmed")\n}\n')),(0,o.kt)("p",null,"Assuming that ",(0,o.kt)("inlineCode",{parentName:"p"},"solar.json")," contains information about your deployed contracts,\nyou can use sbitjs to call the token contract's method to transfer tokens."),(0,o.kt)("h2",{id:"sbit"},"Sbit"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const repoData = require("./solar.json")\nconst sbit = new Sbit("http://sbit:test@localhost:22002", repoData)\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Sbit")," class is an instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"sbitjs")," API. It provides two main features:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Access to the ",(0,o.kt)("inlineCode",{parentName:"li"},"sbitd")," RPC service. It is a subclass of ",(0,o.kt)("a",{parentName:"li",href:"#sbitrpc"},"SbitRPC"),"."),(0,o.kt)("li",{parentName:"ul"},"A factory method to instantiate ",(0,o.kt)("a",{parentName:"li",href:"#contract-2"},"Contract")," instances, for interacting with deployed contracts.")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"url"),(0,o.kt)("td",{parentName:"tr",align:null},"string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"URL of the sbitd RPC service"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"repoData"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#icontractsrepodata"},"IContractsRepoData"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Information about Solidity contracts."),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"repoData")," contains the ABI definitions of all the deployed contracts and libraries, as well as deploy addresses. This information is used to instantiate ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," instances."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," instantiated with ",(0,o.kt)("inlineCode",{parentName:"p"},"Sbit"),"'s factory method is able to decode all event types found in ",(0,o.kt)("inlineCode",{parentName:"p"},"repoData"),". Whereas a ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," constructed manually is only able to decode event types defined in its scope, a limitation due to how the Solidity compiler output ABI definitions."),(0,o.kt)("p",null,"It is recommended that you use Sbit to instantiate ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," instances."),(0,o.kt)("h2",{id:"contract"},"contract"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const myToken = sbit.contract("zeppelin-solidity/contracts/token/CappedToken.sol")\n')),(0,o.kt)("p",null,"A factory method to instantiate a ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," instance using the ABI definitions and address found in ",(0,o.kt)("inlineCode",{parentName:"p"},"repoData"),". The Contract instance is configured with an event log decoder that can decode all known event types found in ",(0,o.kt)("inlineCode",{parentName:"p"},"repoData"),"."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"name"),(0,o.kt)("td",{parentName:"tr",align:null},"string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Used as key into the ",(0,o.kt)("inlineCode",{parentName:"td"},"repoData.contracts")," map to get contract information."),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"rawcall"},"rawCall"),(0,o.kt)("p",null,"Inherited from ",(0,o.kt)("a",{parentName:"p",href:"#rawcall-2"},"SbitRPC#rawcall")),(0,o.kt)("h1",{id:"contract-1"},"Contract"),(0,o.kt)("p",null,"A class abstraction for interacting with a Smart Contract."),(0,o.kt)("p",null,"This is a more convenient API than using ",(0,o.kt)("inlineCode",{parentName:"p"},"SbitRPC")," to directly call the RPC's ",(0,o.kt)("inlineCode",{parentName:"p"},"sendcontract")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"calltocontract")," methods. It handles ABI encoding, to convert between JS and Solidity values."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"API for confirming transactions."),(0,o.kt)("li",{parentName:"ul"},"API for invoking contract's methods using ",(0,o.kt)("inlineCode",{parentName:"li"},"call")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"send")," ."),(0,o.kt)("li",{parentName:"ul"},"API for getting contract's log events.")),(0,o.kt)("h2",{id:"constructor"},"constructor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const rpc = new SbitRPC("http://sbit:test@localhost:22002")\n\nconst myToken = new Contract(rpc, repo.contracts[\n  "zeppelin-solidity/contracts/token/CappedToken.sol"\n])\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"rpc"),(0,o.kt)("td",{parentName:"tr",align:null},"SbitRPC"),(0,o.kt)("td",{parentName:"tr",align:null},"The RPC instance used to interact with the contract.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"info"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#icontractinfo"},"IContractInfo")),(0,o.kt)("td",{parentName:"tr",align:null},"Information for the deployed contract")))),(0,o.kt)("p",null,"It is recommended that you use ",(0,o.kt)("a",{parentName:"p",href:"#contract"},"Sbit#contract")," instead of this constructor."),(0,o.kt)("h2",{id:"call"},"call"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'async function totalSupply() {\n  const result = await myToken.call("totalSupply")\n\n  // supply is a BigNumber instance (see: bn.js)\n  const supply = result.outputs[0]\n\n  console.log("supply", supply.toNumber())\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example output:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{ address: 'a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3',\n  executionResult:\n   { gasUsed: 21689,\n     excepted: 'None',\n     newAddress: 'a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3',\n     output: '00000000000000000000000000000000000000000000000000000000000036b0',\n     codeDeposit: 0,\n     gasRefunded: 0,\n     depositSize: 0,\n     gasForDeposit: 0 },\n  transactionReceipt:\n   { stateRoot: '5a0d9cd5df18165c75755f4345ca81da94f9247c1c031171fd6e2ce1a368844c',\n     gasUsed: 21689,\n     bloom: '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000',\n     log: [] },\n  outputs: [ <BN: 36b0> ] }\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},'A simulated "mint" call:')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const result = await myToken.call("mint", ["dcd32b87270aeb980333213da2549c9907e09e94", 1000])\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Result:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n  "executionResult": {\n    "gasUsed": 39306,\n    "excepted": "None",\n    "newAddress": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n    "output": "0000000000000000000000000000000000000000000000000000000000000001",\n    "codeDeposit": 0,\n    "gasRefunded": 0,\n    "depositSize": 0,\n    "gasForDeposit": 0\n  },\n  "transactionReceipt": {\n    "stateRoot": "9922edb770bd700a212427d3bc0764a9fed953a987952b2619b8a78dac7498aa",\n    "gasUsed": 39306,\n    "bloom": "00000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000020000000000008000000000000000000000000000000000000000000000000020000000020000000000800000000000000400000000010000000000000000000000000000000000000000000000000000000000000000000000000000080000000080000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000200000000000000000020000000000000000000000000000000000000000000000000020000000000000000",\n    "log": [\n      {\n        "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n        "topics": [\n          "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",\n          "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n        ],\n        "data": "00000000000000000000000000000000000000000000000000000000000003e8"\n      },\n      {\n        "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n        "topics": [\n          "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",\n          "0000000000000000000000000000000000000000000000000000000000000000",\n          "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n        ],\n        "data": "00000000000000000000000000000000000000000000000000000000000003e8"\n      }\n    ]\n  },\n  "outputs": [\n    true\n  ],\n  "logs": [\n    {\n      "type": "Mint",\n      "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "amount": "3e8"\n    },\n    {\n      "type": "Transfer",\n      "from": "0000000000000000000000000000000000000000",\n      "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "value": "3e8"\n    }\n  ]\n}\n')),(0,o.kt)("p",null,'Executes contract method on your own local sbitd node as a "simulation" using ',(0,o.kt)("inlineCode",{parentName:"p"},"callcontract"),". It is free, and does not actually modify the blockchain."),(0,o.kt)("p",null,"This is free."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"method"),(0,o.kt)("td",{parentName:"tr",align:null},"string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Name of the contract method."),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"args"),(0,o.kt)("td",{parentName:"tr",align:null},"Array\\any")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Arguments for calling the method"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"opts"),(0,o.kt)("td",{parentName:"tr",align:null},"IContractCallRequestOptions")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"call options"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"@return"),(0,o.kt)("td",{parentName:"tr",align:null},"Promise\\<",(0,o.kt)("a",{parentName:"td",href:"#icontractcallresult"},"IContractCallResult"),">")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"call result, with ABI decoded outputs"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"send"},"send"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'async function mint(toAddr, amount) {\n  // Submit a `sendtocontract` transaction, invoking the `mint` method.\n  const tx = await myToken.send("mint", [toAddr, amount])\n\n  console.log("tx:", tx)\n\n  // Wait for 3 confirmations. The callback receives the\n  // updated transaction info for each additional confirmation.\n  //\n  // Both arguments are optional. `await tx.confirm()` would do.\n  const receipt = await tx.confirm(3, (updatedTx) => {\n    console.log("new confirmation", updatedTx.txid, updatedTx.confirmations)\n  })\n  console.log("tx receipt:", JSON.stringify(receipt, null, 2))\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example output:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"mint tx: 858347704258506012f538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9\n{ amount: 0,\n  fee: -0.081064,\n  confirmations: 0,\n  trusted: true,\n  txid: '858347704258506012f538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9',\n  walletconflicts: [],\n  time: 1515475961,\n  timereceived: 1515475961,\n  'bip125-replaceable': 'no',\n  details:\n   [ { account: '',\n       category: 'send',\n       amount: 0,\n       vout: 0,\n       fee: -0.081064,\n       abandoned: false } ],\n  hex: '0200000001006a977de70014fdc2546ed19a531326086c6c9631cb1c5352db5f09e147736b0100000049483045022100b4ca32770a9f42679c6d20b7ddb5feb160303fceafc2db0fedba18a22f0b643602203c2568eb689fd324e76a12f367552fe4cce36b29f8174738209f881959aadbab01feffffff02000000000000000063010403400d0301284440c10f19000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94000000\n00000000000000000000000000000000000000000000000000000003e814a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3c2601e72902e0000001976a914dcd32b87270aeb980333213da2549c9907e09e9488ac212e0000',\n  method: 'mint',\n  confirm: [Function: confirm] }\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The callback would print 3 times, for each confirmation:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"new confirmation 858347704258506012f538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9 1\nnew confirmation 858347704258506012f538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9 2\nnew confirmation 858347704258506012f538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9 3\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The returned transaction receipt after confirmation:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'\n{\n  "blockHash": "3b53ad132c26f9c30e5be9f664573428dad8b52e167becea4428d6903cb32740",\n  "blockNumber": 13917,\n  "transactionHash": "79338589bb75e1865be889142890a4e25d3b9dbd454ce3f3c2614587c85e2ed3",\n  "transactionIndex": 1,\n  "from": "dcd32b87270aeb980333213da2549c9907e09e94",\n  "to": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n  "cumulativeGasUsed": 39306,\n  "gasUsed": 39306,\n  "contractAddress": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n  "logs": [\n    {\n      "type": "Mint",\n      "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "amount": "7d0"\n    },\n    {\n      "type": "Transfer",\n      "from": "0000000000000000000000000000000000000000",\n      "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "value": "7d0"\n    }\n  ],\n  "rawlogs": [\n    {\n      "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n      "topics": [\n        "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",\n        "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n      ],\n      "data": "00000000000000000000000000000000000000000000000000000000000007d0"\n    },\n    {\n      "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n      "topics": [\n        "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",\n        "0000000000000000000000000000000000000000000000000000000000000000",\n        "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n      ],\n      "data": "00000000000000000000000000000000000000000000000000000000000007d0"\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"Creates a transaction that executes contract method globally on the network, changing the blockchain."),(0,o.kt)("p",null,"This costs gas."),(0,o.kt)("p",null,"There are two asynchronous steps to a transaction:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You submit the the transaction to the network."),(0,o.kt)("li",{parentName:"ol"},"Once submitted, wait for a required number of confirmations.")),(0,o.kt)("p",null,"After successful confirmation, the transaction receipt (",(0,o.kt)("a",{parentName:"p",href:"#icontractsendreceipt"},"IContractSendReceipt"),") with ABI decoded event logs is returned."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"method"),(0,o.kt)("td",{parentName:"tr",align:null},"string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Name of the contract method."),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"args"),(0,o.kt)("td",{parentName:"tr",align:null},"Array\\any")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Arguments for calling the method"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"opts"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#icontractsendrequestoptions"},"IContractSendRequestOptions"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("em",{parentName:"td"},"optional")," send options"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"@return"),(0,o.kt)("td",{parentName:"tr",align:null},"Promise\\<",(0,o.kt)("a",{parentName:"td",href:"#icontractsendresult"},"IContractSendResult"),">")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"call result, with ABI decoded outputs"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"method-overloading"},"Method Overloading"),(0,o.kt)("p",null,"If there is no ambiguity, use the method name to call/send a method. If the same method name has multiple definitions, use the method signature to call/send a method."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The name foo may have multiple method definitions:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function foo();\nfunction foo(int256 _a);\nfunction foo(uint256 _a, uint256 _b);\nfunction foo(int256 _a, int256 _b);\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"foo")," methods with arity 0 and arity 1 have no ambiguity. Can call directly.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'contract.call("foo")\ncontract.call("foo", [1])\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"foo")," methods with arity 2 are ambiguous, must call with full method signature:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'contract.call("foo(uint256,uint256)", [1, 2])\ncontract.call("foo(int256,int256)", [1, 2])\n')),(0,o.kt)("h2",{id:"logs"},"logs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'async function getLogs(fromBlock=0, toBlock="latest") {\n  const logs = await myToken.logs({\n    fromBlock,\n    toBlock,\n    minconf: 1,\n  })\n\n  console.log(JSON.stringify(logs, null, 2))\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example Output")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "entries": [\n    {\n      "blockHash": "369c6ded05c27ae7efc97964cce083b0ea9b8b950e67c51e52cb1bf898b9c415",\n      "blockNumber": 12184,\n      "transactionHash": "d1638a53f38fd68c5763e2eef9d86b9fc6ee7ea3f018dae7b1e385b4a9a78bc7",\n      "transactionIndex": 2,\n      "from": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "to": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n      "cumulativeGasUsed": 39306,\n      "gasUsed": 39306,\n      "contractAddress": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n      "topics": [\n        "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",\n        "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n      ],\n      "data": "00000000000000000000000000000000000000000000000000000000000003e8",\n      "event": {\n        "type": "Mint",\n        "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n        "amount": "3e8"\n      }\n    },\n    {\n      "blockHash": "369c6ded05c27ae7efc97964cce083b0ea9b8b950e67c51e52cb1bf898b9c415",\n      "blockNumber": 12184,\n      "transactionHash": "d1638a53f38fd68c5763e2eef9d86b9fc6ee7ea3f018dae7b1e385b4a9a78bc7",\n      "transactionIndex": 2,\n      "from": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "to": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n      "cumulativeGasUsed": 39306,\n      "gasUsed": 39306,\n      "contractAddress": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n      "topics": [\n        "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",\n        "0000000000000000000000000000000000000000000000000000000000000000",\n        "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n      ],\n      "data": "00000000000000000000000000000000000000000000000000000000000003e8",\n      "event": {\n        "type": "Transfer",\n        "from": "0000000000000000000000000000000000000000",\n        "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n        "value": "3e8"\n      }\n    }\n  ],\n  "count": 2,\n  "nextblock": 12185\n}\n')),(0,o.kt)("p",null,"Get ",(0,o.kt)("a",{parentName:"p",href:"http://solidity.readthedocs.io/en/develop/abi-spec.html#events"},"Solidity event logs")," generated by the contract."),(0,o.kt)("p",null,"The options can limit events log query to a block number range by specifying ",(0,o.kt)("inlineCode",{parentName:"p"},"fromBlock")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"toBlock"),". For example, you could query for event logs between block 1000 to 1500."),(0,o.kt)("p",null,"Moreover, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"minconf")," to specify the minimum number of confirmations before an event log would be returned in the result."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"opts"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#irpcwaitforlogsrequest"},"IRPCWaitForLogsRequest"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Event logs query parameters"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"@return"),(0,o.kt)("td",{parentName:"tr",align:null},"Promise\\<",(0,o.kt)("a",{parentName:"td",href:"#icontracteventlogs"},"IContractEventLogs"),">")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Log query result, with ABI decoded outputs"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"onlogs"},"onLogs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"myToken.onLog((entry) => {\n    console.log(entry)\n}, { minconf: 1 })\n")),(0,o.kt)("p",null,"Subscribe to contract's new events. The callback is invoked each time a new event is received. By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"onLog")," start listening for logs from the tip of the blockchain. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"fromBlock")," to also receive older events."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"callback"),(0,o.kt)("td",{parentName:"tr",align:null},"(entry: ",(0,o.kt)("a",{parentName:"td",href:"#icontracteventlog"},"IContractEventLog"),") => void")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"opts"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#irpcwaitforlogsrequest"},"IRPCWaitForLogsRequest"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Event logs query parameters"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"logemitter"},"logEmitter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'this.emitter = myToken.logEmitter({ minconf: 1 })\n\nthis.emitter.on("Mint", (event) => {\n  // ...\n})\n\nthis.emitter.on("Transfer", (event) => {\n  // ...\n})\n\nthis.emitter.on("?", (event) => {\n  // all un-decodeable events\n})\n')),(0,o.kt)("p",null,"Subscribe to contract's new events, using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/primus/eventemitter3"},"EventsEmitter")," interface. The events emitted are instances of ",(0,o.kt)("a",{parentName:"p",href:"#icontracteventlog"},"IContractEventLog")),(0,o.kt)("p",null,"The Solidity events names are used as the emitted event names."),(0,o.kt)("p",null,'Events that lack ABI definitions (thus cannot be parsed) are emitted as "?".'),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"opts"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#irpcwaitforlogsrequest"},"IRPCWaitForLogsRequest"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Event logs query parameters"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"receipt"},"receipt"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const txid = "62fecfd27d71ddb260ac48c73c8f0f87e96d0b3a598ed2c2251caa4e6f9a9d97"\nconst receipt = await srcToken.receipt(txid)\nconsole.log(JSON.stringify(receipt, null, 2))\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example output")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "blockHash": "af37cb8d9905521542243005fadc9f18c1498c9823e35fa277ea1c37174c289a",\n  "blockNumber": 83981,\n  "transactionHash": "62fecfd27d71ddb260ac48c73c8f0f87e96d0b3a598ed2c2251caa4e6f9a9d97",\n  "transactionIndex": 28,\n  "from": "57142e3bcf000f28890b5d979afc7ea90204e1de",\n  "to": "49665919e437a4bedb92faa45ed33ebb5a33ee63",\n  "cumulativeGasUsed": 37029,\n  "gasUsed": 37029,\n  "contractAddress": "49665919e437a4bedb92faa45ed33ebb5a33ee63",\n  "logs": [\n    {\n      "type": "Transfer",\n      "from": "57142e3bcf000f28890b5d979afc7ea90204e1de",\n      "to": "c0ed80283c53c300c31c2bda6eca841e53cb6a21",\n      "value": "1ba5add5700"\n    }\n  ],\n  "rawlogs": [\n    {\n      "address": "49665919e437a4bedb92faa45ed33ebb5a33ee63",\n      "topics": [\n        "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",\n        "00000000000000000000000057142e3bcf000f28890b5d979afc7ea90204e1de",\n        "000000000000000000000000c0ed80283c53c300c31c2bda6eca841e53cb6a21"\n      ],\n      "data": "000000000000000000000000000000000000000000000000000001ba5add5700"\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"Get the receipt for a transaction that had been accepted by the network. If the transaction had not been confirmed, null is returned."),(0,o.kt)("p",null,"The event logs for that transaction are ABI-encoded."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"txid"),(0,o.kt)("td",{parentName:"tr",align:null},"string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Transaction ID"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"@return"),(0,o.kt)("td",{parentName:"tr",align:null},"Promise\\<",(0,o.kt)("a",{parentName:"td",href:"#icontractsendreceipt"},"IContractSendReceipt"),">")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Transaction receipt, with event logs."),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h1",{id:"sbitrpc"},"SbitRPC"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const rpc = new SbitRPC('http://sbit:test@localhost:22002');\n")),(0,o.kt)("p",null,"This is a JSON-RPC client for direct access to the ",(0,o.kt)("inlineCode",{parentName:"p"},"sbitd")," RPC API. It does not handle any ABI-encoding or decoding for you."),(0,o.kt)("p",null,"You may included the RPC user & password in the URL if required. In the sample, the user is ",(0,o.kt)("inlineCode",{parentName:"p"},"sbit")," and the password is ",(0,o.kt)("inlineCode",{parentName:"p"},"test"),"."),(0,o.kt)("p",null,"Note: The ",(0,o.kt)("inlineCode",{parentName:"p"},"SbitRPC")," class has a few undocumented public methods used internally by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," abstraction. Consider anything undocumented unsupported that could change in the future. Right now ",(0,o.kt)("inlineCode",{parentName:"p"},"rawCall")," is the only public API."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"url"),(0,o.kt)("td",{parentName:"tr",align:null},"string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"URL of the sbitd RPC service"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"rawcall-1"},"rawCall"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Call the ",(0,o.kt)("inlineCode",{parentName:"p"},"getinfo")," RPC method to get basic information about the Sbit blockchain:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const info = await rpc.rawCall("getinfo")\nconsole.log(info)\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Output of ",(0,o.kt)("inlineCode",{parentName:"p"},"getinfo"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{ version: 141300,\n  protocolversion: 70016,\n  walletversion: 130000,\n  balance: 0,\n  stake: 0,\n  blocks: 85685,\n  timeoffset: 0,\n  connections: 8,\n  proxy: '',\n  difficulty:\n   { 'proof-of-work': 0.0000152587890625,\n     'proof-of-stake': 5207642.8878753 },\n  testnet: false,\n  moneysupply: 100322740,\n  keypoololdest: 1513325658,\n  keypoolsize: 100,\n  paytxfee: 0,\n  relayfee: 0.004,\n  errors: '' }\n")),(0,o.kt)("p",null,"Makes a JSON-RPC 1.0 method call, and return the result. This method throws an error if the JSON API returns a non-200 HTTP result."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"try...catch")," to handle error:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'async function main() {\n  try {\n    const result = await rpc.rawCall("unknown-method-hohoho")\n  } catch (err) {\n    console.log("err", err)\n  }\n}\n')),(0,o.kt)("h2",{id:"all-rpc-methods"},"All RPC Methods"),(0,o.kt)("p",null,"All RPC methods supported by sbitd."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'== Blockchain ==\ncallcontract "address" "data" ( address )\ngetaccountinfo "address"\ngetbestblockhash\ngetblock "blockhash" ( verbose )\ngetblockchaininfo\ngetblockcount\ngetblockhash height\ngetblockheader "hash" ( verbose )\ngetchaintips\ngetdifficulty\ngetmempoolancestors txid (verbose)\ngetmempooldescendants txid (verbose)\ngetmempoolentry txid\ngetmempoolinfo\ngetrawmempool ( verbose )\ngetstorage "address"\ngettransactionreceipt "hash"\ngettxout "txid" n ( include_mempool )\ngettxoutproof ["txid",...] ( blockhash )\ngettxoutsetinfo\nlistcontracts (start maxDisplay)\npreciousblock "blockhash"\npruneblockchain\nsearchlogs <fromBlock> <toBlock> (address) (topics)\nverifychain ( checklevel nblocks )\nverifytxoutproof "proof"\nwaitforlogs (fromBlock) (toBlock) (filter) (minconf)\n\n== Control ==\ngetinfo\ngetmemoryinfo\nhelp ( "command" )\nstop\n\n== Generating ==\ngenerate nblocks ( maxtries )\ngeneratetoaddress nblocks address (maxtries)\n\n== Mining ==\ngetblocktemplate ( TemplateRequest )\ngetmininginfo\ngetnetworkhashps ( nblocks height )\ngetstakinginfo\ngetsubsidy [nTarget]\nprioritisetransaction <txid> <priority delta> <fee delta>\nsubmitblock "hexdata" ( "jsonparametersobject" )\n\n== Network ==\naddnode "node" "add|remove|onetry"\nclearbanned\ndisconnectnode "node"\ngetaddednodeinfo ( "node" )\ngetconnectioncount\ngetnettotals\ngetnetworkinfo\ngetpeerinfo\nlistbanned\nping\nsetban "subnet" "add|remove" (bantime) (absolute)\nsetnetworkactive true|false\n\n== Rawtransactions ==\ncreaterawtransaction [{"txid":"id","vout":n},...] {"address":amount,"data":"hex",...} ( locktime )\ndecoderawtransaction "hexstring"\ndecodescript "hexstring"\nfromhexaddress "hexaddress"\nfundrawtransaction "hexstring" ( options )\ngethexaddress "address"\ngetrawtransaction "txid" ( verbose )\nsendrawtransaction "hexstring" ( allowhighfees )\nsignrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )\n\n== Util ==\ncreatemultisig nrequired ["key",...]\nestimatefee nblocks\nestimatepriority nblocks\nestimatesmartfee nblocks\nestimatesmartpriority nblocks\nsignmessagewithprivkey "privkey" "message"\nvalidateaddress "address"\nverifymessage "address" "signature" "message"\n\n== Wallet ==\nabandontransaction "txid"\naddmultisigaddress nrequired ["key",...] ( "account" )\naddwitnessaddress "address"\nbackupwallet "destination"\nbumpfee "txid" ( options )\ncreatecontract "bytecode" (gaslimit gasprice "senderaddress" broadcast)\ndumpprivkey "address"\ndumpwallet "filename"\nencryptwallet "passphrase"\ngetaccount "address"\ngetaccountaddress "account"\ngetaddressesbyaccount "account"\ngetbalance ( "account" minconf include_watchonly )\ngetnewaddress ( "account" )\ngetrawchangeaddress\ngetreceivedbyaccount "account" ( minconf )\ngetreceivedbyaddress "address" ( minconf )\ngettransaction "txid" ( include_watchonly ) (waitconf)\ngetunconfirmedbalance\ngetwalletinfo\nimportaddress "address" ( "label" rescan p2sh )\nimportmulti "requests" "options"\nimportprivkey "sbit" ( "label" ) ( rescan )\nimportprunedfunds\nimportpubkey "pubkey" ( "label" rescan )\nimportwallet "filename"\nkeypoolrefill ( newsize )\nlistaccounts ( minconf include_watchonly)\nlistaddressgroupings\nlistlockunspent\nlistreceivedbyaccount ( minconf include_empty include_watchonly)\nlistreceivedbyaddress ( minconf include_empty include_watchonly)\nlistsinceblock ( "blockhash" target_confirmations include_watchonly)\nlisttransactions ( "account" count skip include_watchonly)\nlistunspent ( minconf maxconf  ["addresses",...] [include_unsafe] )\nlockunspent unlock ([{"txid":"txid","vout":n},...])\nmove "fromaccount" "toaccount" amount ( minconf "comment" )\nremoveprunedfunds "txid"\nreservebalance [<reserve> [amount]]\nsendfrom "fromaccount" "toaddress" amount ( minconf "comment" "comment_to" )\nsendmany "fromaccount" {"address":amount,...} ( minconf "comment" ["address",...] )\nsendmanywithdupes "fromaccount" {"address":amount,...} ( minconf "comment" ["address",...] )\nsendtoaddress "address" amount ( "comment" "comment_to" subtractfeefromamount )\nsendtocontract "contractaddress" "data" (amount gaslimit gasprice senderaddress broadcast)\nsetaccount "address" "account"\nsettxfee amount\nsignmessage "address" "message"\n')),(0,o.kt)("h2",{id:"example-getblockcount"},"Example: getblockcount"),(0,o.kt)("p",null,"Returns the number of blocks in the longest blockchain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const result = await rpc.rawCall("getblockcount")\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Result")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"85687\n")),(0,o.kt)("h2",{id:"example-getnewaddress"},"Example: getnewaddress"),(0,o.kt)("p",null,"Returns a new Sbit address for receiving payments. This might be useful for exchanges that need to generate deposit addresses for users."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const result = await rpc.rawCall("getnewaddress")\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Result")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"QSnrDTj4UNcRwKdhY8sUZEd74VzwqeAddW\n")),(0,o.kt)("h2",{id:"example-fromhexaddress"},"Example: fromhexaddress"),(0,o.kt)("p",null,"Converts a base58 pubkeyhash address to a hex address for use in smart contracts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const result = await rpc.rawCall("gethexaddress", ["QSnrDTj4UNcRwKdhY8sUZEd74VzwqeAddW"])\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Result")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"43debdac95a0eaa4ff92d6b873944a4d92beae59\n")),(0,o.kt)("h2",{id:"example-gettransactionreceipt"},"Example: gettransactionreceipt"),(0,o.kt)("p",null,"Get the receipt of a confirmed transaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const txid = "62fecfd27d71ddb260ac48c73c8f0f87e96d0b3a598ed2c2251caa4e6f9a9d97"\nconst result = await rpc.rawCall("gettransactionreceipt", [txid])\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Result")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'[\n  {\n    "blockHash": "af37cb8d9905521542243005fadc9f18c1498c9823e35fa277ea1c37174c289a",\n    "blockNumber": 83981,\n    "transactionHash": "62fecfd27d71ddb260ac48c73c8f0f87e96d0b3a598ed2c2251caa4e6f9a9d97",\n    "transactionIndex": 28,\n    "from": "57142e3bcf000f28890b5d979afc7ea90204e1de",\n    "to": "49665919e437a4bedb92faa45ed33ebb5a33ee63",\n    "cumulativeGasUsed": 37029,\n    "gasUsed": 37029,\n    "contractAddress": "49665919e437a4bedb92faa45ed33ebb5a33ee63",\n    "log": [\n      {\n        "address": "49665919e437a4bedb92faa45ed33ebb5a33ee63",\n        "topics": [\n          "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",\n          "00000000000000000000000057142e3bcf000f28890b5d979afc7ea90204e1de",\n          "000000000000000000000000c0ed80283c53c300c31c2bda6eca841e53cb6a21"\n        ],\n        "data": "000000000000000000000000000000000000000000000000000001ba5add5700"\n      }\n    ]\n  }\n]\n')),(0,o.kt)("h1",{id:"types-lexicon"},"Types Lexicon"),(0,o.kt)("h2",{id:"icontractinfo"},"IContractInfo"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface IContractInfo {\n  /**\n   * Contract's ABI definitions, produced by solc.\n   */\n  abi: IABIMethod[]\n\n  /**\n   * Contract's address\n   */\n  address: string\n\n  /**\n   * The owner address of the contract\n   */\n  sender?: string\n}\n")),(0,o.kt)("p",null,"The minimal deployment information necessary to interact with a deployed contract."),(0,o.kt)("h2",{id:"icontractcallresult"},"IContractCallResult"),(0,o.kt)("p",null,"The result of calling a contract method, with decoded outputs and logs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface IContractCallResult extends IRPCCallContractResult {\n  /**\n   * ABI-decoded outputs\n   */\n  outputs: any[]\n\n  /**\n   * ABI-decoded logs\n   */\n  logs: Array<IDecodedSolidityEvent | null>\n}\n\nexport interface IRPCCallContractResult {\n  address: string\n  executionResult: IExecutionResult,\n  transactionReceipt: {\n    stateRoot: string,\n    gasUsed: string,\n    bloom: string,\n    log: any[],\n  }\n}\n\nexport interface IExecutionResult {\n  gasUsed: number,\n  excepted: string,\n  newAddress: string,\n  output: string,\n  codeDeposit: number,\n  gasRefunded: number,\n  depositSize: number,\n  gasForDeposit: number,\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n  "executionResult": {\n    "gasUsed": 39306,\n    "excepted": "None",\n    "newAddress": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n    "output": "0000000000000000000000000000000000000000000000000000000000000001",\n    "codeDeposit": 0,\n    "gasRefunded": 0,\n    "depositSize": 0,\n    "gasForDeposit": 0\n  },\n  "transactionReceipt": {\n    "stateRoot": "9922edb770bd700a212427d3bc0764a9fed953a987952b2619b8a78dac7498aa",\n    "gasUsed": 39306,\n    "bloom": "00000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000020000000000008000000000000000000000000000000000000000000000000020000000020000000000800000000000000400000000010000000000000000000000000000000000000000000000000000000000000000000000000000080000000080000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000200000000000000000020000000000000000000000000000000000000000000000000020000000000000000",\n    "log": [\n      {\n        "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n        "topics": [\n          "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",\n          "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n        ],\n        "data": "00000000000000000000000000000000000000000000000000000000000003e8"\n      },\n      {\n        "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n        "topics": [\n          "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",\n          "0000000000000000000000000000000000000000000000000000000000000000",\n          "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n        ],\n        "data": "00000000000000000000000000000000000000000000000000000000000003e8"\n      }\n    ]\n  },\n  "outputs": [\n    true\n  ],\n  "logs": [\n    {\n      "type": "Mint",\n      "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "amount": "3e8"\n    },\n    {\n      "type": "Transfer",\n      "from": "0000000000000000000000000000000000000000",\n      "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "value": "3e8"\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"The return type of ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract#call"),"."),(0,o.kt)("h2",{id:"icontractsendrequestoptions"},"IContractSendRequestOptions"),(0,o.kt)("p",null,"Options for ",(0,o.kt)("a",{parentName:"p",href:"#send"},"Contract#send")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Options for `send` to a contract method.\n */\nexport interface IContractSendRequestOptions {\n  /**\n   * The amount in SBIT to send. eg 0.1, default: 0\n   */\n  amount?: number | string\n\n  /**\n   * gasLimit, default: 200000, max: 40000000\n   */\n  gasLimit?: number\n\n  /**\n   * Sbit price per gas unit, default: 0.00000001, min:0.00000001\n   */\n  gasPrice?: number | string\n\n  /**\n   * The sbit address that will be used as sender.\n   */\n  senderAddress?: string\n}\n")),(0,o.kt)("h2",{id:"icontractsendresult"},"IContractSendResult"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const tx = await contract.send(method, args)\nawait tx.confirm(3, (updatedTx, receipt) => {\n  /// ...\n})\n")),(0,o.kt)("p",null,"Return value of ",(0,o.kt)("a",{parentName:"p",href:"#send"},"Contract#send"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"confirm")," method is used to wait for transaction confirmations."),(0,o.kt)("p",null,"The arguments for ",(0,o.kt)("inlineCode",{parentName:"p"},"confirm"),":"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"n"),(0,o.kt)("td",{parentName:"tr",align:null},"number")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("em",{parentName:"td"},"optional")," Number of confirmations to wait for."),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"callback"),(0,o.kt)("td",{parentName:"tr",align:null},"IContractSendConfirmationHandler")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("em",{parentName:"td"},"optional")," The callback function invoked for each additional confirmation"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("p",null,"The callback values are:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Arg"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"updatedTx"),(0,o.kt)("td",{parentName:"tr",align:null},"IRPCGetTransactionResult")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Basic information about a transaction submitted to the network."),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"receipt"),(0,o.kt)("td",{parentName:"tr",align:null},"IContractSendReceipt")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Additional information about a confirmed transaction."),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h3",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#irpcgettransactionresult"},"IRPCGetTransactionResult")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#icontractsendreceipt"},"IContractSendReceipt"))),(0,o.kt)("h2",{id:"irpcgettransactionresult"},"IRPCGetTransactionResult"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export interface IRPCGetTransactionResult {\n  amount: number,\n  fee: number,\n  confirmations: number,\n  blockhash: string,\n  blockindex: number,\n  blocktime: number,\n  txid: string,\n  walletconflicts: any[],\n  time: number,\n  timereceived: number,\n  "bip125-replaceable": "no" | "yes" | "unknown",\n  details: any[]\n  hex: string,\n}\n')),(0,o.kt)("p",null,"Basic information about a transaction submitted to the network."),(0,o.kt)("h2",{id:"icontractsendreceipt"},"IContractSendReceipt"),(0,o.kt)("p",null,"The transaction receipt for ",(0,o.kt)("a",{parentName:"p",href:"#send"},"Contract#send"),", with the event logs decoded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface IContractSendReceipt extends IRPCGetTransactionReceiptBase {\n  /**\n   * logs decoded using ABI\n   */\n  logs: IDecodedLog[],\n\n  /**\n   * undecoded logs\n   */\n  rawlogs: ITransactionLog[],\n}\n\n/**\n * A decoded Solidity event log\n */\nexport interface IDecodedLog {\n  /**\n   * The event log's name\n   */\n  type: string\n\n  /**\n   * Arguments to event log as key-value map\n   */\n  [key: string]: any\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "blockHash": "3b53ad132c26f9c30e5be9f664573428dad8b52e167becea4428d6903cb32740",\n  "blockNumber": 13917,\n  "transactionHash": "79338589bb75e1865be889142890a4e25d3b9dbd454ce3f3c2614587c85e2ed3",\n  "transactionIndex": 1,\n  "from": "dcd32b87270aeb980333213da2549c9907e09e94",\n  "to": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n  "cumulativeGasUsed": 39306,\n  "gasUsed": 39306,\n  "contractAddress": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n  "logs": [\n    {\n      "type": "Mint",\n      "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "amount": "7d0"\n    },\n    {\n      "type": "Transfer",\n      "from": "0000000000000000000000000000000000000000",\n      "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n      "value": "7d0"\n    }\n  ],\n  "rawlogs": [\n    {\n      "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n      "topics": [\n        "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",\n        "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n      ],\n      "data": "00000000000000000000000000000000000000000000000000000000000007d0"\n    },\n    {\n      "address": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n      "topics": [\n        "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",\n        "0000000000000000000000000000000000000000000000000000000000000000",\n        "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n      ],\n      "data": "00000000000000000000000000000000000000000000000000000000000007d0"\n    }\n  ]\n}\n')),(0,o.kt)("h3",{id:"references-1"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#irpcgettransactionreceiptbase"},"IRPCGetTransactionReceiptBase"))),(0,o.kt)("h2",{id:"irpcwaitforlogsrequest"},"IRPCWaitForLogsRequest"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export interface IRPCWaitForLogsRequest {\n  /**\n   * The block number to start looking for logs.\n   */\n  fromBlock?: number | "latest",\n\n  /**\n   * The block number to stop looking for logs. If null, will wait indefinitely into the future.\n   */\n  toBlock?: number | "latest",\n\n  /**\n   * Filter conditions for logs. Addresses and topics are specified as array of hexadecimal strings\n   */\n  filter?: ILogFilter,\n\n  /**\n   * Minimal number of confirmations before a log is returned\n   */\n  minconf?: number,\n}\n')),(0,o.kt)("h2",{id:"icontracteventlogs"},"IContractEventLogs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Query result of a contract's event logs.\n */\nexport interface IContractEventLogs {\n  /**\n   * Event logs, ABI decoded.\n   */\n  entries: IContractEventLog[]\n\n  /**\n   * Number of event logs returned.\n   */\n  count: number\n\n  /**\n   * The block number to start query for new event logs.\n   */\n  nextblock: number\n}\n")),(0,o.kt)("p",null,"Query result of a contract's event logs."),(0,o.kt)("p",null,"To query for new logs that have not yet been seen, use ",(0,o.kt)("inlineCode",{parentName:"p"},"nextblock")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"startBlock")," when querying for event logs."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#icontracteventlog"},"IContractEventLog"))),(0,o.kt)("h2",{id:"icontracteventlog"},"IContractEventLog"),(0,o.kt)("p",null,"A decoded contract event log."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface IContractLogEntry extends ILogEntry {\n  /**\n   * Solidity event, ABI decoded. Null if no ABI definition is found.\n   */\n  event?: ISolidityEvent\n}\n\n/**\n * The raw log data returned by sbitd, not ABI decoded.\n */\nexport interface ILogEntry extends IRPCGetTransactionReceiptBase {\n  /**\n   * EVM log topics\n   */\n  topics: string[]\n\n  /**\n   * EVM log data, as hexadecimal string\n   */\n  data: string\n}\n\n/**\n * Transaction receipt returned by sbitd\n */\nexport interface IRPCGetTransactionReceiptBase {\n  blockHash: string\n  blockNumber: number\n\n  transactionHash: string\n  transactionIndex: number\n\n  from: string\n  to: string\n\n  cumulativeGasUsed: number\n  gasUsed: number\n\n  contractAddress: string\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "blockHash": "369c6ded05c27ae7efc97964cce083b0ea9b8b950e67c51e52cb1bf898b9c415",\n  "blockNumber": 12184,\n  "transactionHash": "d1638a53f38fd68c5763e2eef9d86b9fc6ee7ea3f018dae7b1e385b4a9a78bc7",\n  "transactionIndex": 2,\n  "from": "dcd32b87270aeb980333213da2549c9907e09e94",\n  "to": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n  "cumulativeGasUsed": 39306,\n  "gasUsed": 39306,\n  "contractAddress": "a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3",\n  "topics": [\n    "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",\n    "000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"\n  ],\n  "data": "00000000000000000000000000000000000000000000000000000000000003e8",\n  "event": {\n    "type": "Mint",\n    "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n    "amount": "3e8"\n  }\n}\n')),(0,o.kt)("h2",{id:"idecodedsolidityevent"},"IDecodedSolidityEvent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * A decoded Solidity event log\n */\nexport interface IDecodedSolidityEvent {\n  /**\n   * The event's name\n   */\n  type: string\n\n  /**\n   * Event parameters as a key-value map\n   */\n  [key: string]: any\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "type": "Transfer",\n  "from": "0000000000000000000000000000000000000000",\n  "to": "dcd32b87270aeb980333213da2549c9907e09e94",\n  "value": "3e8"\n}\n')),(0,o.kt)("p",null,"A decoded Solidity event log. The event parameters are stored a key-value map."),(0,o.kt)("h2",{id:"irpcgettransactionreceiptbase"},"IRPCGetTransactionReceiptBase"),(0,o.kt)("p",null,"Receipt for a transaction accepted by the network. It is returned by the ",(0,o.kt)("inlineCode",{parentName:"p"},"gettransactionreceipt")," RPC call."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface IRPCGetTransactionReceiptBase {\n  blockHash: string\n  blockNumber: number\n\n  transactionHash: string\n  transactionIndex: number\n\n  from: string\n  to: string\n\n  cumulativeGasUsed: number\n  gasUsed: number\n\n  contractAddress: string\n}\n")),(0,o.kt)("h2",{id:"icontractsrepodata"},"IContractsRepoData"),(0,o.kt)("p",null,"Information about contracts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface IContractsRepoData {\n  /**\n   * Information about deployed contracts\n   */\n  contracts: {\n    [key: string]: IContractInfo,\n  },\n\n  /**\n   * Information about deployed libraries\n   */\n  libraries: {\n    [key: string]: IContractInfo,\n  }\n\n  /**\n   * Information of contracts referenced by deployed contract/libraries, but not deployed\n   */\n  related: {\n    [key: string]: {\n      abi: IABIMethod[],\n    },\n  }\n}\n\n/**\n * The minimal deployment information necessary to interact with a\n * deployed contract.\n */\nexport interface IContractInfo {\n  /**\n   * Contract's ABI definitions, produced by solc.\n   */\n  abi: IABIMethod[]\n\n  /**\n   * Contract's address\n   */\n  address: string\n\n  /**\n   * The owner address of the contract\n   */\n  sender?: string\n}\n\nexport interface IABIMethod {\n  name: string,\n  type: string,\n  payable: boolean,\n  inputs: IABIInput[],\n  outputs: IABIOutput[],\n  constant: boolean,\n  anonymous: boolean,\n}\n")),(0,o.kt)("p",null,"This can be generated automatically using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/solar"},"solar")," deployment tool."))}m.isMDXComponent=!0}}]);