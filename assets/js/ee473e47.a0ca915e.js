"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[6884],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return b}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(r),b=o,f=u["".concat(l,".").concat(b)]||u[b]||p[b]||s;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var d=2;d<s;d++)a[d]=r[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6328:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return b},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var n=r(7462),o=r(3366),s=(r(7294),r(3905)),a=["components"],i={title:"SBIT Address Converter",description:"SBIT Address Converter",keywords:["sbit","hex","base58","golang","tools"]},l=void 0,d={unversionedId:"Tools/Address-Converter",id:"Tools/Address-Converter",title:"SBIT Address Converter",description:"SBIT Address Converter",source:"@site/docs/Tools/Address-Converter.md",sourceDirName:"Tools",slug:"/Tools/Address-Converter",permalink:"/sbit.dev/docs/Tools/Address-Converter",tags:[],version:"current",frontMatter:{title:"SBIT Address Converter",description:"SBIT Address Converter",keywords:["sbit","hex","base58","golang","tools"]},sidebar:"tutorialSidebar",previous:{title:"Transaction API",permalink:"/sbit.dev/docs/Tools/SBIT-API/transaction"},next:{title:"Sbit JS API Reference",permalink:"/sbit.dev/docs/Tools/SBit-JS"}},c={},p=[{value:"Demo",id:"demo",level:2},{value:"Help",id:"help",level:2}],u={toc:p};function b(e){var t=e.components,r=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The address in bytes is ",(0,s.kt)("inlineCode",{parentName:"p"},"ripemd160(sha256(pubkey))"),". This address could be encoded either with hex or base58."),(0,s.kt)("h2",{id:"demo"},"Demo"),(0,s.kt)("p",null,"Install"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"go get -u github.com/SBit-Project/sbitaddr\n")),(0,s.kt)("p",null,"Convert hex address to base58 address (test net):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sbitaddr --hex fe59cbc1704e89a698571413a81f0de9d8f00c69 --test\n")),(0,s.kt)("p",null,"Convert hex address to base58 address (main net):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sbitaddr --hex fe59cbc1704e89a698571413a81f0de9d8f00c69\n")),(0,s.kt)("p",null,"Convert base58 address to hex address:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sbitaddr --base58 sgkGMtMJbK921UZpwYt3bMhE9d7nNMyUcC\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sbitaddr --base58 SjnsK9sSa8QhJbvTRYEHXapT8M9JHhSLqY\n")),(0,s.kt)("h2",{id:"help"},"Help"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"usage: sbitaddr [<flags>]\n\nFlags:\n      --help           Show context-sensitive help (also try --help-long and --help-man).\n  -h, --hex=HEX        address to convert in hex\n  -b, --base58=BASE58  address to convert in hex\n  -t, --test           generate base58 address for testnet\n")))}b.isMDXComponent=!0}}]);