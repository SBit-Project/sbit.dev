"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[8732],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||r;return n?i.createElement(m,a(a({ref:t},c),{},{components:n})):i.createElement(m,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<r;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7028:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return h}});var i=n(7462),o=n(3366),r=(n(7294),n(3905)),a=["components"],s={title:"Contributing",sidebar_label:"Contributing"},l="Contributing to Sbit Core",u={unversionedId:"Help/contributing",id:"Help/contributing",title:"Contributing",description:"The SBit Core project operates an open contributor model where anyone is",source:"@site/docs/Help/contributing.md",sourceDirName:"Help",slug:"/Help/contributing",permalink:"/sbit.dev/docs/Help/contributing",tags:[],version:"current",frontMatter:{title:"Contributing",sidebar_label:"Contributing"},sidebar:"tutorialSidebar",previous:{title:"Code of Conduct",permalink:"/sbit.dev/docs/Help/CODE_OF_CONDUCT"}},c={},h=[{value:"Getting Started",id:"getting-started",level:2},{value:"Good First Issue Label",id:"good-first-issue-label",level:3},{value:"Communication Channels",id:"communication-channels",level:2},{value:"Contributor Workflow",id:"contributor-workflow",level:2},{value:"Committing Patches",id:"committing-patches",level:3},{value:"Creating the Pull Request",id:"creating-the-pull-request",level:3},{value:"Translation changes",id:"translation-changes",level:3},{value:"Work in Progress Changes and Requests for Comments",id:"work-in-progress-changes-and-requests-for-comments",level:3},{value:"Address Feedback",id:"address-feedback",level:3},{value:"Squashing Commits",id:"squashing-commits",level:3},{value:"Rebasing Changes",id:"rebasing-changes",level:3},{value:"Pull Request Philosophy",id:"pull-request-philosophy",level:2},{value:"Features",id:"features",level:3},{value:"Refactoring",id:"refactoring",level:3},{value:"&quot;Decision Making&quot; Process",id:"decision-making-process",level:2},{value:"Peer Review",id:"peer-review",level:3},{value:"Conceptual Review",id:"conceptual-review",level:4},{value:"Code Review",id:"code-review",level:4},{value:"Finding Reviewers",id:"finding-reviewers",level:3},{value:"Backporting",id:"backporting",level:2},{value:"Release Policy",id:"release-policy",level:2},{value:"Copyright",id:"copyright",level:2}],p={toc:h};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"contributing-to-sbit-core"},"Contributing to Sbit Core"),(0,r.kt)("p",null,"The SBit Core project operates an open contributor model where anyone is\nwelcome to contribute towards development in the form of peer review, testing\nand patches. This document explains the practical process and guidelines for\ncontributing."),(0,r.kt)("p",null,'First, in terms of structure, there is no particular concept of "SBit Core\ndevelopers" in the sense of privileged people. Open source often naturally\nrevolves around a meritocracy where contributors earn trust from the developer\ncommunity over time. Nevertheless, some hierarchy is necessary for practical\npurposes. As such, there are repository "maintainers" who are responsible for\nmerging pull requests, as well as a "lead maintainer" who is responsible for the\nrelease cycle as well as overall merging, moderation and appointment of\nmaintainers.'),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"New contributors are very welcome and needed."),(0,r.kt)("p",null,"Reviewing and testing is highly valued and the most effective way you can contribute\nas a new contributor. It also will teach you much more about the code and\nprocess than opening pull requests. Please refer to the ",(0,r.kt)("a",{parentName:"p",href:"#peer-review"},"peer review"),"\nsection below."),(0,r.kt)("p",null,"Before you start contributing, familiarize yourself with the SBit Core build\nsystem and tests. Refer to the documentation in the repository on how to build\nSBit Core and how to run the unit tests, functional tests, and fuzz tests."),(0,r.kt)("p",null,"There are many open issues of varying difficulty waiting to be fixed.\nIf you're looking for somewhere to start contributing, check out the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22"},"good first issue"),"\nlist or changes that are\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/issues?utf8=%E2%9C%93&q=label%3A%22Up+for+grabs%22"},"up for grabs"),".\nSome of them might no longer be applicable. So if you are interested, but\nunsure, you might want to leave a comment on the issue first."),(0,r.kt)("p",null,"You may also participate in the weekly\n",(0,r.kt)("a",{parentName:"p",href:"https://bitcoincore.reviews/"},"SBit Core PR Review Club")," meeting."),(0,r.kt)("h3",{id:"good-first-issue-label"},"Good First Issue Label"),(0,r.kt)("p",null,"The purpose of the ",(0,r.kt)("inlineCode",{parentName:"p"},"good first issue")," label is to highlight which issues are\nsuitable for a new contributor without a deep understanding of the codebase."),(0,r.kt)("p",null,"However, good first issues can be solved by anyone. If they remain unsolved\nfor a longer time, a frequent contributor might address them."),(0,r.kt)("p",null,"You do not need to request permission to start working on an issue. However,\nyou are encouraged to leave a comment if you are planning to work on it. This\nwill help other contributors monitor which issues are actively being addressed\nand is also an effective way to request assistance if and when you need it."),(0,r.kt)("h2",{id:"communication-channels"},"Communication Channels"),(0,r.kt)("p",null,"Most communication about SBit Core development happens on IRC, in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"#sbit-core-dev")," channel on Freenode. The easiest way to participate on IRC is\nwith the web client, ",(0,r.kt)("a",{parentName:"p",href:"https://webchat.freenode.net/"},"webchat.freenode.net"),". Chat\nhistory logs can be found\non ",(0,r.kt)("a",{parentName:"p",href:"http://www.erisian.com.au/sbit-core-dev/"},"http://www.erisian.com.au/sbit-core-dev/"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"http://gnusha.org/sbit-core-dev/"},"http://gnusha.org/sbit-core-dev/"),"."),(0,r.kt)("p",null,"Discussion about codebase improvements happens in GitHub issues and pull\nrequests."),(0,r.kt)("p",null,"The developer\n",(0,r.kt)("a",{parentName:"p",href:"https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"},"mailing list"),"\nshould be used to discuss complicated or controversial consensus or P2P protocol changes before working on\na patch set."),(0,r.kt)("h2",{id:"contributor-workflow"},"Contributor Workflow"),(0,r.kt)("p",null,'The codebase is maintained using the "contributor workflow" where everyone\nwithout exception contributes patch proposals using "pull requests" (PRs). This\nfacilitates social contribution, easy testing and peer review.'),(0,r.kt)("p",null,"To contribute a patch, the workflow is as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Fork repository (",(0,r.kt)("a",{parentName:"li",href:"https://help.github.com/en/articles/fork-a-repo"},"only for the first time"),")"),(0,r.kt)("li",{parentName:"ol"},"Create topic branch"),(0,r.kt)("li",{parentName:"ol"},"Commit patches")),(0,r.kt)("p",null,"For GUI-related issues or pull requests, the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sbit-core/gui"},"https://github.com/sbit-core/gui")," repository should be used.\nFor all other issues and pull requests, the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin"},"https://github.com/bitcoin/bitcoin")," node repository should be used."),(0,r.kt)("p",null,"The master branch for all monotree repositories is identical."),(0,r.kt)("p",null,"As a rule of thumb, everything that only modifies ",(0,r.kt)("inlineCode",{parentName:"p"},"src/qt")," is a GUI-only pull\nrequest. However:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For global refactoring or other transversal changes the node repository\nshould be used."),(0,r.kt)("li",{parentName:"ul"},"For GUI-related build system changes, the node repository should be used\nbecause the change needs review by the build systems reviewers."),(0,r.kt)("li",{parentName:"ul"},"Changes in ",(0,r.kt)("inlineCode",{parentName:"li"},"src/interfaces")," need to go to the node repository because they\nmight affect other components like the wallet.")),(0,r.kt)("p",null,"For large GUI changes that include build system and interface changes, it is\nrecommended to first open a pull request against the GUI repository. When there\nis agreement to proceed with the changes, a pull request with the build system\nand interfaces changes can be submitted to the node repository."),(0,r.kt)("p",null,"The project coding conventions in the ",(0,r.kt)("a",{parentName:"p",href:"../SBit-Core/Development/developer-notes"},"developer notes"),"\nmust be followed."),(0,r.kt)("h3",{id:"committing-patches"},"Committing Patches"),(0,r.kt)("p",null,"In general, ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention"},"commits should be atomic"),"\nand diffs should be easy to read. For this reason, do not mix any formatting\nfixes or code moves with actual code changes."),(0,r.kt)("p",null,"Make sure each individual commit is hygienic: that it builds successfully on its\nown without warnings, errors, regressions, or test failures."),(0,r.kt)("p",null,'Commit messages should be verbose by default consisting of a short subject line\n(50 chars max), a blank line and detailed explanatory text as separate\nparagraph(s), unless the title alone is self-explanatory (like "Corrected typo\nin init.cpp") in which case a single title line is sufficient. Commit messages should be\nhelpful to people reading your code in the future, so explain the reasoning for\nyour decisions. Further explanation ',(0,r.kt)("a",{parentName:"p",href:"https://chris.beams.io/posts/git-commit/"},"here"),"."),(0,r.kt)("p",null,"If a particular commit references another issue, please add the reference. For\nexample: ",(0,r.kt)("inlineCode",{parentName:"p"},"refs #1234")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"fixes #4321"),". Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fixes")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"closes")," keywords\nwill cause the corresponding issue to be closed when the pull request is merged."),(0,r.kt)("p",null,"Commit messages should never contain any ",(0,r.kt)("inlineCode",{parentName:"p"},"@"),' mentions (usernames prefixed with "@").'),(0,r.kt)("p",null,"Please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://git-scm.com/doc"},"Git manual")," for more information\nabout Git."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Push changes to your fork"),(0,r.kt)("li",{parentName:"ul"},"Create pull request")),(0,r.kt)("h3",{id:"creating-the-pull-request"},"Creating the Pull Request"),(0,r.kt)("p",null,"The title of the pull request should be prefixed by the component or area that\nthe pull request affects. Valid areas as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"consensus")," for changes to consensus critical code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"doc")," for changes to the documentation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"qt")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"gui")," for changes to bitcoin-qt"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"log")," for changes to log messages"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mining")," for changes to the mining code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"net")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"p2p")," for changes to the peer-to-peer network code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"refactor")," for structural changes that do not change behavior"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rpc"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"rest")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"zmq")," for changes to the RPC, REST or ZMQ APIs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"script")," for changes to the scripts and tools"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"qa")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"ci")," for changes to the unit tests, QA tests or CI code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"util")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"lib")," for changes to the utils or libraries"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wallet")," for changes to the wallet code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"build")," for changes to the GNU Autotools or reproducible builds")),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\nnet: Automatically create onion service, listen on Tor\nqt: Add feed bump button\nlog: Fix typo in log message\n")),(0,r.kt)("p",null,"The body of the pull request should contain sufficient description of ",(0,r.kt)("em",{parentName:"p"},"what")," the\npatch does, and even more importantly, ",(0,r.kt)("em",{parentName:"p"},"why"),", with justification and reasoning.\nYou should include references to any discussions (for example, other issues or\nmailing list discussions)."),(0,r.kt)("p",null,"The description for a new pull request should not contain any ",(0,r.kt)("inlineCode",{parentName:"p"},"@")," mentions. The\nPR description will be included in the commit message when the PR is merged and\nany users mentioned in the description will be annoyingly notified each time a\nfork of SBit Core copies the merge. Instead, make any username mentions in a\nsubsequent comment to the PR."),(0,r.kt)("h3",{id:"translation-changes"},"Translation changes"),(0,r.kt)("p",null,"Note that translations should not be submitted as pull requests."),(0,r.kt)("h3",{id:"work-in-progress-changes-and-requests-for-comments"},"Work in Progress Changes and Requests for Comments"),(0,r.kt)("p",null,"If a pull request is not to be considered for merging (yet), please\nprefix the title with ","[WIP]"," or use ",(0,r.kt)("a",{parentName:"p",href:"https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists"},"Tasks Lists"),"\nin the body of the pull request to indicate tasks are pending."),(0,r.kt)("h3",{id:"address-feedback"},"Address Feedback"),(0,r.kt)("p",null,"At this stage, one should expect comments and review from other contributors. You\ncan add more commits to your pull request by committing them locally and pushing\nto your fork until you have satisfied all feedback."),(0,r.kt)("p",null,"Note: Code review is a burdensome but important part of the development process, and as such, certain types of pull requests are rejected. In general, if the ",(0,r.kt)("strong",{parentName:"p"},"improvements")," do not warrant the ",(0,r.kt)("strong",{parentName:"p"},"review effort"),' required, the PR has a high chance of being rejected. It is up to the PR author to convince the reviewers that the changes warrant the review effort, and if reviewers are "Concept NACK\'ing" the PR, the author may need to present arguments and/or do research backing their suggested changes.'),(0,r.kt)("h3",{id:"squashing-commits"},"Squashing Commits"),(0,r.kt)("p",null,"If your pull request contains fixup commits (commits that change the same line of code repeatedly) or too fine-grained\ncommits, you may be asked to ",(0,r.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-rebase#_interactive_mode"},"squash")," your commits\nbefore it will be merged. The basic squashing workflow is shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout your_branch_name\ngit rebase -i HEAD~n\n# n is normally the number of commits in the pull request.\n# Set commits (except the one in the first line) from 'pick' to 'squash', save and quit.\n# On the next screen, edit/refine commit messages.\n# Save and quit.\ngit push -f # (force push to GitHub)\n")),(0,r.kt)("p",null,"Please update the resulting commit message, if needed. It should read as a\ncoherent message. In most cases, this means not just listing the interim\ncommits."),(0,r.kt)("p",null,'If you have problems with squashing or other git workflows, you can enable\n"Allow edits from maintainers" in the right-hand sidebar of the GitHub web\ninterface and ask for help in the pull request.'),(0,r.kt)("p",null,"Please refrain from creating several pull requests for the same change.\nUse the pull request that is already open (or was created earlier) to amend\nchanges. This preserves the discussion and review that happened earlier for\nthe respective change set."),(0,r.kt)("p",null,"The length of time required for peer review is unpredictable and will vary from\npull request to pull request."),(0,r.kt)("h3",{id:"rebasing-changes"},"Rebasing Changes"),(0,r.kt)("p",null,"When a pull request conflicts with the target branch, you may be asked to rebase it on top of the current target branch.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"git rebase")," command will take care of rebuilding your commits on top of the new base."),(0,r.kt)("p",null,"This project aims to have a clean git history, where code changes are only made in non-merge commits. This simplifies\nauditability because merge commits can be assumed to not contain arbitrary code changes. Merge commits should be signed,\nand the resulting git tree hash must be deterministic and reproducible. "),(0,r.kt)("p",null,"After a rebase, reviewers are encouraged to sign off on the force push. This should be relatively straightforward with\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"git range-diff")," tool explained in the ",(0,r.kt)("a",{parentName:"p",href:"../SBit-Core/Development/productivity#diff-the-diffs-with-git-range-diff"},"productivity\nnotes"),". To avoid needless review churn, maintainers will\ngenerally merge pull requests that received the most review attention first."),(0,r.kt)("h2",{id:"pull-request-philosophy"},"Pull Request Philosophy"),(0,r.kt)("p",null,"Patchsets should always be focused. For example, a pull request could add a\nfeature, fix a bug, or refactor code; but not a mixture. Please also avoid super\npull requests which attempt to do too much, are overly large, or overly complex\nas this makes review difficult."),(0,r.kt)("h3",{id:"features"},"Features"),(0,r.kt)("p",null,"When adding a new feature, thought must be given to the long term technical debt\nand maintenance that feature may require after inclusion. Before proposing a new\nfeature that will require maintenance, please consider if you are willing to\nmaintain it (including bug fixing). If features get orphaned with no maintainer\nin the future, they may be removed by the Repository Maintainer."),(0,r.kt)("h3",{id:"refactoring"},"Refactoring"),(0,r.kt)("p",null,"Refactoring is a necessary part of any software project's evolution. The\nfollowing guidelines cover refactoring pull requests for the project."),(0,r.kt)("p",null,"There are three categories of refactoring: code-only moves, code style fixes, and\ncode refactoring. In general, refactoring pull requests should not mix these\nthree kinds of activities in order to make refactoring pull requests easy to\nreview and uncontroversial. In all cases, refactoring PRs must not change the\nbehaviour of code within the pull request (bugs must be preserved as is)."),(0,r.kt)("p",null,"Project maintainers aim for a quick turnaround on refactoring pull requests, so\nwhere possible keep them short, uncomplex and easy to verify."),(0,r.kt)("p",null,"Pull requests that refactor the code should not be made by new contributors. It\nrequires a certain level of experience to know where the code belongs to and to\nunderstand the full ramification (including rebase effort of open pull requests)."),(0,r.kt)("p",null,"Trivial pull requests or pull requests that refactor the code with no clear\nbenefits may be immediately closed by the maintainers to reduce unnecessary\nworkload on reviewing."),(0,r.kt)("h2",{id:"decision-making-process"},'"Decision Making" Process'),(0,r.kt)("p",null,"The following applies to code changes to the SBit Core project (and related\nprojects such as libsecp256k1), and is not to be confused with overall Bitcoin\nNetwork Protocol consensus changes."),(0,r.kt)("p",null,"Whether a pull request is merged into SBit Core rests with the project merge\nmaintainers and ultimately the project lead."),(0,r.kt)("p",null,"Maintainers will take into consideration if a patch is in line with the general\nprinciples of the project; meets the minimum standards for inclusion; and will\njudge the general consensus of contributors."),(0,r.kt)("p",null,"In general, all pull requests must:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Have a clear use case, fix a demonstrable bug or serve the greater good of\nthe project (for example refactoring for modularisation);"),(0,r.kt)("li",{parentName:"ul"},"Be well peer-reviewed;"),(0,r.kt)("li",{parentName:"ul"},"Have unit tests, functional tests, and fuzz tests, where appropriate;"),(0,r.kt)("li",{parentName:"ul"},"Follow code style guidelines (",(0,r.kt)("a",{parentName:"li",href:"../SBit-Core/Development/developer-notes"},"C++"),", ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/SBit-Project/sbit/test/functional/README.md"},"functional tests"),");"),(0,r.kt)("li",{parentName:"ul"},"Not break the existing test suite;"),(0,r.kt)("li",{parentName:"ul"},"Where bugs are fixed, where possible, there should be unit tests\ndemonstrating the bug and also proving the fix. This helps prevent regression."),(0,r.kt)("li",{parentName:"ul"},"Change relevant comments and documentation when behaviour of code changes.")),(0,r.kt)("p",null,"Patches that change Bitcoin consensus rules are considerably more involved than\nnormal because they affect the entire ecosystem and so must be preceded by\nextensive mailing list discussions and have a numbered BIP. While each case will\nbe different, one should be prepared to expend more time and effort than for\nother kinds of patches because of increased peer review and consensus building\nrequirements."),(0,r.kt)("h3",{id:"peer-review"},"Peer Review"),(0,r.kt)("p",null,"Anyone may participate in peer review which is expressed by comments in the pull\nrequest. Typically reviewers will review the code for obvious errors, as well as\ntest out the patch set and opine on the technical merits of the patch. Project\nmaintainers take into account the peer review when determining if there is\nconsensus to merge a pull request (remember that discussions may have been\nspread out over GitHub, mailing list and IRC discussions)."),(0,r.kt)("h4",{id:"conceptual-review"},"Conceptual Review"),(0,r.kt)("p",null,"A review can be a conceptual review, where the reviewer leaves a comment"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Concept (N)ACK"),', meaning "I do (not) agree with the general goal of this pull\nrequest",'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Approach (N)ACK"),", meaning ",(0,r.kt)("inlineCode",{parentName:"li"},"Concept ACK"),', but "I do (not) agree with the\napproach of this change".')),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"NACK")," needs to include a rationale why the change is not worthwhile.\nNACKs without accompanying reasoning may be disregarded."),(0,r.kt)("h4",{id:"code-review"},"Code Review"),(0,r.kt)("p",null,"After conceptual agreement on the change, code review can be provided. A review\nbegins with ",(0,r.kt)("inlineCode",{parentName:"p"},"ACK BRANCH_COMMIT"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"BRANCH_COMMIT")," is the top of the PR\nbranch, followed by a description of how the reviewer did the review. The\nfollowing language is used within pull request comments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"I have tested the code", involving change-specific manual testing in\naddition to running the unit, functional, or fuzz tests, and in case it is\nnot obvious how the manual testing was done, it should be described;'),(0,r.kt)("li",{parentName:"ul"},'"I have not tested the code, but I have reviewed it and it looks\nOK, I agree it can be merged";'),(0,r.kt)("li",{parentName:"ul"},'A "nit" refers to a trivial, often non-blocking issue.')),(0,r.kt)("p",null,"Project maintainers reserve the right to weigh the opinions of peer reviewers\nusing common sense judgement and may also weigh based on merit. Reviewers that\nhave demonstrated a deeper commitment and understanding of the project over time\nor who have clear domain expertise may naturally have more weight, as one would\nexpect in all walks of life."),(0,r.kt)("p",null,"Where a patch set affects consensus-critical code, the bar will be much\nhigher in terms of discussion and peer review requirements, keeping in mind that\nmistakes could be very costly to the wider community. This includes refactoring\nof consensus-critical code."),(0,r.kt)("p",null,"Where a patch set proposes to change the SBit consensus, it must have been\ndiscussed extensively on the mailing list and IRC, be accompanied by a widely\ndiscussed BIP and have a generally widely perceived technical consensus of being\na worthwhile change based on the judgement of the maintainers."),(0,r.kt)("h3",{id:"finding-reviewers"},"Finding Reviewers"),(0,r.kt)("p",null,"As most reviewers are themselves developers with their own projects, the review\nprocess can be quite lengthy, and some amount of patience is required. If you find\nthat you've been waiting for a pull request to be given attention for several\nmonths, there may be a number of reasons for this, some of which you can do something\nabout:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It may be because of a feature freeze due to an upcoming release. During this time,\nonly bug fixes are taken into consideration. If your pull request is a new feature,\nit will not be prioritized until after the release. Wait for the release."),(0,r.kt)("li",{parentName:"ul"},"It may be because the changes you are suggesting do not appeal to people. Rather than\nnits and critique, which require effort and means they care enough to spend time on your\ncontribution, thundering silence is a good sign of widespread (mild) dislike of a given change\n(because people don't assume ",(0,r.kt)("em",{parentName:"li"},"others")," won't actually like the proposal). Don't take\nthat personally, though! Instead, take another critical look at what you are suggesting\nand see if it: changes too much, is too broad, doesn't adhere to the\n",(0,r.kt)("a",{parentName:"li",href:"../SBit-Core/Development/developer-notes"},"developer notes"),", is dangerous or insecure, is messily written, etc.\nIdentify and address any of the issues you find. Then ask e.g. on IRC if someone could give\ntheir opinion on the concept itself."),(0,r.kt)("li",{parentName:"ul"},"It may be because your code is too complex for all but a few people, and those people\nmay not have realized your pull request even exists. A great way to find people who\nare qualified and care about the code you are touching is the\n",(0,r.kt)("a",{parentName:"li",href:"https://help.github.com/articles/tracing-changes-in-a-file/"},"Git Blame feature"),". Simply\nlook up who last modified the code you are changing and see if you can find\nthem and give them a nudge. Don't be incessant about the nudging, though."),(0,r.kt)("li",{parentName:"ul"},"Finally, if all else fails, ask on IRC or elsewhere for someone to give your pull request\na look. If you think you've been waiting for an unreasonably long time (say,\nmore than a month) for no particular reason (a few lines changed, etc.),\nthis is totally fine. Try to return the favor when someone else is asking\nfor feedback on their code, and the universe balances out."),(0,r.kt)("li",{parentName:"ul"},"Remember that the best thing you can do while waiting is give review to others!")),(0,r.kt)("h2",{id:"backporting"},"Backporting"),(0,r.kt)("p",null,"Security and bug fixes can be backported from ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," to release\nbranches.\nIf the backport is non-trivial, it may be appropriate to open an\nadditional PR to backport the change, but only after the original PR\nhas been merged.\nOtherwise, backports will be done in batches and\nthe maintainers will use the proper ",(0,r.kt)("inlineCode",{parentName:"p"},"Needs backport (...)")," labels\nwhen needed (the original author does not need to worry about it)."),(0,r.kt)("p",null,"A backport should contain the following metadata in the commit body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Github-Pull: #<PR number>\nRebased-From: <commit hash of the original commit>\n")),(0,r.kt)("p",null,"Have a look at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/pull/16189"},"an example backport PR"),"."),(0,r.kt)("p",null,"Also see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sbit-core/bitcoin-maintainer-tools#backport"},"backport.py script"),"."),(0,r.kt)("h2",{id:"release-policy"},"Release Policy"),(0,r.kt)("p",null,"The project leader is the release manager for each SBit Core release."),(0,r.kt)("h2",{id:"copyright"},"Copyright"),(0,r.kt)("p",null,"By contributing to this repository, you agree to license your work under the\nMIT license unless specified otherwise in ",(0,r.kt)("inlineCode",{parentName:"p"},"contrib/debian/copyright")," or at\nthe top of the file itself. Any work contributed where you are not the original\nauthor must contain its license header with the original author(s) and source."))}d.isMDXComponent=!0}}]);