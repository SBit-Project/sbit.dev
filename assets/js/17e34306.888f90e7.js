"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[6786],{3905:function(e,t,a){a.d(t,{Zo:function(){return l},kt:function(){return p}});var n=a(7294);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function d(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?d(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):d(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,c=function(e,t){if(null==e)return{};var a,n,c={},d=Object.keys(e);for(n=0;n<d.length;n++)a=d[n],t.indexOf(a)>=0||(c[a]=e[a]);return c}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(n=0;n<d.length;n++)a=d[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(c[a]=e[a])}return c}var f=n.createContext({}),i=function(e){var t=n.useContext(f),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},l=function(e){var t=i(e.components);return n.createElement(f.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,c=e.mdxType,d=e.originalType,f=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),s=i(a),p=c,u=s["".concat(f,".").concat(p)]||s[p]||b[p]||d;return a?n.createElement(u,r(r({ref:t},l),{},{components:a})):n.createElement(u,r({ref:t},l))}));function p(e,t){var a=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var d=a.length,r=new Array(d);r[0]=s;var o={};for(var f in t)hasOwnProperty.call(t,f)&&(o[f]=t[f]);o.originalType=e,o.mdxType="string"==typeof e?e:c,r[1]=o;for(var i=2;i<d;i++)r[i]=a[i];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},4216:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return f},default:function(){return p},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return b}});var n=a(7462),c=a(3366),d=(a(7294),a(3905)),r=["components"],o={title:"Smart Contract Raw TX",description:"Deploy and interact with a smart contract using the JSON RPC",keywords:["sbit","smart contract","src20","ethereum"],sidebar_position:2},f=void 0,i={unversionedId:"Smart-Contract/Blockchain-API/Raw-TX",id:"Smart-Contract/Blockchain-API/Raw-TX",title:"Smart Contract Raw TX",description:"Deploy and interact with a smart contract using the JSON RPC",source:"@site/docs/Smart-Contract/Blockchain-API/Raw-TX.md",sourceDirName:"Smart-Contract/Blockchain-API",slug:"/Smart-Contract/Blockchain-API/Raw-TX",permalink:"/sbit.dev/docs/Smart-Contract/Blockchain-API/Raw-TX",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Smart Contract Raw TX",description:"Deploy and interact with a smart contract using the JSON RPC",keywords:["sbit","smart contract","src20","ethereum"],sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Inspect Raw Transaction",permalink:"/sbit.dev/docs/Smart-Contract/Blockchain-API/inspect-raw-tx"},next:{title:"SRC20 Token",permalink:"/sbit.dev/docs/Smart-Contract/SRC20/src20-token"}},l={},b=[{value:"Create The Contract",id:"create-the-contract",level:2},{value:"Raw TX For CREATECONTRACT",id:"raw-tx-for-createcontract",level:2},{value:"Interacting With A Contract",id:"interacting-with-a-contract",level:2},{value:"Sending A Contract Transaction",id:"sending-a-contract-transaction",level:2},{value:"The SendToContract Transaction",id:"the-sendtocontract-transaction",level:2}],s={toc:b};function p(e){var t=e.components,a=(0,c.Z)(e,r);return(0,d.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,d.kt)("p",null,"In this chapter we will deploy and interact with a smart contract using the JSON RPC. We will also see the underlying raw transaction that implements SBIT's Smart Contract platform."),(0,d.kt)("p",null,"The example is a contract with one single storage variable:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"pragma solidity ^0.4.18;\ncontract SimpleStore {\n  function SimpleStore(uint _value) public {\n    value = _value;\n  }\n\n    function set(uint newValue) public {\n        value = newValue;\n    }\n\n    function get() public constant returns (uint) {\n        return value;\n    }\n\n    uint value;\n}\n")),(0,d.kt)("h2",{id:"create-the-contract"},"Create The Contract"),(0,d.kt)("p",null,"Compile the contract to bytecode:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"solc --optimize --bin SimpleStore.sol\n\n======= SimpleStore.sol:SimpleStore =======\nBinary:\n608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a723058202926444d9654f866e083cd06b8bfddde21cecfc614d9a03045246423c47f9b200029\n")),(0,d.kt)("p",null,"To create this contract, we'll essentially need to create a special transaction that uses the bytecode as the transaction payload data."),(0,d.kt)("p",null,"The contract constructor requires an initializing ",(0,d.kt)("inlineCode",{parentName:"p"},"_value"),":"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"function SimpleStore(uint _value) public {\n  value = _value;\n}\n")),(0,d.kt)("p",null,"Let's use ",(0,d.kt)("inlineCode",{parentName:"p"},"1")," as the initial value. We'll need to ABI encode all the constructor parameters. The ABI encoded value for ",(0,d.kt)("inlineCode",{parentName:"p"},"1")," is a 32 bytes hexadecimal string:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"0000000000000000000000000000000000000000000000000000000000000001\n")),(0,d.kt)("p",null,"How do we pass in the ABI-encoded constructor parameters? Simple, just append it to the end of the bytecode. So, the transaction payload for creating a smart contract should follow this structure:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"<bytecode><constructor parameters>\n")),(0,d.kt)("p",null,"The RPC command to create a contract is ",(0,d.kt)("inlineCode",{parentName:"p"},"createcontract"),". Let's call it, combining together the compiler bytecode output and the constructor parameters:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},'scli createcontract \\\n  608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a723058202926444d9654f866e083cd06b8bfddde21cecfc614d9a03045246423c47f9b2000290000000000000000000000000000000000000000000000000000000000000001\n\n{\n  "txid": "4caa93a015ecf4e9fafd84c7cda2ad4897068777f29a1b1e1804e50553990c68",\n  "sender": "sZ2kTyK4vLvGSngtYynmRdfd8n9UBFNwMv",\n  "hash160": "a9b6e7e59974d92b949a9c9aa8eb420f73518364",\n  "address": "ecb30fa67545211d0e4b859213872442cd9d37c5"\n}\n')),(0,d.kt)("h2",{id:"raw-tx-for-createcontract"},"Raw TX For CREATECONTRACT"),(0,d.kt)("p",null,"To gain some insight into the ",(0,d.kt)("inlineCode",{parentName:"p"},"createcontract")," RPC call, let's examine the underlying UTXO that's used to create the TX. First, get the raw tx data associated with the txid:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"scli getrawtransaction 4caa93a015ecf4e9fafd84c7cda2ad4897068777f29a1b1e1804e50553990c68\n02000000019b96d26a797a9952dbd8d81400de9143e30cc73ae2d83fe6d3bcc46dc665ebb5000000004847304402207601cc15aa2abc535de1673e1fe07d902d7970d2ea46892a5dc7dd7fbd394f5002201a6dd6dba6fe73f065cd2b2906d8b0632cfee68622835de23a8af6e73f7f968d01feffffff02107851a3d10100001976a91441d6ac4feec70a7b28c59c23e92be5ea2a15879a88ac0000000000000000fd1e01010403a0252601284d1201608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a723058202926444d9654f866e083cd06b8bfddde21cecfc614d9a03045246423c47f9b2000290000000000000000000000000000000000000000000000000000000000000001c1fe010000\n")),(0,d.kt)("p",null,"Then decode it:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"scli decoderawtransaction \\\n  02000000019b96d26a797a9952dbd8d81400de9143e30cc73ae2d83fe6d3bcc46dc665ebb5000000004847304402207601cc15aa2abc535de1673e1fe07d902d7970d2ea46892a5dc7dd7fbd394f5002201a6dd6dba6fe73f065cd2b2906d8b0632cfee68622835de23a8af6e73f7f968d01feffffff02107851a3d10100001976a91441d6ac4feec70a7b28c59c23e92be5ea2a15879a88ac0000000000000000fd1e01010403a0252601284d1201608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a723058202926444d9654f866e083cd06b8bfddde21cecfc614d9a03045246423c47f9b2000290000000000000000000000000000000000000000000000000000000000000001c1fe010000\n")),(0,d.kt)("p",null,"The output:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "txid": "4caa93a015ecf4e9fafd84c7cda2ad4897068777f29a1b1e1804e50553990c68",\n  "hash": "4caa93a015ecf4e9fafd84c7cda2ad4897068777f29a1b1e1804e50553990c68",\n  "size": 454,\n  "vsize": 454,\n  "version": 2,\n  "locktime": 510,\n  "vin": [\n    {\n      "txid": "b5eb65c66dc4bcd3e63fd8e23ac70ce34391de0014d8d8db52997a796ad2969b",\n      "vout": 0,\n      "scriptSig": {\n        "asm": "304402207601cc15aa2abc535de1673e1fe07d902d7970d2ea46892a5dc7dd7fbd394f5002201a6dd6dba6fe73f065cd2b2906d8b0632cfee68622835de23a8af6e73f7f968d[ALL]",\n        "hex": "47304402207601cc15aa2abc535de1673e1fe07d902d7970d2ea46892a5dc7dd7fbd394f5002201a6dd6dba6fe73f065cd2b2906d8b0632cfee68622835de23a8af6e73f7f968d01"\n      },\n      "sequence": 4294967294\n    }\n  ],\n  "vout": [\n    {\n      "value": 19998.99818000,\n      "n": 0,\n      "scriptPubKey": {\n        "asm": "OP_DUP OP_HASH160 41d6ac4feec70a7b28c59c23e92be5ea2a15879a OP_EQUALVERIFY OP_CHECKSIG",\n        "hex": "76a91441d6ac4feec70a7b28c59c23e92be5ea2a15879a88ac",\n        "reqSigs": 1,\n        "type": "pubkeyhash",\n        "addresses": [\n          "sPZWFFMrHtxsaop1wJKh6SCnnurMFjPexC"\n        ]\n      }\n    },\n    {\n      "value": 0.00000000,\n      "n": 1,\n      "scriptPubKey": {\n        "asm": "4 2500000 40 608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a723058202926444d9654f866e083cd06b8bfddde21cecfc614d9a03045246423c47f9b2000290000000000000000000000000000000000000000000000000000000000000001 OP_CREATE",\n        "hex": "010403a0252601284d1201608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a723058202926444d9654f866e083cd06b8bfddde21cecfc614d9a03045246423c47f9b2000290000000000000000000000000000000000000000000000000000000000000001c1",\n        "type": "create"\n      }\n    }\n  ]\n}\n')),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"The first vout is a the change returned to the wallet of the sender"),(0,d.kt)("li",{parentName:"ul"},"The second vout is an OP_CREATE script")),(0,d.kt)("p",null,"The OP_CREATE is a new instruction added by SBIT to support smart contract platforms. It takes four arguments on the stack, as commented below:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"# VM version\n4\n# gas limit\n2500000\n# gas price\n40\n# bytecode + constructor params\n608060405234801561001057600080fd5b506040516020806100f2833981016040525160005560bf806100336000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360fe47b18114604d5780636d4ce63c146064575b600080fd5b348015605857600080fd5b5060626004356088565b005b348015606f57600080fd5b506076608d565b60408051918252519081900360200190f35b600055565b600054905600a165627a7a723058202926444d9654f866e083cd06b8bfddde21cecfc614d9a03045246423c47f9b2000290000000000000000000000000000000000000000000000000000000000000001\n# create instruction\nOP_CREATE\n")),(0,d.kt)("h1",{id:"deploy-using-solar"},"Deploy Using Solar"),(0,d.kt)("p",null,"Let's deploy the ",(0,d.kt)("inlineCode",{parentName:"p"},"SimpleStore")," contract again using solar. Under the hood, it's doing exactly what you just did:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"solar deploy SimpleStore.sol '[1]'\n\n\ud83d\ude80   All contracts confirmed\n   deployed SimpleStore.sol => cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4\n")),(0,d.kt)("h2",{id:"interacting-with-a-contract"},"Interacting With A Contract"),(0,d.kt)("p",null,"There are two ways to interact with a deployed contract."),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"callcontract")," - read-only query of a contract's method."),(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"sendtocontract")," - create a tx that changes the state of the contract.")),(0,d.kt)("p",null,"Both of these will invoke a contract's method. The parameters will need to be ABI encoded, and we will use ",(0,d.kt)("inlineCode",{parentName:"p"},"solar"),' to create the "data payload" that we\'ll need to send to the underlying RPC commands.'),(0,d.kt)("h1",{id:"calling-a-contract"},"Calling A Contract"),(0,d.kt)("p",null,'The "call" a contract, we ABI encode a method invokation, and send it to the ',(0,d.kt)("inlineCode",{parentName:"p"},"callcontract")," RPC call."),(0,d.kt)("p",null,"Let's call the ",(0,d.kt)("inlineCode",{parentName:"p"},"get")," method, to return the current value of the SimpleStore contract:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"solar encode SimpleStore.sol get\n6d4ce63c\n")),(0,d.kt)("p",null,"The callcontract using the contract address, and the ABI encoded method invokation:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"scli callcontract cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4 \\\n  6d4ce63c\n")),(0,d.kt)("p",null,"The result is:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "address": "cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4",\n  "executionResult": {\n    "gasUsed": 21678,\n    "excepted": "None",\n    "newAddress": "cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4",\n    "output": "0000000000000000000000000000000000000000000000000000000000000001",\n    "codeDeposit": 0,\n    "gasRefunded": 0,\n    "depositSize": 0,\n    "gasForDeposit": 0\n  },\n  "transactionReceipt": {\n    "stateRoot": "88407020db33e8aca4ac47b16940fb31f9942bf8ff734e68156e899992465eda",\n    "gasUsed": 21678,\n    "bloom": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",\n    "log": [\n    ]\n  }\n}\n')),(0,d.kt)("p",null,"You can see that the ",(0,d.kt)("inlineCode",{parentName:"p"},"output")," property returned the value we used to construct the contract."),(0,d.kt)("h2",{id:"sending-a-contract-transaction"},"Sending A Contract Transaction"),(0,d.kt)("p",null,"Now let's use ",(0,d.kt)("inlineCode",{parentName:"p"},"sendtocontract")," to create a transaction that modifies the state of the SimpleStore contract."),(0,d.kt)("p",null,"To encode ",(0,d.kt)("inlineCode",{parentName:"p"},"set(2)"),":"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"solar encode SimpleStore.sol set '[2]'\n60fe47b10000000000000000000000000000000000000000000000000000000000000002\n")),(0,d.kt)("p",null,"Then we use the ",(0,d.kt)("inlineCode",{parentName:"p"},"sendtocontract")," RPC call, with the address and ABI encoded method invokation:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"scli sendtocontract cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4 \\\n  60fe47b10000000000000000000000000000000000000000000000000000000000000002\n")),(0,d.kt)("p",null,"The returned transaction id:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},'{\n  "txid": "f6e934db283949a91a3f134246f48c52a7c8d580db36e998fa838d8c10c3b139",\n  "sender": "sKNc7xc44W9teoxoWLUaxeJNq1967JaUoD",\n  "hash160": "13e67f7e74b6e81a841292ebeaabfc7333d3e1cb"\n}\n')),(0,d.kt)("p",null,"Once the transaction had been confirmed, we can call ",(0,d.kt)("inlineCode",{parentName:"p"},"get()")," again to get the new value:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'scli callcontract cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4 \\\n  6d4ce63c\n\n{\n  "address": "cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4",\n  "executionResult": {\n    "gasUsed": 21678,\n    "excepted": "None",\n    "newAddress": "cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4",\n    "output": "0000000000000000000000000000000000000000000000000000000000000002",\n    "codeDeposit": 0,\n    "gasRefunded": 0,\n    "depositSize": 0,\n    "gasForDeposit": 0\n  },\n  "transactionReceipt": {\n    "stateRoot": "c4c0aac17cdde49eb2ae303941c8721c7e4b2f394d27e15aec4f15778e4cd087",\n    "gasUsed": 21678,\n    "bloom": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",\n    "log": [\n    ]\n  }\n}\n')),(0,d.kt)("p",null,"Yay, the ",(0,d.kt)("inlineCode",{parentName:"p"},"value")," storage variable had indeeded been modified."),(0,d.kt)("h2",{id:"the-sendtocontract-transaction"},"The SendToContract Transaction"),(0,d.kt)("p",null,"Finally, let's examine the raw transaction that implements ",(0,d.kt)("inlineCode",{parentName:"p"},"sendtocontract"),":"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"scli getrawtransaction f6e934db283949a91a3f134246f48c52a7c8d580db36e998fa838d8c10c3b139\n\n0200000001c919f89ddefa4bc09ad83330f993360fc419c9c91ef1560ede7f2df4f680eca6010000006a47304402207401aa5c7f4fddb9e3917c26a383fe250cecda61b51f722ce2fbc2c47bcb1aa40220585badcf06a9b77156d54d5bd5f5d30e9606c340012e9e5097d52c2bd8e1839b012102f0d1abe6acc590a400c3719a562299637c55e45e56d4c75658e07d263ab8b30ffeffffff02c0348d9bd10100001976a91458a1b81dbdeedd166bb166f528bb861048baf9b288ac00000000000000004301040390d00301282460fe47b1000000000000000000000000000000000000000000000000000000000000000214cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4c221020000\n")),(0,d.kt)("p",null,"Then decode it:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"scli decoderawtransaction 0200000001c919f89ddefa4bc09ad83330f993360fc419c9c91ef1560ede7f2df4f680eca6010000006a47304402207401aa5c7f4fddb9e3917c26a383fe250cecda61b51f722ce2fbc2c47bcb1aa40220585badcf06a9b77156d54d5bd5f5d30e9606c340012e9e5097d52c2bd8e1839b012102f0d1abe6acc590a400c3719a562299637c55e45e56d4c75658e07d263ab8b30ffeffffff02c0348d9bd10100001976a91458a1b81dbdeedd166bb166f528bb861048baf9b288ac00000000000000004301040390d00301282460fe47b1000000000000000000000000000000000000000000000000000000000000000214cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4c221020000\n")),(0,d.kt)("p",null,"The tx:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "txid": "f6e934db283949a91a3f134246f48c52a7c8d580db36e998fa838d8c10c3b139",\n  "hash": "f6e934db283949a91a3f134246f48c52a7c8d580db36e998fa838d8c10c3b139",\n  "size": 267,\n  "vsize": 267,\n  "version": 2,\n  "locktime": 545,\n  "vin": [\n    {\n      "txid": "a6ec80f6f42d7fde0e56f11ec9c919c40f3693f93033d89ac04bfade9df819c9",\n      "vout": 1,\n      "scriptSig": {\n        "asm": "304402207401aa5c7f4fddb9e3917c26a383fe250cecda61b51f722ce2fbc2c47bcb1aa40220585badcf06a9b77156d54d5bd5f5d30e9606c340012e9e5097d52c2bd8e1839b[ALL] 02f0d1abe6acc590a400c3719a562299637c55e45e56d4c75658e07d263ab8b30f",\n        "hex": "47304402207401aa5c7f4fddb9e3917c26a383fe250cecda61b51f722ce2fbc2c47bcb1aa40220585badcf06a9b77156d54d5bd5f5d30e9606c340012e9e5097d52c2bd8e1839b012102f0d1abe6acc590a400c3719a562299637c55e45e56d4c75658e07d263ab8b30f"\n      },\n      "sequence": 4294967294\n    }\n  ],\n  "vout": [\n    {\n      "value": 19997.69515200,\n      "n": 0,\n      "scriptPubKey": {\n        "asm": "OP_DUP OP_HASH160 58a1b81dbdeedd166bb166f528bb861048baf9b2 OP_EQUALVERIFY OP_CHECKSIG",\n        "hex": "76a91458a1b81dbdeedd166bb166f528bb861048baf9b288ac",\n        "reqSigs": 1,\n        "type": "pubkeyhash",\n        "addresses": [\n          "sRe2MMp8cyzXs7WpCGZKvpdrJJYyoKm9Lg"\n        ]\n      }\n    },\n    {\n      "value": 0.00000000,\n      "n": 1,\n      "scriptPubKey": {\n        "asm": "4 250000 40 60fe47b10000000000000000000000000000000000000000000000000000000000000002 cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4 OP_CALL",\n        "hex": "01040390d00301282460fe47b1000000000000000000000000000000000000000000000000000000000000000214cd20af1f2d6ac4173f9464030e7cef40bf9cb7c4c2",\n        "type": "call"\n      }\n    }\n  ]\n}\n')),(0,d.kt)("p",null,"The second vout is the script that invokes a smart contract. Its structure is very similar to the OP_CREATE script that was used to create the contract."),(0,d.kt)("p",null,"The commented script:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"# VM version\n4\n# gas limit\n250000\n# gas price\n40\n# ABI-encoded method invokation\n60fe47b10000000000000000000000000000000000000000000000000000000000000002\n# address of contract\ncd20af1f2d6ac4173f9464030e7cef40bf9cb7c4\nOP_CALL\n")))}p.isMDXComponent=!0}}]);