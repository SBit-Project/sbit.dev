"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[4425],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5086:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={title:"PSBT",description:"PSBT Howto for Sbit Core",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:4},s=void 0,p={unversionedId:"SBit-Core/Miscellaneous/psbt",id:"SBit-Core/Miscellaneous/psbt",title:"PSBT",description:"PSBT Howto for Sbit Core",source:"@site/docs/SBit-Core/Miscellaneous/psbt.md",sourceDirName:"SBit-Core/Miscellaneous",slug:"/SBit-Core/Miscellaneous/psbt",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/psbt",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"PSBT",description:"PSBT Howto for Sbit Core",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Init",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/init"},next:{title:"Reduce Memory",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/reduce-memory"}},c={},d=[{value:"PSBT in general",id:"psbt-in-general",level:2},{value:"Overall workflow",id:"overall-workflow",level:3},{value:"PSBT in Bitcoin Core",id:"psbt-in-bitcoin-core",level:2},{value:"RPCs",id:"rpcs",level:3},{value:"Workflows",id:"workflows",level:3},{value:"Multisig with multiple Bitcoin Core instances",id:"multisig-with-multiple-bitcoin-core-instances",level:4}],u={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This document need review and test"))),(0,r.kt)("p",null,"Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\nTransactions (PSBTs, as specified in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki"},"BIP 174"),")."),(0,r.kt)("p",null,"This document describes the overall workflow for producing signed transactions\nthrough the use of PSBT, and the specific RPC commands used in typical\nscenarios."),(0,r.kt)("h2",{id:"psbt-in-general"},"PSBT in general"),(0,r.kt)("p",null,"PSBT is an interchange format for Bitcoin transactions that are not fully signed\nyet, together with relevant metadata to help entities work towards signing it.\nIt is intended to simplify workflows where multiple parties need to cooperate to\nproduce a transaction. Examples include hardware wallets, multisig setups, and\n",(0,r.kt)("a",{parentName:"p",href:"https://bitcointalk.org/?topic=279249"},"CoinJoin")," transactions."),(0,r.kt)("h3",{id:"overall-workflow"},"Overall workflow"),(0,r.kt)("p",null,"Overall, the construction of a fully signed Bitcoin transaction goes through the\nfollowing steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"Creator")," proposes a particular transaction to be created. They construct\na PSBT that contains certain inputs and outputs, but no additional metadata."),(0,r.kt)("li",{parentName:"ul"},"For each input, an ",(0,r.kt)("strong",{parentName:"li"},"Updater")," adds information about the UTXOs being spent by\nthe transaction to the PSBT. They also add information about the scripts and\npublic keys involved in each of the inputs (and possibly outputs) of the PSBT."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Signers")," inspect the transaction and its metadata to decide whether they\nagree with the transaction. They can use amount information from the UTXOs\nto assess the values and fees involved. If they agree, they produce a\npartial signature for the inputs for which they have relevant key(s)."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"Finalizer")," is run for each input to convert the partial signatures and\npossibly script information into a final ",(0,r.kt)("inlineCode",{parentName:"li"},"scriptSig")," and/or ",(0,r.kt)("inlineCode",{parentName:"li"},"scriptWitness"),"."),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("strong",{parentName:"li"},"Extractor")," produces a valid Bitcoin transaction (in network format)\nfrom a PSBT for which all inputs are finalized.")),(0,r.kt)("p",null,"Generally, each of the above (excluding Creator and Extractor) will simply\nadd more and more data to a particular PSBT, until all inputs are fully signed.\nIn a naive workflow, they all have to operate sequentially, passing the PSBT\nfrom one to the next, until the Extractor can convert it to a real transaction.\nIn order to permit parallel operation, ",(0,r.kt)("strong",{parentName:"p"},"Combiners")," can be employed which merge\nmetadata from different PSBTs for the same unsigned transaction."),(0,r.kt)("p",null,"The names above in bold are the names of the roles defined in BIP174. They're\nuseful in understanding the underlying steps, but in practice, software and\nhardware implementations will typically implement multiple roles simultaneously."),(0,r.kt)("h2",{id:"psbt-in-bitcoin-core"},"PSBT in Bitcoin Core"),(0,r.kt)("h3",{id:"rpcs"},"RPCs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"converttopsbt")," (Creator)")," is a utility RPC that converts an\nunsigned raw transaction to PSBT format. It ignores existing signatures."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"createpsbt")," (Creator)")," is a utility RPC that takes a list of inputs and\noutputs and converts them to a PSBT with no additional information. It is\nequivalent to calling ",(0,r.kt)("inlineCode",{parentName:"li"},"createrawtransaction")," followed by ",(0,r.kt)("inlineCode",{parentName:"li"},"converttopsbt"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"walletcreatefundedpsbt")," (Creator, Updater)")," is a wallet RPC that creates a\nPSBT with the specified inputs and outputs, adds additional inputs and change\nto it to balance it out, and adds relevant metadata. In particular, for inputs\nthat the wallet knows about (counting towards its normal or watch-only\nbalance), UTXO information will be added. For outputs and inputs with UTXO\ninformation present, key and script information will be added which the wallet\nknows about. It is equivalent to running ",(0,r.kt)("inlineCode",{parentName:"li"},"createrawtransaction"),", followed by\n",(0,r.kt)("inlineCode",{parentName:"li"},"fundrawtransaction"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"converttopsbt"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"walletprocesspsbt")," (Updater, Signer, Finalizer)")," is a wallet RPC that takes as\ninput a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\nit, and optionally signs inputs. Where possible it also finalizes the partial\nsignatures."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"utxoupdatepsbt")," (Updater)")," is a node RPC that takes a PSBT and updates it\nto include information available from the UTXO set (works only for SegWit\ninputs)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"finalizepsbt")," (Finalizer, Extractor)")," is a utility RPC that finalizes any\npartial signatures, and if all inputs are finalized, converts the result to a\nfully signed transaction which can be broadcast with ",(0,r.kt)("inlineCode",{parentName:"li"},"sendrawtransaction"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"combinepsbt")," (Combiner)")," is a utility RPC that implements a Combiner. It\ncan be used at any point in the workflow to merge information added to\ndifferent versions of the same PSBT. In particular it is useful to combine the\noutput of multiple Updaters or Signers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"joinpsbts"))," (Creator) is a utility RPC that joins multiple PSBTs together,\nconcatenating the inputs and outputs. This can be used to construct CoinJoin\ntransactions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"decodepsbt"))," is a diagnostic utility RPC which will show all information in\na PSBT in human-readable form, as well as compute its eventual fee if known."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"analyzepsbt"))," is a utility RPC that examines a PSBT and reports the\ncurrent status of its inputs, the next step in the workflow if known, and if\npossible, computes the fee of the resulting transaction and estimates the\nfinal weight and feerate.")),(0,r.kt)("h3",{id:"workflows"},"Workflows"),(0,r.kt)("h4",{id:"multisig-with-multiple-bitcoin-core-instances"},"Multisig with multiple Bitcoin Core instances"),(0,r.kt)("p",null,"Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\nBitcoin Core. We assume their wallets only contain the multisig funds. In case\nthey also have a personal wallet, this can be accomplished through the\nmultiwallet feature - possibly resulting in a need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"-rpcwallet=name")," to\nthe command line in case ",(0,r.kt)("inlineCode",{parentName:"p"},"bitcoin-cli")," is used."),(0,r.kt)("p",null,"Setup:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All three call ",(0,r.kt)("inlineCode",{parentName:"li"},"getnewaddress")," to create a new address; call these addresses\n",(0,r.kt)("em",{parentName:"li"},"Aalice"),", ",(0,r.kt)("em",{parentName:"li"},"Abob"),", and ",(0,r.kt)("em",{parentName:"li"},"Acarol"),"."),(0,r.kt)("li",{parentName:"ul"},"All three call ",(0,r.kt)("inlineCode",{parentName:"li"},'getaddressinfo "X"'),", with ",(0,r.kt)("em",{parentName:"li"},"X")," their respective address, and\nremember the corresponding public keys. Call these public keys ",(0,r.kt)("em",{parentName:"li"},"Kalice"),",\n",(0,r.kt)("em",{parentName:"li"},"Kbob"),", and ",(0,r.kt)("em",{parentName:"li"},"Kcarol"),"."),(0,r.kt)("li",{parentName:"ul"},"All three now run ",(0,r.kt)("inlineCode",{parentName:"li"},'addmultisigaddress 2 ["Kalice","Kbob","Kcarol"]')," to teach\ntheir wallet about the multisig script. Call the address produced by this\ncommand ",(0,r.kt)("em",{parentName:"li"},"Amulti"),". They may be required to explicitly specify the same\naddresstype option each, to avoid constructing different versions due to\ndifferences in configuration."),(0,r.kt)("li",{parentName:"ul"},"They also run ",(0,r.kt)("inlineCode",{parentName:"li"},'importaddress "Amulti" "" false')," to make their wallets treat\npayments to ",(0,r.kt)("em",{parentName:"li"},"Amulti")," as contributing to the watch-only balance."),(0,r.kt)("li",{parentName:"ul"},"Others can verify the produced address by running\n",(0,r.kt)("inlineCode",{parentName:"li"},'createmultisig 2 ["Kalice","Kbob","Kcarol"]'),", and expecting ",(0,r.kt)("em",{parentName:"li"},"Amulti")," as\noutput. Again, it may be necessary to explicitly specify the addresstype\nin order to get a result that matches. This command won't enable them to\ninitiate transactions later, however."),(0,r.kt)("li",{parentName:"ul"},"They can now give out ",(0,r.kt)("em",{parentName:"li"},"Amulti")," as address others can pay to.")),(0,r.kt)("p",null,"Later, when ",(0,r.kt)("em",{parentName:"p"},"V")," BTC has been received on ",(0,r.kt)("em",{parentName:"p"},"Amulti"),", and Bob and Carol want to\nmove the coins in their entirety to address ",(0,r.kt)("em",{parentName:"p"},"Asend"),", with no change. Alice\ndoes not need to be involved."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"One of them - let's assume Carol here - initiates the creation. She runs\n",(0,r.kt)("inlineCode",{parentName:"li"},'walletcreatefundedpsbt [] {"Asend":V} 0 {"subtractFeeFromOutputs":[0], "includeWatching":true}'),".\nWe call the resulting PSBT ",(0,r.kt)("em",{parentName:"li"},"P"),". ",(0,r.kt)("em",{parentName:"li"},"P")," does not contain any signatures."),(0,r.kt)("li",{parentName:"ul"},"Carol needs to sign the transaction herself. In order to do so, she runs\n",(0,r.kt)("inlineCode",{parentName:"li"},'walletprocesspsbt "P"'),", and gives the resulting PSBT ",(0,r.kt)("em",{parentName:"li"},"P2")," to Bob."),(0,r.kt)("li",{parentName:"ul"},"Bob inspects the PSBT using ",(0,r.kt)("inlineCode",{parentName:"li"},'decodepsbt "P2"')," to determine if the transaction\nhas indeed just the expected input, and an output to ",(0,r.kt)("em",{parentName:"li"},"Asend"),", and the fee is\nreasonable. If he agrees, he calls ",(0,r.kt)("inlineCode",{parentName:"li"},'walletprocesspsbt "P2"')," to sign. The\nresulting PSBT ",(0,r.kt)("em",{parentName:"li"},"P3")," contains both Carol's and Bob's signature."),(0,r.kt)("li",{parentName:"ul"},"Now anyone can call ",(0,r.kt)("inlineCode",{parentName:"li"},'finalizepsbt "P3"')," to extract a fully signed transaction\n",(0,r.kt)("em",{parentName:"li"},"T"),"."),(0,r.kt)("li",{parentName:"ul"},"Finally anyone can broadcast the transaction using ",(0,r.kt)("inlineCode",{parentName:"li"},'sendrawtransaction "T"'),".")),(0,r.kt)("p",null,"In case there are more signers, it may be advantageous to let them all sign in\nparallel, rather than passing the PSBT from one signer to the next one. In the\nabove example this would translate to Carol handing a copy of ",(0,r.kt)("em",{parentName:"p"},"P")," to each signer\nseparately. They can then all invoke ",(0,r.kt)("inlineCode",{parentName:"p"},'walletprocesspsbt "P"'),", and end up with\ntheir individually-signed PSBT structures. They then all send those back to\nCarol (or anyone) who can combine them using ",(0,r.kt)("inlineCode",{parentName:"p"},"combinepsbt"),". The last two steps\n(",(0,r.kt)("inlineCode",{parentName:"p"},"finalizepsbt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sendrawtransaction"),") remain unchanged."))}m.isMDXComponent=!0}}]);