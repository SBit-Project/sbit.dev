"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[3010],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6532:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],l={title:"OpenBSD Build guide",description:"This guide describes how to build sbitd, sbit-qt, and command-line utilities on OpenBSD.",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:3},s=void 0,c={unversionedId:"SBit-Core/Building/build-openbsd",id:"SBit-Core/Building/build-openbsd",title:"OpenBSD Build guide",description:"This guide describes how to build sbitd, sbit-qt, and command-line utilities on OpenBSD.",source:"@site/docs/SBit-Core/Building/build-openbsd.md",sourceDirName:"SBit-Core/Building",slug:"/SBit-Core/Building/build-openbsd",permalink:"/sbit.dev/docs/SBit-Core/Building/build-openbsd",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"OpenBSD Build guide",description:"This guide describes how to build sbitd, sbit-qt, and command-line utilities on OpenBSD.",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"NetBSD Build guide",permalink:"/sbit.dev/docs/SBit-Core/Building/build-netbsd"},next:{title:"UNIX Build guide",permalink:"/sbit.dev/docs/SBit-Core/Building/build-unix"}},p={},d=[{value:"Preparation",id:"preparation",level:2},{value:"Building BerkeleyDB",id:"building-berkeleydb",level:3},{value:"Building Sbit Core",id:"building-sbit-core",level:3},{value:"Resource limits",id:"resource-limits",level:2}],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Tested on OpenBSD 6.7"))),(0,r.kt)("p",null,"This guide describes how to build sbitd, sbit-qt, and command-line utilities on OpenBSD."),(0,r.kt)("h2",{id:"preparation"},"Preparation"),(0,r.kt)("p",null,"Run the following as root to install the base dependencies for building:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pkg_add git gmake libevent libtool boost gmp\npkg_add qt5 # (optional for enabling the GUI)\npkg_add autoconf # (select highest version, e.g. 2.69)\npkg_add automake # (select highest version, e.g. 1.16)\npkg_add python # (select highest version, e.g. 3.8)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/SBit-Project/sbit --recursive\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"dependencies"},"Dependencies")," for a complete overview."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"From OpenBSD 6.2 onwards a C++11-supporting clang compiler is\npart of the base image, and while building it is necessary to make sure that\nthis compiler is used and not ancient g++ 4.2.1. This is done by appending\n",(0,r.kt)("inlineCode",{parentName:"p"},"CC=cc CC_FOR_BUILD=cc CXX=c++")," to configuration commands. Mixing different\ncompilers within the same executable will result in errors."))),(0,r.kt)("h3",{id:"building-berkeleydb"},"Building BerkeleyDB"),(0,r.kt)("p",null,"BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n",(0,r.kt)("inlineCode",{parentName:"p"},"--disable-wallet")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"./configure")," and skip to the next section."),(0,r.kt)("p",null,"It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\nfrom ports, for the same reason as boost above (g++/libstd++ incompatibility).\nIf you have to build it yourself, you can use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/contrib/install_db4.sh"},"the installation script included\nin contrib dir")," like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./contrib/install_db4.sh `pwd` CC=cc CXX=c++\n")),(0,r.kt)("p",null,"from the root of the repository. Then set ",(0,r.kt)("inlineCode",{parentName:"p"},"BDB_PREFIX")," for the next section:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export BDB_PREFIX="$PWD/db4"\n')),(0,r.kt)("h3",{id:"building-sbit-core"},"Building Sbit Core"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"gmake")," (the non-GNU ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," will exit with an error)."))),(0,r.kt)("p",null,"Preparation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'\n# Replace this with the autoconf version that you installed. Include only\n# the major and minor parts of the version: use "2.69" for "autoconf-2.69p2".\nexport AUTOCONF_VERSION=2.69\n\n# Replace this with the automake version that you installed. Include only\n# the major and minor parts of the version: use "1.16" for "automake-1.16.1".\nexport AUTOMAKE_VERSION=1.16\n\n./autogen.sh\n')),(0,r.kt)("p",null,"Make sure ",(0,r.kt)("inlineCode",{parentName:"p"},"BDB_PREFIX")," is set to the appropriate path from the above steps."),(0,r.kt)("p",null,"To configure with wallet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./configure --with-gui=no CC=cc CXX=c++ \\\n    BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" \\\n    BDB_CFLAGS="-I${BDB_PREFIX}/include" \\\n    MAKE=gmake\n')),(0,r.kt)("p",null,"To configure without wallet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./configure --disable-wallet --with-gui=no CC=cc CC_FOR_BUILD=cc CXX=c++ MAKE=gmake\n")),(0,r.kt)("p",null,"To configure with GUI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./configure --with-gui=yes CC=cc CXX=c++ \\\n    BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" \\\n    BDB_CFLAGS="-I${BDB_PREFIX}/include" \\\n    MAKE=gmake\n')),(0,r.kt)("p",null,"Build and run the tests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gmake # use -jX here for parallelism\ngmake check\n")),(0,r.kt)("h2",{id:"resource-limits"},"Resource limits"),(0,r.kt)("p",null,"If the build runs into out-of-memory errors, the instructions in this section\nmight help."),(0,r.kt)("p",null,"The standard ulimit restrictions in OpenBSD are very strict:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"data(kbytes)         1572864\n")),(0,r.kt)("p",null,"This is, unfortunately, in some cases not enough to compile some ",(0,r.kt)("inlineCode",{parentName:"p"},".cpp")," files in the project,\n(see issue ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/issues/6658"},"#6658"),").\nIf your user is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"staff")," group the limit can be raised with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ulimit -d 3000000\n")),(0,r.kt)("p",null,"The change will only affect the current shell and processes spawned by it. To\nmake the change system-wide, change ",(0,r.kt)("inlineCode",{parentName:"p"},"datasize-cur")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"datasize-max")," in\n",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/login.conf"),", and reboot."))}m.isMDXComponent=!0}}]);