"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[1355],{3905:function(e,n,o){o.d(n,{Zo:function(){return u},kt:function(){return h}});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function s(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=t.createContext({}),d=function(e){var n=t.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},u=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(o),h=r,b=p["".concat(l,".").concat(h)]||p[h]||c[h]||i;return o?t.createElement(b,a(a({ref:n},u),{},{components:o})):t.createElement(b,a({ref:n},u))}));function h(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var d=2;d<i;d++)a[d]=o[d];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}p.displayName="MDXCreateElement"},2616:function(e,n,o){o.r(n),o.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var t=o(7462),r=o(3366),i=(o(7294),o(3905)),a=["components"],s={title:"Tor",description:"TOR SUPPORT IN SBIT",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:8},l=void 0,d={unversionedId:"SBit-Core/Miscellaneous/tor",id:"SBit-Core/Miscellaneous/tor",title:"Tor",description:"TOR SUPPORT IN SBIT",source:"@site/docs/SBit-Core/Miscellaneous/tor.md",sourceDirName:"SBit-Core/Miscellaneous",slug:"/SBit-Core/Miscellaneous/tor",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/tor",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Tor",description:"TOR SUPPORT IN SBIT",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Sbit Configuration File",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/sbit-conf"},next:{title:"ZMQ",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/zmq"}},u={},c=[{value:"How to see information about your Tor configuration via Sbit Core",id:"how-to-see-information-about-your-tor-configuration-via-sbit-core",level:2},{value:"1. Run Sbit Core behind a Tor proxy",id:"1-run-sbit-core-behind-a-tor-proxy",level:2},{value:"2. Run a Sbit Core hidden server",id:"2-run-a-sbit-core-hidden-server",level:2},{value:"3. Automatically listen on Tor",id:"3-automatically-listen-on-tor",level:2},{value:"4. Privacy recommendations",id:"4-privacy-recommendations",level:2}],p={toc:c};function h(e){var n=e.components,o=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It is possible to run Sbit Core as a Tor onion service, and connect to such services."),(0,i.kt)("p",null,"The following directions assume you have a Tor proxy running on port 9050. Many distributions default to having a SOCKS proxy listening on port 9050, but others may not. In particular, the Tor Browser Bundle defaults to listening on port 9150. See ",(0,i.kt)("a",{parentName:"p",href:"https://www.torproject.org/docs/faq.html.en#TBBSocksPort"},"Tor Project FAQ:TBBSocksPort")," for how to properly\nconfigure Tor."),(0,i.kt)("h2",{id:"how-to-see-information-about-your-tor-configuration-via-sbit-core"},"How to see information about your Tor configuration via Sbit Core"),(0,i.kt)("p",null,"There are several ways to see your local onion address in Sbit Core:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'in the debug log (grep for "tor:" or "AddLocal")'),(0,i.kt)("li",{parentName:"ul"},"in the output of RPC ",(0,i.kt)("inlineCode",{parentName:"li"},"getnetworkinfo"),' in the "localaddresses" section'),(0,i.kt)("li",{parentName:"ul"},"in the output of the CLI ",(0,i.kt)("inlineCode",{parentName:"li"},"-netinfo")," peer connections dashboard")),(0,i.kt)("p",null,"You may set the ",(0,i.kt)("inlineCode",{parentName:"p"},"-debug=tor")," config logging option to have additional\ninformation in the debug log about your Tor configuration."),(0,i.kt)("h2",{id:"1-run-sbit-core-behind-a-tor-proxy"},"1. Run Sbit Core behind a Tor proxy"),(0,i.kt)("p",null,"The first step is running Sbit Core behind a Tor proxy. This will already anonymize all\noutgoing connections, but more is possible."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n                server will be used to try to reach .onion addresses as well.\n\n-onion=ip:port  Set the proxy server to use for Tor onion services. You do not\n                need to set this if it's the same as -proxy. You can use -noonion\n                to explicitly disable access to onion services.\n\n-listen         When using -proxy, listening is disabled by default. If you want\n                to run an onion service (see next section), you'll need to enable\n                it explicitly.\n\n-connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n-addnode=X      of IP addresses or hostnames in these parameters. It requires\n-seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n                other P2P nodes.\n\n-onlynet=onion  Make outgoing connections only to .onion addresses. Incoming\n                connections are not affected by this option. This option can be\n                specified multiple times to allow multiple network types, e.g.\n                ipv4, ipv6, or onion.\n")),(0,i.kt)("p",null,"In a typical situation, this suffices to run behind a Tor proxy:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./sbitd -proxy=127.0.0.1:9050\n")),(0,i.kt)("h2",{id:"2-run-a-sbit-core-hidden-server"},"2. Run a Sbit Core hidden server"),(0,i.kt)("p",null,"If you configure your Tor system accordingly, it is possible to make your node also\nreachable from the Tor network. Add these lines to your /etc/tor/torrc (or equivalent\nconfig file): ",(0,i.kt)("em",{parentName:"p"},"Needed for Tor version 0.2.7.0 and older versions of Tor only. For newer\nversions of Tor see ",(0,i.kt)("a",{parentName:"em",href:"#3-automatically-listen-on-tor"},"Section 3"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"HiddenServiceDir /var/lib/tor/sbid-service/\nHiddenServicePort 22001 127.0.0.1:22004\nHiddenServicePort 22301 127.0.0.1:22304\n")),(0,i.kt)("p",null,"The directory can be different of course, but virtual port numbers should be equal to\nyour sbitd's P2P listen port (22001 by default), and target addresses and ports\nshould be equal to binding address and port for inbound Tor connections (127.0.0.1:22004 by default)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-externalip=X   You can tell sbit about its publicly reachable addresses using\n                this option, and this can be an onion address. Given the above\n                configuration, you can find your onion address in\n                /var/lib/tor/sbit-service/hostname. For connections\n                coming from unroutable addresses (such as 127.0.0.1, where the\n                Tor proxy typically runs), onion addresses are given\n                preference for your node to advertise itself with.\n\n                You can set multiple local addresses with -externalip. The\n                one that will be rumoured to a particular peer is the most\n                compatible one and also using heuristics, e.g. the address\n                with the most incoming connections, etc.\n\n-listen         You'll need to enable listening for incoming connections, as this\n                is off by default behind a proxy.\n\n-discover       When -externalip is specified, no attempt is made to discover local\n                IPv4 or IPv6 addresses. If you want to run a dual stack, reachable\n                from both Tor and IPv4 (or IPv6), you'll need to either pass your\n                other addresses using -externalip, or explicitly enable -discover.\n                Note that both addresses of a dual-stack system may be easily\n                linkable using traffic analysis.\n")),(0,i.kt)("p",null,"In a typical situation, where you're only reachable via Tor, this should suffice:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./sbitd -proxy=127.0.0.1:9050 -externalip=7zvj7a2imdgkdbg4f2dryd5rgtrn7upivr5eeij4cicjh65pooxeshid.onion -listen\n")),(0,i.kt)("p",null,"(obviously, replace the .onion address with your own). It should be noted that you still\nlisten on all devices and another node could establish a clearnet connection, when knowing\nyour address. To mitigate this, additionally bind the address of your Tor proxy:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./sbitd ... -bind=127.0.0.1\n")),(0,i.kt)("p",null,"If you don't care too much about hiding your node, and want to be reachable on IPv4\nas well, use ",(0,i.kt)("inlineCode",{parentName:"p"},"discover")," instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./sbitd ... -discover\n")),(0,i.kt)("p",null,"and open port 22001 on your firewall (or use -upnp)."),(0,i.kt)("p",null,"If you only want to use Tor to reach .onion addresses, but not use it as a proxy\nfor normal IPv4/IPv6 communication, use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./sbitd -onion=127.0.0.1:9050 -externalip=7zvj7a2imdgkdbg4f2dryd5rgtrn7upivr5eeij4cicjh65pooxeshid.onion -discover\n")),(0,i.kt)("h2",{id:"3-automatically-listen-on-tor"},"3. Automatically listen on Tor"),(0,i.kt)("p",null,"Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\nAPI, to create and destroy 'ephemeral' onion services programmatically.\nSbit Core has been updated to make use of this."),(0,i.kt)("p",null,"This means that if Tor is running (and proper authentication has been configured),\nSbit Core automatically creates an onion service to listen on. This will positively\naffect the number of available .onion nodes."),(0,i.kt)("p",null,"This new feature is enabled by default if Sbit Core is listening (",(0,i.kt)("inlineCode",{parentName:"p"},"-listen"),"), and\nrequires a Tor connection to work. It can be explicitly disabled with ",(0,i.kt)("inlineCode",{parentName:"p"},"-listenonion=0"),"\nand, if not disabled, configured using the ",(0,i.kt)("inlineCode",{parentName:"p"},"-torcontrol")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"-torpassword")," settings.\nTo show verbose debugging information, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"-debug=tor"),"."),(0,i.kt)("p",null,"Connecting to Tor's control socket API requires one of two authentication methods to be\nconfigured. It also requires the control socket to be enabled, e.g. put ",(0,i.kt)("inlineCode",{parentName:"p"},"ControlPort 9051"),"\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"torrc")," config file. For cookie authentication the user running sbitd must have read\naccess to the ",(0,i.kt)("inlineCode",{parentName:"p"},"CookieAuthFile")," specified in Tor configuration. In some cases this is\npreconfigured and the creation of an onion service is automatic. If permission problems\nare seen with ",(0,i.kt)("inlineCode",{parentName:"p"},"-debug=tor"),' they can be resolved by adding both the user running Tor and\nthe user running sbitd to the same group and setting permissions appropriately. On\nDebian-based systems the user running sbit can be added to the debian-tor group,\nwhich has the appropriate permissions. Before starting sbitd you will need to re-login\nto allow debian-tor group to be applied. Otherwise you will see the following notice: "tor:\nAuthentication cookie /run/tor/control.authcookie could not be opened (check permissions)"\non debug.log.'),(0,i.kt)("p",null,"An alternative authentication method is the use\nof the ",(0,i.kt)("inlineCode",{parentName:"p"},"-torpassword=password")," option. The ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," is the clear text form that\nwas used when generating the hashed password for the ",(0,i.kt)("inlineCode",{parentName:"p"},"HashedControlPassword")," option\nin the tor configuration file. The hashed password can be obtained with the command\n",(0,i.kt)("inlineCode",{parentName:"p"},"tor --hash-password password")," (read the tor manual for more details)."),(0,i.kt)("h2",{id:"4-privacy-recommendations"},"4. Privacy recommendations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Do not add anything but Sbit Core ports to the onion service created in section 2.\nIf you run a web service too, create a new onion service for that.\nOtherwise it is trivial to link them, which may reduce privacy. Hidden\nservices created automatically (as in section 3) always have only one port\nopen.")))}h.isMDXComponent=!0}}]);