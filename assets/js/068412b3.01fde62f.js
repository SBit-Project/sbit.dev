"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[4356],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=i,g=d["".concat(c,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2831:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={title:"Fuzzing",description:"Fuzzing SBit Core using libFuzzer",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:2},c=void 0,l={unversionedId:"SBit-Core/Miscellaneous/fuzzing",id:"SBit-Core/Miscellaneous/fuzzing",title:"Fuzzing",description:"Fuzzing SBit Core using libFuzzer",source:"@site/docs/SBit-Core/Miscellaneous/fuzzing.md",sourceDirName:"SBit-Core/Miscellaneous",slug:"/SBit-Core/Miscellaneous/fuzzing",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/fuzzing",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Fuzzing",description:"Fuzzing SBit Core using libFuzzer",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"SBit Core file system",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/files"},next:{title:"Init",permalink:"/sbit.dev/docs/SBit-Core/Miscellaneous/init"}},u={},p=[{value:"Quickstart guide",id:"quickstart-guide",level:2},{value:"Fuzzing harnesses, fuzzing output and fuzzing corpora",id:"fuzzing-harnesses-fuzzing-output-and-fuzzing-corpora",level:2},{value:"macOS hints for libFuzzer",id:"macos-hints-for-libfuzzer",level:2},{value:"Quickstart guide",id:"quickstart-guide-1",level:2},{value:"Quickstart guide",id:"quickstart-guide-2",level:2}],d={toc:p};function f(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"quickstart-guide"},"Quickstart guide"),(0,a.kt)("p",null,"To quickly get started fuzzing SBit Core using ",(0,a.kt)("a",{parentName:"p",href:"https://llvm.org/docs/LibFuzzer.html"},"libFuzzer"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ git clone https://github.com/SBit-Project/sbit --recursive\n$ cd sbit/\n$ ./autogen.sh\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n# macOS users: If you have problem with this step then make sure to read "macOS hints for\n# libFuzzer" \n$ make\n$ src/test/fuzz/process_message\n# abort fuzzing using ctrl-c\n')),(0,a.kt)("h2",{id:"fuzzing-harnesses-fuzzing-output-and-fuzzing-corpora"},"Fuzzing harnesses, fuzzing output and fuzzing corpora"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/blob/master/src/test/fuzz/process_message.cpp"},(0,a.kt)("inlineCode",{parentName:"a"},"process_message"))," is a fuzzing harness for the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/blob/master/src/net_processing.cpp"},(0,a.kt)("inlineCode",{parentName:"a"},"ProcessMessage(...)")," function (",(0,a.kt)("inlineCode",{parentName:"a"},"net_processing"),")"),". The available fuzzing harnesses are found in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SBit-Project/sbit/tree/master/src/test/fuzz"},(0,a.kt)("inlineCode",{parentName:"a"},"src/test/fuzz/")),"."),(0,a.kt)("p",null,"The fuzzer will output ",(0,a.kt)("inlineCode",{parentName:"p"},"NEW")," every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the ",(0,a.kt)("a",{parentName:"p",href:"https://llvm.org/docs/LibFuzzer.html"},"libFuzzer documentation"),"."),(0,a.kt)("p",null,"If you specify a corpus directory then any new coverage increasing inputs will be saved there:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ mkdir -p process_message-seeded-from-thin-air/\n$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\nINFO: Seed: 840522292\nINFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\nINFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\nINFO:        0 files found in process_message-seeded-from-thin-air/\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\nINFO: A corpus is not provided, starting from an empty corpus\n#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: "block"-\n        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: "block"-\n        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: "block"-\n#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: "verack"-\n# abort fuzzing using ctrl-c\n$ ls process_message-seeded-from-thin-air/\n349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\na640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\nc000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n$ cat --show-nonprinting process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8\nblock^@M-^?M-^?M-^?M-^?M-^?nM-^?M-^?\n')),(0,a.kt)("p",null,"In this case the fuzzer managed to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"block")," message which when passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"ProcessMessage(...)")," increased coverage."),(0,a.kt)("h2",{id:"macos-hints-for-libfuzzer"},"macOS hints for libFuzzer"),(0,a.kt)("p",null,"The default Clang/LLVM version supplied by Apple on macOS does not include\nfuzzing libraries, so macOS users will need to install a full version, for\nexample using ",(0,a.kt)("inlineCode",{parentName:"p"},"brew install llvm"),"."),(0,a.kt)("p",null,"Should you run into problems with the address sanitizer, it is possible you\nmay need to run ",(0,a.kt)("inlineCode",{parentName:"p"},"./configure")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"--disable-asm")," to avoid errors\nwith certain assembly code from SBit Core's code. See ",(0,a.kt)("a",{parentName:"p",href:"../Development/developer-notes#sanitizers"},"developer notes on sanitizers"),"\nfor more information."),(0,a.kt)("p",null,"You may also need to take care of giving the correct path for ",(0,a.kt)("inlineCode",{parentName:"p"},"clang")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"clang++"),", like ",(0,a.kt)("inlineCode",{parentName:"p"},"CC=/path/to/clang CXX=/path/to/clang++")," if the non-systems\n",(0,a.kt)("inlineCode",{parentName:"p"},"clang")," does not come first in your path."),(0,a.kt)("p",null,"Full configure that was tested on macOS Catalina with ",(0,a.kt)("inlineCode",{parentName:"p"},"brew")," installed ",(0,a.kt)("inlineCode",{parentName:"p"},"llvm"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"./configure --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm\n")),(0,a.kt)("p",null,"Read the ",(0,a.kt)("a",{parentName:"p",href:"https://llvm.org/docs/LibFuzzer.html"},"libFuzzer documentation")," for more information. This ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/fuzzing/blob/master/tutorial/libFuzzerTutorial.md"},"libFuzzer tutorial")," might also be of interest."),(0,a.kt)("h1",{id:"fuzzing-sbit-core-using-american-fuzzy-lop-afl-fuzz"},"Fuzzing SBit Core using american fuzzy lop (",(0,a.kt)("inlineCode",{parentName:"h1"},"afl-fuzz"),")"),(0,a.kt)("h2",{id:"quickstart-guide-1"},"Quickstart guide"),(0,a.kt)("p",null,"To quickly get started fuzzing SBit Core using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/afl"},(0,a.kt)("inlineCode",{parentName:"a"},"afl-fuzz")),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ git clone https://github.com/SBit-Project/sbit --recursive\n$ cd sbit/\n$ git clone https://github.com/google/afl\n$ make -C afl/\n$ make -C afl/llvm_mode/\n$ ./autogen.sh\n# It is possible to compile with afl-gcc and afl-g++ instead of afl-clang. However, running afl-fuzz\n# may require more memory via the -m flag.\n$ CC=$(pwd)/afl/afl-clang-fast CXX=$(pwd)/afl/afl-clang-fast++ ./configure --enable-fuzz\n$ make\n# For macOS you may need to ignore x86 compilation checks when running "make". If so,\n# try compiling using: AFL_NO_X86=1 make\n$ mkdir -p inputs/ outputs/\n$ echo A > inputs/thin-air-input\n$ afl/afl-fuzz -i inputs/ -o outputs/ -- src/test/fuzz/bech32\n# You may have to change a few kernel parameters to test optimally - afl-fuzz\n# will print an error and suggestion if so.\n')),(0,a.kt)("p",null,"Read the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/afl"},(0,a.kt)("inlineCode",{parentName:"a"},"afl-fuzz")," documentation")," for more information."),(0,a.kt)("h1",{id:"fuzzing-sbit-core-using-honggfuzz"},"Fuzzing SBit Core using Honggfuzz"),(0,a.kt)("h2",{id:"quickstart-guide-2"},"Quickstart guide"),(0,a.kt)("p",null,"To quickly get started fuzzing SBit Core using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/honggfuzz"},"Honggfuzz"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ git clone https://github.com/SBit-Project/sbit --recursive\n$ cd sbit/\n$ ./autogen.sh\n$ git clone https://github.com/google/honggfuzz\n$ cd honggfuzz/\n$ make\n$ cd ..\n$ CC=$(pwd)/honggfuzz/hfuzz_cc/hfuzz-clang CXX=$(pwd)/honggfuzz/hfuzz_cc/hfuzz-clang++ ./configure --enable-fuzz --with-sanitizers=address,undefined\n$ make\n$ mkdir -p inputs/\n$ honggfuzz/honggfuzz -i inputs/ -- src/test/fuzz/process_message\n")),(0,a.kt)("p",null,"Read the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/google/honggfuzz/blob/master/docs/USAGE.md"},"Honggfuzz documentation")," for more information."))}f.isMDXComponent=!0}}]);