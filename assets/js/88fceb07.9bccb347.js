"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[1056],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),f=c(n),p=i,b=f["".concat(l,".").concat(p)]||f[p]||u[p]||o;return n?a.createElement(b,r(r({ref:t},d),{},{components:n})):a.createElement(b,r({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},416:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],s={title:"SBit Sparknet Usage and Information",description:"SBit Sparknet Usage and Information",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:13},l=void 0,c={unversionedId:"SBit-Core/Building/sparknet-guide",id:"SBit-Core/Building/sparknet-guide",title:"SBit Sparknet Usage and Information",description:"SBit Sparknet Usage and Information",source:"@site/docs/SBit-Core/Building/sparknet-guide.md",sourceDirName:"SBit-Core/Building",slug:"/SBit-Core/Building/sparknet-guide",permalink:"/sbit.dev/docs/SBit-Core/Building/sparknet-guide",tags:[],version:"current",sidebarPosition:13,frontMatter:{title:"SBit Sparknet Usage and Information",description:"SBit Sparknet Usage and Information",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Multiprocess Bitcoin",permalink:"/sbit.dev/docs/SBit-Core/Building/multiprocess"},next:{title:"Benchmarking",permalink:"/sbit.dev/docs/SBit-Core/Development/benchmarking"}},d={},u=[{value:"FAQ",id:"faq",level:2}],f={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Welcome to SBit Sparknet, the first public testnet for the SBit blockchain. Sparknet is designed primarily for developers, and as such documentation at this point will be technical and suited more for developers. The mainnet is expected to be released in September and will be suited for the general public. Testnet tokens do not hold any value and should not be traded for any monetary instruments. The testnet can be reset or forked at anytime as deemed necessary for development. Sparknet does not include support for Mutualized Proof Of Stake, or for the Decentralized Governance Protocol. Both of these features are implemented, and their code is available on alternative branches (check the pull requests), but have not been tested and proven stable enough to include in this testnet. They will be implemented in the 2nd public testnet for SBit. "),(0,o.kt)("h1",{id:"using-smart-contracts-with-sbit"},"Using Smart Contracts with SBit"),(0,o.kt)("p",null,"The smart contract interface in SBit still requires some technical knowledge. The GUI is not completed yet, so all smart contract interation must happen either using ",(0,o.kt)("inlineCode",{parentName:"p"},"sbit-cli")," at the command line, or in the debug window of ",(0,o.kt)("inlineCode",{parentName:"p"},"sbit-qt"),". "),(0,o.kt)("p",null,"To demonstrate how to deploy and interact with a simple we will use this contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"    pragma solidity ^0.4.0;\n\n    contract SBitTest {\n       uint storedNumber;\n       function SBitTest() {\n           storedNumber=1;\n       }\n       function setNumber(uint number) public{\n           storedNumber = number;\n       }\n       function logNumber() constant public{\n            log1(\"storedNumber\", uintToBytes(storedNumber));\n       }\n       function returnNumber() constant public returns (uint){\n           return storedNumber;\n       }\n       function deposit() public payable{\n       }\n       function withdraw() public{\n           if(!msg.sender.send(this.balance)){\n               throw;\n           }\n       }\n       //utility function\n       function uintToBytes(uint v) constant returns (bytes32 ret) {\n           if (v == 0) {\n               ret = '0';\n           }\n           else {\n               while (v > 0) {\n                   ret = bytes32(uint(ret) / (2 ** 8));\n                   ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\n                   v /= 10;\n               }\n           }\n           return ret;\n       }\n    }\n")),(0,o.kt)("p",null,"It compiles to the following EVM bytecode "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    6060604052341561000c57fe5b5b60016000819055505b5b6102bd806100266000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633450bd6a146100785780633ccfd60b1461009e5780633fb5c1cb146100b057806394e8767d146100d05780639f2c436f1461010c578063d0e30db01461011e575bfe5b341561008057fe5b610088610128565b6040518082815260200191505060405180910390f35b34156100a657fe5b6100ae610133565b005b34156100b857fe5b6100ce6004808035906020019091905050610190565b005b34156100d857fe5b6100ee600480803590602001909190505061019b565b60405180826000191660001916815260200191505060405180910390f35b341561011457fe5b61011c610246565b005b61012661028e565b005b600060005490505b90565b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050151561018d57610000565b5b565b806000819055505b50565b600060008214156101ce577f3000000000000000000000000000000000000000000000000000000000000000905061023d565b5b600082111561023c5761010081600190048115156101e957fe5b0460010290507f01000000000000000000000000000000000000000000000000000000000000006030600a8481151561021e57fe5b06010260010281179050600a8281151561023457fe5b0491506101cf565b5b8090505b919050565b61025160005461019b565b6000191660405180807f73746f7265644e756d6265720000000000000000000000000000000000000000815250600c01905060405180910390a15b565b5b5600a165627a7a72305820326efcd34df5fdba07e7a1afe7ffd4b42873ef749ae9a5915db46fd20b9c251c0029\n")),(0,o.kt)("p",null,"And finally, has the following JSON interface file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    [{"constant":true,"inputs":[],"name":"returnNumber","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"number","type":"uint256"}],"name":"setNumber","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"v","type":"uint256"}],"name":"uintToBytes","outputs":[{"name":"ret","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"logNumber","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}]\n')),(0,o.kt)("p",null,"This info can easily be retrieved for any contract by using ",(0,o.kt)("a",{parentName:"p",href:"https://ethereum.github.io/browser-solidity/"},"Browser Solidity"),', inputing your contract\'s source code, and then on the right hand side clicking "contract details" '),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If using the debug window in the SBit Qt application, don't include ",(0,o.kt)("inlineCode",{parentName:"p"},"./sbit-cli")," in the commands"))),(0,o.kt)("p",null,"First, we need to deploy the contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ./sbit-cli createcontract 6060604052341561000c57fe5b5b60016000819055505b5b6102bd806100266000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633450bd6a146100785780633ccfd60b1461009e5780633fb5c1cb146100b057806394e8767d146100d05780639f2c436f1461010c578063d0e30db01461011e575bfe5b341561008057fe5b610088610128565b6040518082815260200191505060405180910390f35b34156100a657fe5b6100ae610133565b005b34156100b857fe5b6100ce6004808035906020019091905050610190565b005b34156100d857fe5b6100ee600480803590602001909190505061019b565b60405180826000191660001916815260200191505060405180910390f35b341561011457fe5b61011c610246565b005b61012661028e565b005b600060005490505b90565b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050151561018d57610000565b5b565b806000819055505b50565b600060008214156101ce577f3000000000000000000000000000000000000000000000000000000000000000905061023d565b5b600082111561023c5761010081600190048115156101e957fe5b0460010290507f01000000000000000000000000000000000000000000000000000000000000006030600a8481151561021e57fe5b06010260010281179050600a8281151561023457fe5b0491506101cf565b5b8090505b919050565b61025160005461019b565b6000191660405180807f73746f7265644e756d6265720000000000000000000000000000000000000000815250600c01905060405180910390a15b565b5b5600a165627a7a72305820326efcd34df5fdba07e7a1afe7ffd4b42873ef749ae9a5915db46fd20b9c251c0029 300000\n")),(0,o.kt)("p",null,"Note that the last number is the gas limit for this transaction. The default value is not large enough for this contract, so we increase it to 300,000 gas."),(0,o.kt)("p",null,"This should result in something like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    {\n      "txid": "72b0e0576d289c1e4e6c777431e4845f77d0884d3b3cff0387a5f4a1a3a874ea",\n      "sender": "sZbjaE8N18ZU1m7851G7QGhvxKL74SRBTt",\n      "hash160": "aff3e34ab836edb8d214a993d9da105915e4a6e9",\n      "address": "5bde092dbecb84ea1a229b4c5b25dfc9cdc674d9"\n    }\n')),(0,o.kt)("p",null,"Now, you should store the ",(0,o.kt)("inlineCode",{parentName:"p"},"address")," in a variable so it's easy to track:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export CONTRACT=5bde092dbecb84ea1a229b4c5b25dfc9cdc674d9\n")),(0,o.kt)("p",null,"Now wait for your contract to be included in a block. You should be able to confirm it made it into a block by using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./sbit-cli getaccountinfo $CONTRACT\n")),(0,o.kt)("p",null,'If you get a message saying "Address does not exist", then either your transaction has not yet been included in a block (you can confirm this with ',(0,o.kt)("inlineCode",{parentName:"p"},"getrawtransaction")," and your txid), or you did not provide enough gas for the contract to be executed and persisted into the blockchain. If the contract was successfully executed and persisted in the blockchain, you should see something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    {\n      "address": "5bde092dbecb84ea1a229b4c5b25dfc9cdc674d9",\n      "balance": 0,\n      "storage": {\n        "290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563": {\n          "0000000000000000000000000000000000000000000000000000000000000000": "0000000000000000000000000000000000000000000000000000000000000001"\n        }\n      },\n      "code": "..."\n    }\n')),(0,o.kt)("p",null,"In order to interact with the contract, you must create raw ABI data from the interface JSON file. The easiest tool to assist in this is ethabi, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ethabi"},"https://github.com/paritytech/ethabi")),(0,o.kt)("p",null,"Make sure the JSON file is saved somewhere, we will call it interface.json. "),(0,o.kt)("p",null,"In order to get the ",(0,o.kt)("inlineCode",{parentName:"p"},"storedNumber")," variable we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"returnNumber()")," function. We can construct the ABI values by using ethabi:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ethabi encode function ~/interface.json returnNumber\n")),(0,o.kt)("p",null,"The result of this is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"3450bd6a\n")),(0,o.kt)("p",null,"Now, because we are not changing state, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"callcontract"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./sbit-cli callcontract $CONTRACT 3450bd6a\n")),(0,o.kt)("p",null,"This results in a lot of data that can be useful in different contexts (including gas estimates), but we are only concerned about the ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," field, which is the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"storedNumber")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    {\n      "address": "5bde092dbecb84ea1a229b4c5b25dfc9cdc674d9",\n      "executionResult": {\n        "gasUsed": 21664,\n        "excepted": "None",\n        "newAddress": "5bde092dbecb84ea1a229b4c5b25dfc9cdc674d9",\n        "output": "0000000000000000000000000000000000000000000000000000000000000001",\n        "codeDeposit": 0,\n        "gasRefunded": 0,\n        "depositSize": 0,\n        "gasForDeposit": 0\n      },\n      "transactionReceipt": {\n        "stateRoot": "ffbeb0377d43c6ed443a2840259ff5ead5158016ab54d55ef21b7b11aa71947f",\n        "gasUsed": 21664,\n        "bloom": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",\n        "log": [\n        ]\n      }\n    }\n')),(0,o.kt)("p",null,"To change the storedNumber we can do an on-chain execution using ",(0,o.kt)("inlineCode",{parentName:"p"},"sendtocontract"),". First, we need the ABI data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ethabi encode function ~/interface.json setNumber -p 123456 --lenient 3fb5c1cb000000000000000000000000000000000000000000000000000000000001e240\n")),(0,o.kt)("p",null,"Note we use --lenient so that we do not need to provide a full 256bit value as a parameter. Now, we can execute the contract directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./sbit-cli sendtocontract $CONTRACT 3fb5c1cb000000000000000000000000000000000000000000000000000000000001e240\n")),(0,o.kt)("p",null,"Afterwards, we can call ",(0,o.kt)("inlineCode",{parentName:"p"},"returnNumber()")," again and check the ",(0,o.kt)("inlineCode",{parentName:"p"},"output")," field:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "output": "000000000000000000000000000000000000000000000000000000000001e240",\n')),(0,o.kt)("p",null,"This is 123456 encoded as hex. "),(0,o.kt)("p",null,"You can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"logNumber()")," function in order to generate logs. If your node was started with ",(0,o.kt)("inlineCode",{parentName:"p"},"-record-log-opcodes"),", then the file ",(0,o.kt)("inlineCode",{parentName:"p"},"vmExecLogs.json")," will contain any log operations that occur on the blockchain. This is what is used for events on the Ethereum blockchain, and eventually it is our intention to bring similar functionality to SBit."),(0,o.kt)("p",null,"You can also deposit and withdraw coins from this test contract using the ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"withdraw()")," functions."),(0,o.kt)("p",null,"The ABI value for ",(0,o.kt)("inlineCode",{parentName:"p"},"deposit")," is d0e30db0 and the ABI value for ",(0,o.kt)("inlineCode",{parentName:"p"},"withdraw")," is 3ccfd60b"),(0,o.kt)("p",null,"This will send 10 tokens to the contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./sbit-cli sendtocontract $CONTRACT d0e30db0 10\n")),(0,o.kt)("p",null,"And then, to withdraw them it's also very simple:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./sbit-cli sendtocontract $CONTRACT 3ccfd60b\n")),(0,o.kt)("p",null,"If you want to control the exact address that the contract sends coins to, you can also explicitly specify the sender. Note that you must be capable of sending coins from that address (you can't use someone elses address). One of my wallet addresses is sZbjaE8N18ZU1m7851G7QGhvxKL74SRBTt, so I'll use that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./sbit-cli sendtocontract $CONTRACT 3ccfd60b 0 190000 0.0000001 sZbjaE8N18ZU1m7851G7QGhvxKL74SRBTt\n")),(0,o.kt)("p",null,'Note that if you get the error "Sender address does not have any unspent outputs", then you should send some coins to that address (they must be spent in order to prove that you own that address). This can be accomplished with any amount of coins:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./sbit-cli sendtoaddress sZbjaE8N18ZU1m7851G7QGhvxKL74SRBTt 0.001\n")),(0,o.kt)("p",null,"There is no need to wait for this transaction to confirm, it can be followed immediately by the sendtocontract command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./sbit-cli sendtocontract $CONTRACT 3ccfd60b 0 190000 0.0000001 sZbjaE8N18ZU1m7851G7QGhvxKL74SRBTt\n")),(0,o.kt)("p",null,"When creating this contract transaction, nothing will immediately happen, when the transaction is put into a block though a new transaction will appear in a block which will send any coins owned by the contract to the pubkeyhash address sZbjaE8N18ZU1m7851G7QGhvxKL74SRBTt"),(0,o.kt)("h2",{id:"faq"},"FAQ"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'Q: "I used ',(0,o.kt)("inlineCode",{parentName:"li"},"createcontract"),", but can't call my contract and it's not in listcontract\" A: You probably did not provide enough gas for the contract's constructor to be executed and it's code persisted in the blockchain. The vm.log file should confirm this by saying how much gas was needed"),(0,o.kt)("li",{parentName:"ul"},'Q: "I sent a large amount of gas but I never got a refund" A: Refunds are generated from the coinstake transaction, so you must wait 500 blocks for the gas refund to mature before it can be spent again'),(0,o.kt)("li",{parentName:"ul"},'Q: "I used -reindex and now my node is taking forever to resync" A: Currently when doing a reindex, all contracts are reprocessed, so in a chain with many contract executions this can add up to a significant amount of time. This will be made faster in the future, as well as the initial syncing speed of nodes'),(0,o.kt)("li",{parentName:"ul"},'Q: "I think I found a bug in SBit" A: Please report any bugs at ',(0,o.kt)("a",{parentName:"li",href:"https://github.com/SBit-Project/SBit/issues"},"https://github.com/SBit-Project/SBit/issues"))),(0,o.kt)("h1",{id:"new-sbit-rpc-commands"},"New SBit RPC Commands"),(0,o.kt)("p",null,"SBit supports all of the RPC commands supported by SBit Core, but also includes the following commands unique to SBit:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"createcontract")," - This will create and deploy a new smart contract to the SBit blockchain. This requires gas."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"callcontract")," - This will interact with an already deployed smart contract on the SBit blockchain, with all computation taking place off-chain and no persistence to the blockchain. This does not require gas"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sendtocontract")," - This will interact with an already deployed smart contract on the SBit blockchain. All computation takes place on-chain and any state changes will be persisted to the blockchain. This allows tokens to be sent to a smart contract. This requires gas."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"getaccountinfo")," - This will show some low level information about a contract, including the contract's bytecode, stored data, and balance on the blockchain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"listcontracts")," - This will output a list of currently deployed contract addresses with their respective balance. This RPC call may change or be removed in the future."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"reservebalance")," - This will reserve a set amount of coins so that they do not participate in staking. If you reserve as many or more coins than are in your wallet, then you will not participate at all in staking and block creation for the network."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"getstakinginfo")," - This will show some info about the current node's staking status, including network difficulty and expected time (in seconds) until staking a new block."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"gethexaddress")," - This will convert a standard Base58 pubkeyhash address to a hex address for use in smart contracts"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fromhexaddress")," - this will convert a hex address used in smart contracts to a standard Base58 pubkeyhash address")),(0,o.kt)("h1",{id:"new-sbit-command-line-arguments"},"New SBit Command Line Arguments"),(0,o.kt)("p",null,"SBit supports all of the usual command line arguments that SBit Core supports. In addition it adds the following new command line arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-record-log-opcodes")," - This will create a new log file in the SBit data directory (usually ~/.sbit) named vmExecLogs.json, where any EVM LOG opcode is logged along with topics and data that the contract requested be logged. ")),(0,o.kt)("h1",{id:"untested-features"},"Untested features"),(0,o.kt)("p",null,"Some features included in SBit Core have not been tested in it's porting to SBit. This includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Pruning")),(0,o.kt)("h1",{id:"evm-smart-contract-changes-and-limitations"},"EVM Smart Contract Changes and Limitations"),(0,o.kt)("p",null,"Because of SBit's underlying technical differences, there are a few operations that can have different results or limitations when executed in SBit than when compared to Ethereum. "),(0,o.kt)("p",null,"These include the following, though there may be others introduced in the future:  "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The gas schedule for SBit is different from Ethereum. Certain operations are more or less expensive. As such, gas cost estimators designed for Ethereum will not give accurate results for SBit. We will develop our own gas estimating tools as well as fully documenting these differences at a later date. "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"block.coinbase")," or the ",(0,o.kt)("inlineCode",{parentName:"li"},"COINBASE")," opcode currently is not supported and will only return 0. When MPoS is released in the 2nd testnet this should be functioning as expected"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"block.number")," will return the previous block height before this block containing the contract's execution"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"block.difficulty")," will return the previous block's difficulty"),(0,o.kt)("li",{parentName:"ul"},"`block.timestamp will return the previous block's timestamp"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"block.blockhash(n)")," will return 0 when n is the current block height (",(0,o.kt)("inlineCode",{parentName:"li"},"block.number+1"),"), similar to Ethereum"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sender")," will return 0 when the coins spent (",(0,o.kt)("inlineCode",{parentName:"li"},"vin[0].prevout"),") are from a non-standard transaction. It will return the pubkeyhash 160bit address when spent from a pubkey or pubkeyhash transaction"),(0,o.kt)("li",{parentName:"ul"},"Coins can be sent to either contracts or pubkeyhash addresses. When coins are sent to a non-existent contract address, the coins will automatically be sent to a pubkeyhash address instead."),(0,o.kt)("li",{parentName:"ul"},"Only 1000 vouts can be generated from a single contract execution. Sending coins to the same contract multiple times results in a single vout being created, so the limitation is effectively that coins can only be sent to up to 1000 unique contract or pubkeyhash addresses, including balance changes between contracts. If this limit is exceeded, an Out Of Gas exception is generated and all state changes are reverted. "),(0,o.kt)("li",{parentName:"ul"},"Contract executions can not happen within coinbase or coinstake transactions")))}p.isMDXComponent=!0}}]);