"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[6160],{3905:function(f,e,t){t.d(e,{Zo:function(){return l},kt:function(){return u}});var n=t(7294);function a(f,e,t){return e in f?Object.defineProperty(f,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):f[e]=t,f}function i(f,e){var t=Object.keys(f);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(f);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(f,e).enumerable}))),t.push.apply(t,n)}return t}function r(f){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(f,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(f,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(f,e,Object.getOwnPropertyDescriptor(t,e))}))}return f}function s(f,e){if(null==f)return{};var t,n,a=function(f,e){if(null==f)return{};var t,n,a={},i=Object.keys(f);for(n=0;n<i.length;n++)t=i[n],e.indexOf(t)>=0||(a[t]=f[t]);return a}(f,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(f);for(n=0;n<i.length;n++)t=i[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(f,t)&&(a[t]=f[t])}return a}var o=n.createContext({}),c=function(f){var e=n.useContext(o),t=e;return f&&(t="function"==typeof f?f(e):r(r({},e),f)),t},l=function(f){var e=c(f.components);return n.createElement(o.Provider,{value:e},f.children)},d={inlineCode:"code",wrapper:function(f){var e=f.children;return n.createElement(n.Fragment,{},e)}},b=n.forwardRef((function(f,e){var t=f.components,a=f.mdxType,i=f.originalType,o=f.parentName,l=s(f,["components","mdxType","originalType","parentName"]),b=c(t),u=a,p=b["".concat(o,".").concat(u)]||b[u]||d[u]||i;return t?n.createElement(p,r(r({ref:e},l),{},{components:t})):n.createElement(p,r({ref:e},l))}));function u(f,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof f||a){var i=t.length,r=new Array(i);r[0]=b;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=f,s.mdxType="string"==typeof f?f:a,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},4218:function(f,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var n=t(7462),a=t(3366),i=(t(7294),t(3905)),r=["components"],s={title:"Raw SRC20 Transaction implementation",description:"Raw SRC20 Transaction implementation guide",keywords:["sbit","smart contract","src20","ethereum"],sidebar_position:6},o=void 0,c={unversionedId:"Smart-Contract/Raw-SRC20-Transaction-implementation-guide",id:"Smart-Contract/Raw-SRC20-Transaction-implementation-guide",title:"Raw SRC20 Transaction implementation",description:"Raw SRC20 Transaction implementation guide",source:"@site/docs/Smart-Contract/Raw-SRC20-Transaction-implementation-guide.md",sourceDirName:"Smart-Contract",slug:"/Smart-Contract/Raw-SRC20-Transaction-implementation-guide",permalink:"/sbit.dev/docs/Smart-Contract/Raw-SRC20-Transaction-implementation-guide",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Raw SRC20 Transaction implementation",description:"Raw SRC20 Transaction implementation guide",keywords:["sbit","smart contract","src20","ethereum"],sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"SRC20 Integration",permalink:"/sbit.dev/docs/Smart-Contract/SRC20-integration"},next:{title:"Sbitcore-Lib",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Sbit&#39;s SRC20 standard",id:"sbits-src20-standard",level:3},{value:"Calldata for SRC20 calls",id:"calldata-for-src20-calls",level:3},{value:"Example of transfer calldata",id:"example-of-transfer-calldata",level:3},{value:"Sbitd RPC",id:"sbitd-rpc",level:2},{value:"Examples of SRC20 contract execution",id:"examples-of-src20-contract-execution",level:2},{value:"Setting up a regtest sbitd node and deploying a test SRC20 contract.",id:"setting-up-a-regtest-sbitd-node-and-deploying-a-test-src20-contract",level:3},{value:"Checking balances by calling &quot;balanceOf(address)&quot;",id:"checking-balances-by-calling-balanceofaddress",level:3},{value:"Checking the constants of a SRC20 contract (decimals, name, standard, totalSupply, symbol)",id:"checking-the-constants-of-a-src20-contract-decimals-name-standard-totalsupply-symbol",level:3},{value:"Watching for new Transfer events using sbitd",id:"watching-for-new-transfer-events-using-sbitd",level:3},{value:"Example of SRC20 transfer using an online sbitd node for signing",id:"example-of-src20-transfer-using-an-online-sbitd-node-for-signing",level:3},{value:"In depth on Sbit transactions",id:"in-depth-on-sbit-transactions",level:3},{value:"OP_CALL",id:"op_call",level:3},{value:"Transaction Signing",id:"transaction-signing",level:3},{value:"Example of a raw SRC20 transfer using a SbitJS library",id:"example-of-a-raw-src20-transfer-using-a-sbitjs-library",level:2},{value:"Notes",id:"notes",level:2},{value:"Appendix",id:"appendix",level:2},{value:"SRC20 Function signatures",id:"src20-function-signatures",level:3}],b={toc:d};function u(f){var e=f.components,t=(0,a.Z)(f,r);return(0,i.kt)("wrapper",(0,n.Z)({},b,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The intended audience for this document is developers who need to build transactions that interact with SRC20 tokens. This document consists of two parts. The first part describes how to execute SRC20 methods and watching for events by using various RPC calls on a fully online sbitd node. The second part describes how to create SRC20 transactions without using sbitd but rather using sbitjs library to achieve the same functionality. The document assumes the reader is familiar with raw Bitcoin transactions as well as the SRC20 standard and the ABI of Ethereum."),(0,i.kt)("h3",{id:"sbits-src20-standard"},"Sbit's SRC20 standard"),(0,i.kt)("p",null,"Sbit's SRC20 standard is virtually identical to Ethereum's ERC20 standard. A SRC20 token contract in Sbit typically would use the same template solidity contract as an ERC20 token. The only major exception being that Sbit's SRC20 tokens typically use 8 decimal points instead of 18 in Ethereum. "),(0,i.kt)("h3",{id:"calldata-for-src20-calls"},"Calldata for SRC20 calls"),(0,i.kt)("p",null,"Calldata in OP_CALL scripts must be encoded according to the rules of the Ethereum ABI, e.g. the calldata is typically prefixed by the 4-byte function identifier. Since the word size is 256 bits, each value should be padded to 32 bytes."),(0,i.kt)("h3",{id:"example-of-transfer-calldata"},"Example of transfer calldata"),(0,i.kt)("p",null,'If we want to transfer 1.1 tokens from an address we control to the address "sL1ah15xwmxLL75TBxfwiXpoovn6dKV72h", we first set the 4 byte prefix calldata to the transfer(address,uint256) function ("a9059cbb"). Next, we translate the receiver address to its 20-byte representation in hex: "1ae4b1d517dc7d62cec8739aa3a5a8fa10c9260d" (this can be done by using the ',(0,i.kt)("inlineCode",{parentName:"p"},"gethexaddress"),' RPC. After this, we should encode the number of tokens we wish to transfer. This value should be multiplied by the number of decimals of the SRC20 contract. Assuming that the contract we want to call uses 8 decimals, we would therefore encode this value as 68e7780 (1.1*10^8). Next, we left pad the receiver and amount with zeroes to 32 bytes and concatenate the arguments. We would therefore have the calldata: "a9059cbb 0000000000000000000000001ae4b1d517dc7d62cec8739aa3a5a8fa10c9260d 00000000000000000000000000000000000000000000000000000000068e7780".'),(0,i.kt)("h2",{id:"sbitd-rpc"},"Sbitd RPC"),(0,i.kt)("p",null,"Sbitd uses the same style of RPC interface as bitcoind. Most of the RPCs available to bitcoind are available in sbitd, as well as a few Sbit specific ones. Below follows a description of a few RPCs that are useful when creating or watching SRC20 token transactions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"waitforlogs")," - Used for listening for new events, e.g., in the context of SRC20 tokens it can be used to listen for new Transfer() events."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"createrawtransaction")," - Same functionality as the Sbitd equivalent with the addition of supporting OP_CALL transactions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"gettransactionreceipt")," - Used to get a transaction receipt that provides information of any events emitted and the execution state of a transaction (e.g., gas used and whether an exception was triggered)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"callcontract")," - Used to perform a read-only execution of a contract. Can be used to, for example, execute balanceOf() or decimals() methods of a SRC20 contract."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sendtocontract")," - Used to create and sign a contract transaction that is broadcast to the network. Can for example be used to execute the transfer() or approve() methods of a SRC20 contract."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"gethexaddress/fromhexaddress")," - Used convert Sbit's bitcoin-style base58 addresses to and from their 20-byte representation in hex.")),(0,i.kt)("h2",{id:"examples-of-src20-contract-execution"},"Examples of SRC20 contract execution"),(0,i.kt)("p",null,"Below follows several examples executing the various functions of a SRC20 contract. These examples are run against a sbitd node running in regtest mode. You can run these examples against a testnet or mainnet node by changing the -regtest argument to -testnet or -mainnet. These examples depend on jq, python3, sbitd, and sbit-cli being installed on the target system."),(0,i.kt)("h3",{id:"setting-up-a-regtest-sbitd-node-and-deploying-a-test-src20-contract"},"Setting up a regtest sbitd node and deploying a test SRC20 contract."),(0,i.kt)("p",null,"To run these examples, we set up a regtest sbitd node, generate some blocks and deploy a SRC20 contract below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'SRC20_SENDER_PRIVKEY="cVNrcCHX5q318dDkpMFoLD1ack7TybxEjFB44xCsv5sW35kM7QuE"\nSRC20_SENDER="sauZFnmbNBNuY2ujQateDwzvL6zoxBiY3H"\nSRC20_EXAMPLE_CONTRACT_BIN="6080604052600860ff16600a620000179190620000e0565b633b9aca006200002891906200021d565b6000553480156200003857600080fd5b50600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620002c4565b6000808291508390505b6001851115620000d757808604811115620000af57620000ae62000288565b5b6001851615620000bf5780820291505b8081029050620000cf85620002b7565b94506200008f565b94509492505050565b6000620000ed826200027e565b9150620000fa836200027e565b9250620001297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000131565b905092915050565b60008262000143576001905062000216565b8162000153576000905062000216565b81600181146200016c57600281146200017757620001ad565b600191505062000216565b60ff8411156200018c576200018b62000288565b5b8360020a915084821115620001a657620001a562000288565b5b5062000216565b5060208310610133831016604e8410600b8410161715620001e75782820a905083811115620001e157620001e062000288565b5b62000216565b620001f6848484600162000085565b9250905081840481111562000210576200020f62000288565b5b81810290505b9392505050565b60006200022a826200027e565b915062000237836200027e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000273576200027262000288565b5b828202905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b610f5380620002d46000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80635a3b7e42116100665780635a3b7e421461015d57806370a082311461017b57806395d89b41146101ab578063a9059cbb146101c9578063dd62ed3e146101f95761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610229565b6040516100b89190610ce0565b60405180910390f35b6100db60048036038101906100d69190610c00565b610262565b6040516100e89190610cc5565b60405180910390f35b6100f961045a565b6040516101069190610d22565b60405180910390f35b61012960048036038101906101249190610bb1565b610460565b6040516101369190610cc5565b60405180910390f35b6101476107d4565b6040516101549190610d3d565b60405180910390f35b6101656107d9565b6040516101729190610ce0565b60405180910390f35b61019560048036038101906101909190610b4c565b610812565b6040516101a29190610d22565b60405180910390f35b6101b361082a565b6040516101c09190610ce0565b60405180910390f35b6101e360048036038101906101de9190610c00565b610863565b6040516101f09190610cc5565b60405180910390f35b610213600480360381019061020e9190610b75565b610a5e565b6040516102209190610d22565b60405180910390f35b6040518060400160405280600881526020017f515243205445535400000000000000000000000000000000000000000000000081525081565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cc90610d02565b60405180910390fd5b600083148061036057506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b61036957600080fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516104479190610d22565b60405180910390a3600191505092915050565b60005481565b600083600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca90610d02565b60405180910390fd5b83600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b90610d02565b60405180910390fd5b6105ca600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610a83565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610693600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610a83565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061071f600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610ad0565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516107bf9190610d22565b60405180910390a36001925050509392505050565b600881565b6040518060400160405280600981526020017f546f6b656e20302e31000000000000000000000000000000000000000000000081525081565b60016020528060005260406000206000915090505481565b6040518060400160405280600381526020017f515443000000000000000000000000000000000000000000000000000000000081525081565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cd90610d02565b60405180910390fd5b61091f600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610a83565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109ab600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610ad0565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610a4b9190610d22565b60405180910390a3600191505092915050565b6002602052816000526040600020602052806000526040600020600091509150505481565b600081831015610abc577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b8183610ac89190610dca565b905092915050565b6000808284610adf9190610d74565b905083811015610b18577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b8091505092915050565b600081359050610b3181610eef565b92915050565b600081359050610b4681610f06565b92915050565b600060208284031215610b5e57600080fd5b6000610b6c84828501610b22565b91505092915050565b60008060408385031215610b8857600080fd5b6000610b9685828601610b22565b9250506020610ba785828601610b22565b9150509250929050565b600080600060608486031215610bc657600080fd5b6000610bd486828701610b22565b9350506020610be586828701610b22565b9250506040610bf686828701610b37565b9150509250925092565b60008060408385031215610c1357600080fd5b6000610c2185828601610b22565b9250506020610c3285828601610b37565b9150509250929050565b610c4581610e10565b82525050565b6000610c5682610d58565b610c608185610d63565b9350610c70818560208601610e53565b610c7981610eb5565b840191505092915050565b6000610c91600f83610d63565b9150610c9c82610ec6565b602082019050919050565b610cb081610e3c565b82525050565b610cbf81610e46565b82525050565b6000602082019050610cda6000830184610c3c565b92915050565b60006020820190508181036000830152610cfa8184610c4b565b905092915050565b60006020820190508181036000830152610d1b81610c84565b9050919050565b6000602082019050610d376000830184610ca7565b92915050565b6000602082019050610d526000830184610cb6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610d7f82610e3c565b9150610d8a83610e3c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dbf57610dbe610e86565b5b828201905092915050565b6000610dd582610e3c565b9150610de083610e3c565b925082821015610df357610df2610e86565b5b828203905092915050565b6000610e0982610e1c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610e71578082015181840152602081019050610e56565b83811115610e80576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f41646472657373206973204e554c4c0000000000000000000000000000000000600082015250565b610ef881610dfe565b8114610f0357600080fd5b50565b610f0f81610e3c565b8114610f1a57600080fd5b5056fea264697066735822122015838477bf1095385aa7e44f2baf5c344b6d05f0f9a68899faa0749392c719ab64736f6c63430008020033"\n\nsbitd -regtest -logevents -daemon -txindex\nsleep 1\nsbit-cli -regtest importprivkey $SRC20_SENDER_PRIVKEY\nsbit-cli -regtest generatetoaddress 2500 $SRC20_SENDER\nSRC20_CONTRACT=$(sbit-cli -regtest createcontract $SRC20_EXAMPLE_CONTRACT_BIN | jq -r ".address")\nsbit-cli -regtest generatetoaddress 1 $SRC20_SENDER\necho "Deployed the example SRC20 contract at $SRC20_CONTRACT"\n')),(0,i.kt)("h3",{id:"checking-balances-by-calling-balanceofaddress"},'Checking balances by calling "balanceOf(address)"'),(0,i.kt)("p",null,"To check the current token balance of an address for a SRC20 contract we need to execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"balanceOf")," method of the SRC20 contract. This execution should be performed as a read-only operation, which means we should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"callcontract")," RPC. An example is displayed below of how to check the balance of a particular address. The output is in hex, padded to 32 bytes, and should be divided by the number of ",(0,i.kt)("strong",{parentName:"p"},"decimals")," used in the contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ADDRESS="sauZFnmbNBNuY2ujQateDwzvL6zoxBiY3H"\nADDRESS_HEX=$(sbit-cli -regtest gethexaddress $ADDRESS)\nCALLDATA="70a08231000000000000000000000000$ADDRESS_HEX"\nsbit-cli -regtest callcontract $SRC20_CONTRACT $CALLDATA | jq -r ".executionResult.output" | python3 -c "print(int(input(), 16))")\n')),(0,i.kt)("h3",{id:"checking-the-constants-of-a-src20-contract-decimals-name-standard-totalsupply-symbol"},"Checking the constants of a SRC20 contract (decimals, name, standard, totalSupply, symbol)"),(0,i.kt)("p",null,"To fetch the constants for a SRC20 contract, we need to execute the various methods of the SRC20 contract. These executions should be performed as read-only operations, which means we should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"callcontract")," RPC. An example is displayed below of how to check the various constants of a SRC20 contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'SRC20_DECIMALS=$(sbit-cli -regtest callcontract $SRC20_CONTRACT 313ce567 | jq -r ".executionResult.output" | python3 -c "print(int(input(), 16))")\nSRC20_NAME=$(sbit-cli -regtest callcontract $SRC20_CONTRACT 06fdde03 | jq -r ".executionResult.output" | xxd -r -p)\nSRC20_SYMBOL=$(sbit-cli -regtest callcontract $SRC20_CONTRACT 95d89b41 | jq -r ".executionResult.output" | xxd -r -p)\nSRC20_TOTALSUPPLY=$(sbit-cli -regtest callcontract $SRC20_CONTRACT 18160ddd | jq -r ".executionResult.output" | python3 -c "print(int(input(), 16))")\n\necho "decimals $SRC20_DECIMALS"\necho "name $SRC20_NAME"\necho "symbol $SRC20_SYMBOL"\necho "totalSupply $SRC20_TOTALSUPPLY"\n')),(0,i.kt)("h3",{id:"watching-for-new-transfer-events-using-sbitd"},"Watching for new Transfer events using sbitd"),(0,i.kt)("p",null,"The example below will watch for new Transfer events emitted by a SRC20 contract indefinitely. The example does this by continuously calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"waitforlogs")," RPC. The ",(0,i.kt)("inlineCode",{parentName:"p"},"waitforlogs")," RPC will block until new events matching the call's arguments are seen. When it has seen events emitted by the contract it returns a list of entries that we can iterate through to fetch the details of one or more events that were emitted. In the example below we watch for all transfer events emitted by a contract. Note: the sbitd node this runs against must be started with the ",(0,i.kt)("inlineCode",{parentName:"p"},"-logevents")," argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# This would be run against a live node listening for new contract events forever\n# Note that sbitd should be started with `-logevents` to enable event logging\nMIN_CONFIRMATIONS=20\nLAST_BLOCK=$(sbit-cli -regtest getblockcount)\nTOPIC="ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"\nwhile true\ndo\n    RESULTS=$(sbit-cli -regtest waitforlogs $LAST_BLOCK null "{\\"addresses\\": [\\"$SRC20_CONTRACT\\"], \\"topics\\": [\\"$TOPIC\\"]}" $MIN_CONFIRMATIONS)\n    # Extract the events from the $RESULTS from .entries[topics]\n    for ENTRY in $(echo $RESULTS | jq -c ".entries[]")\n    do\n        TXID=$(echo $ENTRY | jq -r ".transactionHash")\n        SENDER_HEX=$(echo $ENTRY | jq -r ".topics[1]")\n        RECEIVER_HEX=$(echo $ENTRY | jq -r ".topics[2]")\n        AMOUNT_HEX=$(echo $ENTRY | jq -r ".data")\n\n        SENDER_ADDRESS=$(sbit-cli -regtest fromhexaddress ${SENDER_HEX:24:40})\n        RECEIVER_ADDRESS=$(sbit-cli -regtest fromhexaddress ${RECEIVER_HEX:24:40})\n        AMOUNT_TRANSFERRED=$(python3 -c "print(0x$AMOUNT_HEX)")\n        echo "TXID: $TXID"\n        echo "SENDER: $SENDER_ADDRESS"\n        echo "RECEIVER: $RECEIVER_ADDRESS"\n        echo "AMOUNT: $AMOUNT_TRANSFERRED"\n        echo ""\n    done\n    LAST_BLOCK=$(echo $RESULTS | jq -r ".nextblock")\ndone\n')),(0,i.kt)("h3",{id:"example-of-src20-transfer-using-an-online-sbitd-node-for-signing"},"Example of SRC20 transfer using an online sbitd node for signing"),(0,i.kt)("p",null,"The easiest way to do a transfer between different addresses for a SRC20 contract is to simply use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sendtocontract")," RPC. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'SRC20_SENDER="sauZFnmbNBNuY2ujQateDwzvL6zoxBiY3H"\nSRC20_RECEIVER="sL1ah15xwmxLL75TBxfwiXpoovn6dKV72h"\nSRC20_TOKEN_TRANSFER_VALUE=1.1\nSRC20_DECIMALS=8\n\n# Adjust the tokens to transfer by the decimals and store the result in hex padded to 32 bytes\nSRC20_TOKEN_TRANSFER_VALUE_PADDED_HEX=$(python3 -c "print(hex(int(${SRC20_TOKEN_TRANSFER_VALUE} * 10**0x${SRC20_DECIMALS}))[2:].zfill(64))")\n\n# Convert the base58 receiver address into its 20-byte hex-encoded equivalents\nSRC20_RECEIVER_HEX=$(sbit-cli -regtest gethexaddress $SRC20_RECEIVER)\n\n# Pad the receiver hex to 32 bytes\nSRC20_RECEIVER_PADDED_HEX="000000000000000000000000${SRC20_RECEIVER_HEX}"\n\n# The function hash of "transfer(address,uint256)" concatenated with the receiver address and number of tokens to transfer\nCALLDATA="a9059cbb${SRC20_RECEIVER_PADDED_HEX}${SRC20_TOKEN_TRANSFER_VALUE_PADDED_HEX}"\n\n# Create, sign and broadcast the transfer\nsbit-cli -regtest sendtocontract $SRC20_CONTRACT $CALLDATA 0 100000 0.0000004 $SRC20_SENDER\n')),(0,i.kt)("h3",{id:"in-depth-on-sbit-transactions"},"In depth on Sbit transactions"),(0,i.kt)("p",null,"Sbit uses Bitcoin-style transactions. The transaction format is basically identical to Bitcoin transactions with a few modifications to the Sbit scripting engine. Sbit introduces 4 new opcodes in the scripting engine to allow for interaction with the Sbit EVM. The only relevant opcode for this document is OP_CALL (0xc2). "),(0,i.kt)("h3",{id:"op_call"},"OP_CALL"),(0,i.kt)("p",null,"The OP_CALL opcode allows transaction output scriptPubKeys to be used to execute smart contracts in the Sbit EVM. The format for an OP_CALL scripts is the following:"),(0,i.kt)("p",null,"version gaslimit gasprice calldata contractaddress OP_CALL"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"field name"),(0,i.kt)("th",{parentName:"tr",align:null},"size in bytes"),(0,i.kt)("th",{parentName:"tr",align:null},"typical value"),(0,i.kt)("th",{parentName:"tr",align:null},"description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"version"),(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"0x04"),(0,i.kt)("td",{parentName:"tr",align:null},"The version of the script, will always be 0x04 for purposes of this document.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"gaslimit"),(0,i.kt)("td",{parentName:"tr",align:null},"variable"),(0,i.kt)("td",{parentName:"tr",align:null},"200000"),(0,i.kt)("td",{parentName:"tr",align:null},"The gas limit of the EVM execution, should be the same as the same limit in Ethereum for the purposes of this document.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"gasprice"),(0,i.kt)("td",{parentName:"tr",align:null},"variable"),(0,i.kt)("td",{parentName:"tr",align:null},"40"),(0,i.kt)("td",{parentName:"tr",align:null},"The price per unit of gas, should typically be set to 40 as that is the current minimum limit for the gas price. Identical to the same concept in Ethereum.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"calldata"),(0,i.kt)("td",{parentName:"tr",align:null},"variable"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"The ABI encoded calldata, the same as in Ethereum, i.e., typically a 4-byte function signature followed by the ABI encoded function arguments. Identical to the same concept in Ethereum.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"contractaddress"),(0,i.kt)("td",{parentName:"tr",align:null},"20"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"The address of the contract you wish to execute.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"OP_CALL"),(0,i.kt)("td",{parentName:"tr",align:null},"opcode"),(0,i.kt)("td",{parentName:"tr",align:null},"0xc2"),(0,i.kt)("td",{parentName:"tr",align:null},"The OP_CALL opcode.")))),(0,i.kt)("p",null,'The script must follow the same rules for encoding as a typical bitcoin script, e.g., each value that is not an opcode will be prefixed with a push length unless it is a "smallint" (typically any bitcoin library used for creating a transaction will handle these details). Below is a transaction that contains an output that uses an OP_CALL scriptPubKey to execute a contract in Sbit.'),(0,i.kt)("h3",{id:"transaction-signing"},"Transaction Signing"),(0,i.kt)("p",null,"The process of signing a raw transaction in Sbit is identical to signing a Bitcoin transaction. Typically, a raw transaction is signed using the ",(0,i.kt)("inlineCode",{parentName:"p"},"signrawtransactionwithkey")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"signrawtransactionwithwallet")," in sbitd. Also, any Bitcoin library should be possible to be used to sign raw Sbit transactions."),(0,i.kt)("h2",{id:"example-of-a-raw-src20-transfer-using-a-sbitjs-library"},"Example of a raw SRC20 transfer using a SbitJS library"),(0,i.kt)("p",null,"Described below is the process of creating and signing a raw SRC20 transfer transaction using the Sbit-js library."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var bitcoin = require(\'sbitjs-lib\');\nvar testnet = bitcoin.networks.testnet;\n\n/*\n    Example of transaction that creates and signs a SRC20 transfer transaction for Sbit using the Sbit-js library.\n    The transaction format is nearly identical to that of Bitcoin, except for the OP_CALL output.\n    Note, since OP_CALL is a Sbit specific opcode, it needs to be hardcoded as 0xc2\n    The script below will assume that the input tx being spent is a P2PKH output.\n*/\n\n// The input tx hash and vout of the utxo we are going to spend\nconst TXINHASH = "e06d87ecfc8563e899118de9b9fc9deafc9aba41f2c420075bbf2c610fe160fc";\nconst TXINVOUT = 0;\n// The WIF key of the input key. Sbit uses the same WIF format and prefx as Bitcoin\nconst TXINKEY = bitcoin.ECPair.fromWIF(\'cVNrcCHX5q318dDkpMFoLD1ack7TybxEjFB44xCsv5sW35kM7QuE\', testnet);\n// The value of the utxo, Sbit uses the same number of decimals as Bitcoin (8 decimals)\nconst TXINVALUE = 2000000000000;\n\n// The contract address we wish to call\nconst SRC20_CONTRACT = "a20ee8612b8d338c55dcd03e65544339efd7cebc";\n\n// The receiver address. Note that the SENDER is the address of the UTXO we are spending.\nconst SRC20_RECEIVER="sauZFnmbNBNuY2ujQateDwzvL6zoxBiY3H";\n\n// The number of tokens we want to transfer\nconst SRC20_TOKEN_TRANSFER_VALUE=1n;\n\n// The number of decimals defined by the SRC20 contract.\nconst SRC20_DECIMALS=8n;\n\n// The minimum gas price is 0.00000040 Sbit, so we set the gas price to that here\nconst GASPRICE = 40;\n// The gas schedule of Sbit is virtually identical to that of Ethereum, so a value that works for Ethereum will typically work for Sbit\nconst GASLIMIT = 100000;\n// The OP_CALL (0xc2) opcode is Sbit specific and must therefore be hardcoded.\nconst OP_CALL = 0xc2;\n\n\nvar src20_receiver_hex=bitcoin.address.fromBase58Check(SRC20_RECEIVER)[\'hash\'].toString(\'hex\')\nvar src20_token_transfer_value_adjusted=SRC20_TOKEN_TRANSFER_VALUE * (10n**SRC20_DECIMALS);\nvar src20_token_transfer_value_adjusted_hex=("0".repeat(64) + src20_token_transfer_value_adjusted.toString(16)).slice(-64)\n\n// The calldata, should be ABI encoded according the Ethereum ABI specification.\nvar calldata = "a9059cbb000000000000000000000000"+src20_receiver_hex+src20_token_transfer_value_adjusted_hex;\n\n// The input value minus the gas cost/txfee\nvar changeValue = TXINVALUE-(GASPRICE*GASLIMIT);\n\n// The opcall scriptPubKey on the form of "version gaslimit gasprice calldata contractaddress OP_CALL"\nvar contractCallScript = bitcoin.script.compile([\n    bitcoin.script.number.encode(4), // version\n    bitcoin.script.number.encode(GASLIMIT), // gas limit\n    bitcoin.script.number.encode(GASPRICE), // gas price\n    new Buffer(calldata, "hex"),  // The ABI encoded calldata\n    new Buffer(SRC20_CONTRACT, "hex"), // the contract\'s address\n    OP_CALL // OP_CALL opcode\n]);\n\n// A normal P2PKH change output\nvar changeScript = bitcoin.script.compile([\n    bitcoin.opcodes.OP_DUP,\n    bitcoin.opcodes.OP_HASH160,\n    new Buffer(bitcoin.crypto.hash160(TXINKEY.publicKey)),\n    bitcoin.opcodes.OP_EQUALVERIFY,\n    bitcoin.opcodes.OP_CHECKSIG\n]);\n\nvar txb = new bitcoin.TransactionBuilder(testnet);\ntxb.addInput(TXINHASH, TXINVOUT);\ntxb.addOutput(contractCallScript, 0);\ntxb.addOutput(changeScript, changeValue);\ntxb.sign(0, TXINKEY);\nvar tx = txb.build();\nconsole.log(tx.toHex());\n')),(0,i.kt)("h2",{id:"notes"},"Notes"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The first input to the transaction must be the sender (unless you use OP_SENDER style scripts, which is not covered in this document)"))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Any Bitcoin library should be possible to use for signing, as long as it is possible to manually encode the OP_CALL opcode in the script."))),(0,i.kt)("h2",{id:"appendix"},"Appendix"),(0,i.kt)("h3",{id:"src20-function-signatures"},"SRC20 Function signatures"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n06fdde03: name()\n95d89b41: symbol()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\n")),(0,i.kt)("h1",{id:""}))}u.isMDXComponent=!0}}]);