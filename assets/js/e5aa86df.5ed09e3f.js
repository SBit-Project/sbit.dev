"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[5857],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1098:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"SBIT Docker Container",description:"SBIT Docker Container",keywords:["sbit","bitcoin","blockchain","ethereum","docker","network"],sidebar_position:1},l=void 0,c={unversionedId:"Smart-Contract/Running-SBit/sbit-docker",id:"Smart-Contract/Running-SBit/sbit-docker",title:"SBIT Docker Container",description:"SBIT Docker Container",source:"@site/docs/Smart-Contract/Running-SBit/sbit-docker.md",sourceDirName:"Smart-Contract/Running-SBit",slug:"/Smart-Contract/Running-SBit/sbit-docker",permalink:"/sbit.dev/docs/Smart-Contract/Running-SBit/sbit-docker",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"SBIT Docker Container",description:"SBIT Docker Container",keywords:["sbit","bitcoin","blockchain","ethereum","docker","network"],sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/sbit.dev/docs/Smart-Contract/"},next:{title:"UTXOs & Balances",permalink:"/sbit.dev/docs/Smart-Contract/Running-SBit/utxos-balances"}},d={},p=[{value:"Running regtest Mode",id:"running-regtest-mode",level:2},{value:"Running Testnet",id:"running-testnet",level:4},{value:"Shell Access Into The Container",id:"shell-access-into-the-container",level:2}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"For this book we have built a docker image to gaurantee a consistent environment, so it's easier to follow the examples. The docker container includes ",(0,o.kt)("inlineCode",{parentName:"p"},"sbitd"),", as well as all the tools you'll need for the rest of this book."),(0,o.kt)("p",null,"Download the latest container image:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull sbitproject/sbitportal:latest\n")),(0,o.kt)("h2",{id:"running-regtest-mode"},"Running regtest Mode"),(0,o.kt)("p",null,"For development and testing purposes it is most convenient to run a local blockchain, so the transactions you make are processed cheaply on your own computer. You can run a local blockchain easily using ",(0,o.kt)("inlineCode",{parentName:"p"},"sbitd"),"'s builtin ",(0,o.kt)("inlineCode",{parentName:"p"},"regtest"),' mode (short for "regression test").'),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"regtest")," is similar to Ethereum's ",(0,o.kt)("inlineCode",{parentName:"p"},"testrpc"),", but different in a few ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The blockchain state is stored on disk, and persists across sbitd restarts."),(0,o.kt)("li",{parentName:"ul"},"The blocks are not mined immediately, but at a semi-regular intervals."),(0,o.kt)("li",{parentName:"ul"},"Need to manually seed the chain with 600 blocks.")),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"sbitproject/sbitportal")," docker image will start ",(0,o.kt)("inlineCode",{parentName:"p"},"sbitd")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"regtest")," mode:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -it --rm \\\n  --name myapp \\\n  -v `pwd`:/dapp \\\n  -p 9899:9899 \\\n  -p 9888:9888 \\\n  -p 22002:22002 \\\n  sbitproject/sbitportal\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--name")," Name of the container. You can change this to whatever."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-it")," Allocates a terminal device for the container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--rm")," Remove the container immediately after exit."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-v")," Maps the current directory as ",(0,o.kt)("inlineCode",{parentName:"li"},"/dapp")," inside the container."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-p")," Expose container ports for access from the host OS.")),(0,o.kt)("p",null,"You should see output like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-log"},'02:46:17 portal | Starting portal on port 5001\n02:46:17  sbitd | Starting sbitd on port 5000\n02:46:17 portal | time="2017-12-13T02:46:17Z" level=info msg="DApp service listening 0.0.0.0:9888"\n02:46:17 portal | time="2017-12-13T02:46:17Z" level=info msg="Auth service listening 0.0.0.0:9899"\n02:46:17  sbitd | 2017-12-13 02:46:17\n02:46:17  sbitd | 2017-12-13 02:46:17 Sbit version v0.14.10.0-101922f-dirty\n02:46:17  sbitd | 2017-12-13 02:46:17 InitParameterInteraction: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\n02:46:17  sbitd | 2017-12-13 02:46:17 Validating signatures for all blocks.\n02:46:17  sbitd | 2017-12-13 02:46:17\n02:46:17  sbitd | 2017-12-13 02:46:17 Default data directory /root/.sbit\n02:46:17  sbitd | 2017-12-13 02:46:17 Using data directory /dapp/.sbit/regtest\n...\n02:46:22  sbitd | 2017-12-13 02:46:22 ERROR: Read: Failed to open file /dapp/.sbit/regtest/banlist.dat\n02:46:22  sbitd | 2017-12-13 02:46:22 Invalid or missing banlist.dat; recreating\n02:46:22  sbitd | 2017-12-13 02:46:22 init message: Starting network threads...\n02:46:22  sbitd | 2017-12-13 02:46:22 net thread start\n02:46:22  sbitd | 2017-12-13 02:46:22 addcon thread start\n02:46:22  sbitd | 2017-12-13 02:46:22 init message: Done loading\n02:46:22  sbitd | 2017-12-13 02:46:22 opencon thread start\n02:46:22  sbitd | 2017-12-13 02:46:22 msghand thread start\n02:46:22  sbitd | 2017-12-13 02:46:22 dnsseed thread start\n02:46:22  sbitd | 2017-12-13 02:46:22 Loading addresses from DNS seeds (could take a while)\n02:46:22  sbitd | 2017-12-13 02:46:22 0 addresses found from DNS seeds\n02:46:22  sbitd | 2017-12-13 02:46:22 dnsseed thread exit\n')),(0,o.kt)("p",null,"To terminate the container, hit ",(0,o.kt)("inlineCode",{parentName:"p"},"ctrl-c")," in the terminal, and you should see some more cleanup logs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-log"},"02:48:06  sbitd | 2017-12-13 02:48:06 tor: Thread interrupt\n02:48:06  sbitd | 2017-12-13 02:48:06 torcontrol thread exit\n02:48:06  sbitd | 2017-12-13 02:48:06 addcon thread exit\n02:48:06  sbitd | 2017-12-13 02:48:06 opencon thread exit\n02:48:06  sbitd | 2017-12-13 02:48:06 scheduler thread interrupt\n02:48:06  sbitd | 2017-12-13 02:48:06 Shutdown: In progress...\n02:48:06  sbitd | 2017-12-13 02:48:06 msghand thread exit\n02:48:06  sbitd | 2017-12-13 02:48:06 net thread exit\n02:48:06  sbitd | 2017-12-13 02:48:06 Dumped mempool: 0.001657s to copy, 0.00729s to dump\n02:48:06  sbitd | 2017-12-13 02:48:06 ...  02:48:06.292|  Closing state DB\n02:48:06  sbitd | 2017-12-13 02:48:06 ...  02:48:06.306|  Closing state DB\n02:48:06  sbitd | 2017-12-13 02:48:06 Shutdown: done\n02:48:06  sbitd | Terminating sbitd\n")),(0,o.kt)("p",null,"You should see that the blockchain database for ",(0,o.kt)("inlineCode",{parentName:"p"},"regtest")," had been created in your local project directory at the path ",(0,o.kt)("inlineCode",{parentName:"p"},".sbit/regtest"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"ls .sbit/regtest\n\nbanlist.dat       chainstate        debug.log         mempool.dat       stateSbit         wallet.dat\nblocks            db.log            fee_estimates.dat peers.dat         vm.log\n")),(0,o.kt)("p",null,"Let's restart the container, and ",(0,o.kt)("inlineCode",{parentName:"p"},"sbitd")," should reuse the blockchain database saved in ",(0,o.kt)("inlineCode",{parentName:"p"},".sbit"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -it --rm \\\n  --name myapp \\\n  -v `pwd`:/dapp \\\n  -p 9899:9899 \\\n  -p 9888:9888 \\\n  -p 22002:22002 \\\n  sbitproject/sbitportal\n")),(0,o.kt)("h4",{id:"running-testnet"},"Running Testnet"),(0,o.kt)("p",null,"You can run on the test network by setting the SBIT_NETWORK environment variable inside the container, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'docker run -it --rm \\\n  --name myapp \\\n  -e "SBIT_NETWORK=testnet" \\\n  -v `pwd`:/dapp \\\n  -p 9899:9899 \\\n  -p 9888:9888 \\\n  -p 22002:22002 \\\n  -p 22301:22301 \\\n  sbitproject/sbitportal\n')),(0,o.kt)("h2",{id:"shell-access-into-the-container"},"Shell Access Into The Container"),(0,o.kt)("p",null,"Let's verify that the container is running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker ps\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'CONTAINER ID            IMAGE               COMMAND                  CREATED              STATUS              PORTS                                                                      NAMES\n72d7b2c22f97        sbitproject/sbitportal   "/bin/sh -c \'mkdir..."   About a minute ago   Up About a minute   0.0.0.0:9888->9888/tcp, 0.0.0.0:9899->9899/tcp, 0.0.0.0:22302->22302/tcp   myapp\n')),(0,o.kt)("p",null,"The container's name is ",(0,o.kt)("inlineCode",{parentName:"p"},"myapp"),". We can gain shell access:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec -it myapp sh\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"/dapp")," directory inside the container should be the same as your project directory."),(0,o.kt)("p",null,"Inside the container, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"scli")," command to interact with sbitd. To get some basic info about the blockchain state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'scli getinfo\n\n{\n  "version": 141000,\n  "protocolversion": 70016,\n  "walletversion": 130000,\n  "balance": 0.00000000,\n  "stake": 0.00000000,\n  "blocks": 0,\n  "timeoffset": 0,\n  "connections": 0,\n  "proxy": "",\n  "difficulty": {\n    "proof-of-work": 4.656542373906925e-10,\n    "proof-of-stake": 4.656542373906925e-10\n  },\n  "testnet": false,\n  "moneysupply": 0,\n  "keypoololdest": 1513133181,\n  "keypoolsize": 100,\n  "paytxfee": 0.00000000,\n  "relayfee": 0.00400000,\n  "errors": ""\n}\n')),(0,o.kt)("h1",{id:"new-blocks-on-demand"},"New Blocks On Demand"),(0,o.kt)("p",null,"The chain is initially empty. As we have seen in ",(0,o.kt)("inlineCode",{parentName:"p"},"getinfo"),", there is no block yet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"blocks": 0\n')),(0,o.kt)("p",null,"Furthermore, your initial wallet balance is 0:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"scli getbalance\n\n0.00000000\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"regtest")," mode, you are allowed to mine new blocks for testing purposes. This is useful in two ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Generate enough balance to pay for transactions."),(0,o.kt)("li",{parentName:"ol"},"To confirm transactions quickly instead of waiting for a new block to be mined.")),(0,o.kt)("p",null,"Let's seed the chain with 600 blocks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"scli generate 600\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  // more ...\n  "43e9c190679a4d040d07c6d0d5d34c1d49f7b6b6539ceb87eea76af3ef39eed5",\n  "7d5b6a0e5e76cf18e35ac18d4534155a0fd96201feaefc720118452dd50bcd5b",\n  "70013fa6e01ad527e1f71033ebf59c5233877fcd0fd8233ea032ddaface3cbbc",\n  "6c73fe21f7c7874b550e190dcc69320c13a96f188bfb89ab858bc42adc0a1398",\n  "5b48289b22fbf073f6a345d97968c3b8ee44381e8e10e6f940d31b7355684968",\n  "4f9444d8bd3ece4f6839d7bcfc7f964e95187e2868128681b7bc4cb42d719b41"\n]\n')),(0,o.kt)("p",null,"Now your balance is non-zero:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"scli getbalance\n\n2000000.00000000\n")),(0,o.kt)("p",null,"And number of blocks is about 600ish:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'scli getinfo\n\n"blocks": 603,\n')),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("blockquote",{parentName:"div"},(0,o.kt)("p",{parentName:"blockquote"},'SBIT\'s proof-of-stake reward is unspendable until it "matures" after 500 blocks. By generating 600 blocks, we get 100 matured block rewards, of 20k SBIT each.')))),(0,o.kt)("h1",{id:"summary"},"Summary"),(0,o.kt)("p",null,"In this chapter we have run sbitd in a docker container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -it --rm \\\n  --name myapp \\\n  -v `pwd`:/dapp \\\n  -p 9899:9899 \\\n  -p 9888:9888 \\\n  -p 22002:22002 \\\n  sbitproject/sbitportal\n")),(0,o.kt)("p",null,"To shell into the container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec -it myapp sh\n")),(0,o.kt)("p",null,"Once inside the container, use ",(0,o.kt)("inlineCode",{parentName:"p"},"scli")," to interact with sbitd, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"scli getinfo\n")),(0,o.kt)("p",null,"For a list of available ",(0,o.kt)("inlineCode",{parentName:"p"},"scli")," commands and arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"scli help\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'... more\nlistsinceblock ( "blockhash" target_confirmations include_watchonly)\nlisttransactions ( "account" count skip include_watchonly)\nlistunspent ( minconf maxconf  ["addresses",...] [include_unsafe] )\nlockunspent unlock ([{"txid":"txid","vout":n},...])\nmove "fromaccount" "toaccount" amount ( minconf "comment" )\nremoveprunedfunds "txid"\nreservebalance [<reserve> [amount]]\nsendfrom "fromaccount" "toaddress" amount ( minconf "comment" "comment_to" )\nsendmany "fromaccount" {"address":amount,...} ( minconf "comment" ["address",...] )\nsendmanywithdupes "fromaccount" {"address":amount,...} ( minconf "comment" ["address",...] )\nsendtoaddress "address" amount ( "comment" "comment_to" subtractfeefromamount )\nsendtocontract "contractaddress" "data" (amount gaslimit gasprice senderaddress broadcast)\nsetaccount "address" "account"\nsettxfee amount\nsignmessage "address" "message"\n')))}m.isMDXComponent=!0}}]);