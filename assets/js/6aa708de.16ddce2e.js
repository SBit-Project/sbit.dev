"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[3263],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return b}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(t),b=o,d=m["".concat(c,".").concat(b)]||m[b]||s[b]||i;return t?r.createElement(d,a(a({ref:n},u),{},{components:t})):r.createElement(d,a({ref:n},u))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9145:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return b},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={title:"Benchmarking",description:"Sbit Core Benchmarking framework",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:1},c=void 0,p={unversionedId:"SBit-Core/Development/benchmarking",id:"SBit-Core/Development/benchmarking",title:"Benchmarking",description:"Sbit Core Benchmarking framework",source:"@site/docs/SBit-Core/Development/benchmarking.md",sourceDirName:"SBit-Core/Development",slug:"/SBit-Core/Development/benchmarking",permalink:"/sbit.dev/docs/SBit-Core/Development/benchmarking",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Benchmarking",description:"Sbit Core Benchmarking framework",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Sbit Sparknet Usage and Information",permalink:"/sbit.dev/docs/SBit-Core/Building/sparknet-guide"},next:{title:"Developer Notes",permalink:"/sbit.dev/docs/SBit-Core/Development/developer-notes"}},u={},s=[{value:"Running",id:"running",level:2},{value:"Help",id:"help",level:2},{value:"Notes",id:"notes",level:2}],m={toc:s};function b(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Sbit Core has an internal benchmarking framework, with benchmarks\nfor cryptographic algorithms (e.g. SHA1, SHA256, SHA512, RIPEMD160, Poly1305, ChaCha20), rolling bloom filter, coins selection,\nthread queue, wallet balance."),(0,i.kt)("h2",{id:"running"},"Running"),(0,i.kt)("p",null,"For benchmarks purposes you only need to compile ",(0,i.kt)("inlineCode",{parentName:"p"},"sbit_bench"),". Beware of configuring without ",(0,i.kt)("inlineCode",{parentName:"p"},"--enable-debug")," as this would impact\nbenchmarking by unlatching log printers and lock analysis."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"make -C src sbit_bench\n")),(0,i.kt)("p",null,"After compiling sbit-core, the benchmarks can be run with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src/bench/bench_sbit\n")),(0,i.kt)("p",null,"The output will look similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"|             ns/byte |              byte/s | error % | benchmark\n|--------------------:|--------------------:|--------:|:----------------------------------------------\n|               64.13 |       15,592,356.01 |    0.1% | `Base58CheckEncode`\n|               24.56 |       40,722,672.68 |    0.2% | `Base58Decode`\n...\n")),(0,i.kt)("h2",{id:"help"},"Help"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"src/bench/bench_sbit --help\n")),(0,i.kt)("p",null,"To print options like scaling factor or per-benchmark filter."),(0,i.kt)("h2",{id:"notes"},"Notes"),(0,i.kt)("p",null,"More benchmarks are needed for, in no particular order:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Script Validation"),(0,i.kt)("li",{parentName:"ul"},"Coins database"),(0,i.kt)("li",{parentName:"ul"},"Memory pool"),(0,i.kt)("li",{parentName:"ul"},"Cuckoo Cache"),(0,i.kt)("li",{parentName:"ul"},"P2P throughput")))}b.isMDXComponent=!0}}]);