"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[3842],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return f}});var i=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);r&&(i=i.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function d(e,r){if(null==e)return{};var t,i,n=function(e,r){if(null==e)return{};var t,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=i.createContext({}),c=function(e){var r=i.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},s=function(e){var r=c(e.components);return i.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return i.createElement(i.Fragment,{},r)}},u=i.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(t),f=n,v=u["".concat(l,".").concat(f)]||u[f]||p[f]||a;return t?i.createElement(v,o(o({ref:r},s),{},{components:t})):i.createElement(v,o({ref:r},s))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,o=new Array(a);o[0]=u;var d={};for(var l in r)hasOwnProperty.call(r,l)&&(d[l]=r[l]);d.originalType=e,d.mdxType="string"==typeof e?e:n,o[1]=d;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7145:function(e,r,t){t.r(r),t.d(r,{assets:function(){return s},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return p}});var i=t(7462),n=t(3366),a=(t(7294),t(3905)),o=["components"],d={title:"SBit HDKeys",description:"Create and derive extended public and private keys according to the BIP32 standard for Hierarchical Deterministic (HD) keys.",keywords:["sbit","bitcoin","blockchain","ethereum","sbitcore","tools"],sidebar_position:8},l=void 0,c={unversionedId:"Tools/SBitcore-lib/hierarchical",id:"Tools/SBitcore-lib/hierarchical",title:"SBit HDKeys",description:"Create and derive extended public and private keys according to the BIP32 standard for Hierarchical Deterministic (HD) keys.",source:"@site/docs/Tools/SBitcore-lib/hierarchical.md",sourceDirName:"Tools/SBitcore-lib",slug:"/Tools/SBitcore-lib/hierarchical",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/hierarchical",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"SBit HDKeys",description:"Create and derive extended public and private keys according to the BIP32 standard for Hierarchical Deterministic (HD) keys.",keywords:["sbit","bitcoin","blockchain","ethereum","sbitcore","tools"],sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"SBitcore examples",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/examples"},next:{title:"SBit Networks",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/networks"}},s={},p=[{value:"HDPrivateKey",id:"hdprivatekey",level:2},{value:"HDPublicKey",id:"hdpublickey",level:2},{value:"Deprecation Warning for <code>HDPublicKey.derive()</code> and <code>HDPrivateKey.derive()</code>",id:"deprecation-warning-for-hdpublickeyderive-and-hdprivatekeyderive",level:2}],u={toc:p};function f(e){var r=e.components,t=(0,n.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Create and derive extended public and private keys according to the BIP32 standard for Hierarchical Deterministic (HD) keys."),(0,a.kt)("h2",{id:"hdprivatekey"},"HDPrivateKey"),(0,a.kt)("p",null,"An instance of a ",(0,a.kt)("a",{parentName:"p",href:"privatekey"},"PrivateKey")," that also contains information required to derive child keys."),(0,a.kt)("p",null,"Sample usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var sbitcore = require('sbitcore');\nvar HDPrivateKey = sbitcore.HDPrivateKey;\n\nvar hdPrivateKey = new HDPrivateKey();\nvar retrieved = new HDPrivateKey('xpriv...');\nvar derived = hdPrivateKey.derive(\"m/0'\"); // see deprecation warning for derive\nvar derivedByNumber = hdPrivateKey.derive(1).derive(2, true);\nvar derivedByArgument = hdPrivateKey.derive(\"m/1/2'\");\nassert(derivedByNumber.xprivkey === derivedByArgument.xprivkey);\n\nvar address = derived.privateKey.toAddress();\n\n// obtain HDPublicKey\nvar hdPublicKey = hdPrivateKey.hdPublicKey;\n")),(0,a.kt)("h2",{id:"hdpublickey"},"HDPublicKey"),(0,a.kt)("p",null,"An instance of a PublicKey that can be derived to build extended public keys. Note that hardened paths are not available when deriving an HDPublicKey."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'var hdPrivateKey = new HDPrivateKey();\nvar hdPublicKey = hdPrivateKey.hdPublicKey;\ntry {\n  new HDPublicKey();\n} catch(e) {\n  console.log("Can\'t generate a public key without a private key");\n}\n\nvar address = new Address(hdPublicKey.publicKey, Networks.livenet);\nvar derivedAddress = new Address(hdPublicKey.derive(100).publicKey, Networks.testnet); // see deprecation warning for derive\n')),(0,a.kt)("h2",{id:"deprecation-warning-for-hdpublickeyderive-and-hdprivatekeyderive"},"Deprecation Warning for ",(0,a.kt)("inlineCode",{parentName:"h2"},"HDPublicKey.derive()")," and ",(0,a.kt)("inlineCode",{parentName:"h2"},"HDPrivateKey.derive()")),(0,a.kt)("p",null,"The bug only affected hardened derivations using an extended private key, and did not affect public key derivation. It also did not affect every derivation and would happen 1 in 256 times where where the private key for the extended private key had a leading zero ",(0,a.kt)("em",{parentName:"p"},"(e.g. any private key less than or equal to '0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')"),". The leading zero was not included in serialization before hashing to derive a child key, as it should have been."),(0,a.kt)("p",null,"As a result, ",(0,a.kt)("inlineCode",{parentName:"p"},"HDPublicKey.derive()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"HDPrivateKey.derive()")," are now deprecated. These methods will throw an error in the next major release.\n",(0,a.kt)("inlineCode",{parentName:"p"},"HDPublicKey.deriveChild()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"HDPrivateKey.deriveChild()"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"HDPrivateKey.deriveNonCompliantChild()")," have been implemented as alternatives. Note that these new methods will not be officially supported until v1.0.0.  ",(0,a.kt)("inlineCode",{parentName:"p"},"deriveNonCompliantChild")," will derive using the non-BIP32 derivation and is equivalent to the buggy version, ",(0,a.kt)("inlineCode",{parentName:"p"},"derive"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"deriveNonCompliantChild")," method should not be used unless you're upgrading and need to maintain compatibility with the old derivation."))}f.isMDXComponent=!0}}]);