"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[6762],{3905:function(e,t,i){i.d(t,{Zo:function(){return d},kt:function(){return m}});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(i),m=a,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return i?n.createElement(h,o(o({ref:t},d),{},{components:i})):n.createElement(h,o({ref:t},d))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=i[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},81:function(e,t,i){i.r(t),i.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var n=i(7462),a=i(3366),r=(i(7294),i(3905)),o=["components"],s={title:"Descriptors",description:"Support for Output Descriptors in Sbit Core",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:11},l=void 0,p={unversionedId:"SBit-Core/Building/descriptors",id:"SBit-Core/Building/descriptors",title:"Descriptors",description:"Support for Output Descriptors in Sbit Core",source:"@site/docs/SBit-Core/Building/descriptors.md",sourceDirName:"SBit-Core/Building",slug:"/SBit-Core/Building/descriptors",permalink:"/sbit.dev/docs/SBit-Core/Building/descriptors",tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Descriptors",description:"Support for Output Descriptors in Sbit Core",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Dependencies",permalink:"/sbit.dev/docs/SBit-Core/Building/dependencies"},next:{title:"Multiprocess Bitcoin",permalink:"/sbit.dev/docs/SBit-Core/Building/multiprocess"}},d={},c=[{value:"Features",id:"features",level:2},{value:"Examples",id:"examples",level:2},{value:"Reference",id:"reference",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Single-key scripts",id:"single-key-scripts",level:3},{value:"Multisig",id:"multisig",level:3},{value:"BIP32 derived keys and chains",id:"bip32-derived-keys-and-chains",level:3},{value:"Key origin identification",id:"key-origin-identification",level:3},{value:"Including private keys",id:"including-private-keys",level:3},{value:"Compatibility with old wallets",id:"compatibility-with-old-wallets",level:3},{value:"Checksums",id:"checksums",level:3}],u={toc:c};function m(e){var t=e.components,i=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Since Sbit Core v0.17, there is support for Output Descriptors. This is a\nsimple language which can be used to describe collections of output scripts.\nSupporting RPCs are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scantxoutset")," takes as input descriptors to scan for, and also reports\nspecialized descriptors for the matching UTXOs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getdescriptorinfo")," analyzes a descriptor, and reports a canonicalized version\nwith checksum added."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deriveaddresses")," takes as input a descriptor and computes the corresponding\naddresses."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"listunspent")," outputs a specialized descriptor for the reported unspent outputs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getaddressinfo")," outputs a descriptor for solvable addresses (since v0.18)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"importmulti")," takes as input descriptors to import into the wallet\n(since v0.18)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"generatetodescriptor")," takes as input a descriptor and generates coins to it\n(",(0,r.kt)("inlineCode",{parentName:"li"},"regtest")," only, since v0.19)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"utxoupdatepsbt")," takes as input descriptors to add information to the psbt\n(since v0.19)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"createmultisig")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"addmultisigaddress")," return descriptors as well (since v0.20)")),(0,r.kt)("p",null,"This document describes the language. For the specifics on usage, see the RPC\ndocumentation for the functions mentioned above."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("p",null,"Output descriptors currently support:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pay-to-pubkey scripts (P2PK), through the ",(0,r.kt)("inlineCode",{parentName:"li"},"pk")," function."),(0,r.kt)("li",{parentName:"ul"},"Pay-to-pubkey-hash scripts (P2PKH), through the ",(0,r.kt)("inlineCode",{parentName:"li"},"pkh")," function."),(0,r.kt)("li",{parentName:"ul"},"Pay-to-witness-pubkey-hash scripts (P2WPKH), through the ",(0,r.kt)("inlineCode",{parentName:"li"},"wpkh")," function."),(0,r.kt)("li",{parentName:"ul"},"Pay-to-script-hash scripts (P2SH), through the ",(0,r.kt)("inlineCode",{parentName:"li"},"sh")," function."),(0,r.kt)("li",{parentName:"ul"},"Pay-to-witness-script-hash scripts (P2WSH), through the ",(0,r.kt)("inlineCode",{parentName:"li"},"wsh")," function."),(0,r.kt)("li",{parentName:"ul"},"Multisig scripts, through the ",(0,r.kt)("inlineCode",{parentName:"li"},"multi")," function."),(0,r.kt)("li",{parentName:"ul"},"Multisig scripts where the public keys are sorted lexicographically, through the ",(0,r.kt)("inlineCode",{parentName:"li"},"sortedmulti")," function."),(0,r.kt)("li",{parentName:"ul"},"Any type of supported address through the ",(0,r.kt)("inlineCode",{parentName:"li"},"addr")," function."),(0,r.kt)("li",{parentName:"ul"},"Raw hex scripts through the ",(0,r.kt)("inlineCode",{parentName:"li"},"raw")," function."),(0,r.kt)("li",{parentName:"ul"},"Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation paths.")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)")," describes a P2PK output with the specified public key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)")," describes a P2PKH output with the specified public key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)")," describes a P2WPKH output with the specified public key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))")," describes a P2SH-P2WPKH output with the specified public key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)")," describes any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))")," describes an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)")," describes a bare ",(0,r.kt)("em",{parentName:"li"},"1-of-2")," multisig output with keys in the specified order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))")," describes a P2SH ",(0,r.kt)("em",{parentName:"li"},"2-of-2")," multisig output with keys in the specified order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh(sortedmulti(2,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01))")," describes a P2SH ",(0,r.kt)("em",{parentName:"li"},"2-of-2")," multisig output with keys sorted lexicographically in the resulting redeemScript."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))")," describes a P2WSH ",(0,r.kt)("em",{parentName:"li"},"2-of-3")," multisig output with keys in the specified order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))")," describes a P2SH-P2WSH ",(0,r.kt)("em",{parentName:"li"},"1-of-3")," multisig output with keys in the specified order."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)")," describes a P2PK output with the public key of the specified xpub."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)")," describes a P2PKH output with child key ",(0,r.kt)("em",{parentName:"li"},"1'/2")," of the specified xpub."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)")," describes a set of P2PKH outputs, but additionally specifies that the specified xpub is a child of a master with fingerprint ",(0,r.kt)("inlineCode",{parentName:"li"},"d34db33f"),", and derived using path ",(0,r.kt)("inlineCode",{parentName:"li"},"44'/0'/0'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))")," describes a set of ",(0,r.kt)("em",{parentName:"li"},"1-of-2")," P2WSH multisig outputs where the first multisig key is the ",(0,r.kt)("em",{parentName:"li"},"1/0/",(0,r.kt)("inlineCode",{parentName:"em"},"i"))," child of the first specified xpub and the second multisig key is the ",(0,r.kt)("em",{parentName:"li"},"0/0/",(0,r.kt)("inlineCode",{parentName:"em"},"i"))," child of the second specified xpub, and ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," is any number in a configurable range (",(0,r.kt)("inlineCode",{parentName:"li"},"0-1000")," by default)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wsh(sortedmulti(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))")," describes a set of ",(0,r.kt)("em",{parentName:"li"},"1-of-2")," P2WSH multisig outputs where one multisig key is the ",(0,r.kt)("em",{parentName:"li"},"1/0/",(0,r.kt)("inlineCode",{parentName:"em"},"i"))," child of the first specified xpub and the other multisig key is the ",(0,r.kt)("em",{parentName:"li"},"0/0/",(0,r.kt)("inlineCode",{parentName:"em"},"i"))," child of the second specified xpub, and ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," is any number in a configurable range (",(0,r.kt)("inlineCode",{parentName:"li"},"0-1000")," by default). The order of public keys in the resulting witnessScripts is determined by the lexicographic order of the public keys at that index.")),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("p",null,"Descriptors consist of several types of expressions. The top level expression is either a ",(0,r.kt)("inlineCode",{parentName:"p"},"SCRIPT"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"SCRIPT#CHECKSUM")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"CHECKSUM")," is an 8-character alphanumeric descriptor checksum."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SCRIPT")," expressions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sh(SCRIPT)")," (top level only): P2SH embed the argument."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wsh(SCRIPT)")," (not inside another 'wsh'): P2WSH embed the argument."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pk(KEY)")," (anywhere): P2PK output for the given public key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pkh(KEY)")," (anywhere): P2PKH output for the given public key (use ",(0,r.kt)("inlineCode",{parentName:"li"},"addr")," if you only know the pubkey hash)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wpkh(KEY)")," (not inside ",(0,r.kt)("inlineCode",{parentName:"li"},"wsh"),"): P2WPKH output for the given compressed pubkey."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"combo(KEY)")," (top level only): an alias for the collection of ",(0,r.kt)("inlineCode",{parentName:"li"},"pk(KEY)")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"pkh(KEY)"),". If the key is compressed, it also includes ",(0,r.kt)("inlineCode",{parentName:"li"},"wpkh(KEY)")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"sh(wpkh(KEY))"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"multi(k,KEY_1,KEY_2,...,KEY_n)")," (anywhere): k-of-n multisig script."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sortedmulti(k,KEY_1,KEY_2,...,KEY_n)")," (anywhere): k-of-n multisig script with keys sorted lexicographically in the resulting script."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"addr(ADDR)")," (top level only): the script which ADDR expands to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raw(HEX)")," (top level only): the script whose hex encoding is HEX.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"KEY")," expressions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Optionally, key origin information, consisting of:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"An open bracket ",(0,r.kt)("inlineCode",{parentName:"li"},"[")),(0,r.kt)("li",{parentName:"ul"},"Exactly 8 hex characters for the fingerprint of the key where the derivation starts (see BIP32 for details)"),(0,r.kt)("li",{parentName:"ul"},"Followed by zero or more ",(0,r.kt)("inlineCode",{parentName:"li"},"/NUM")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"/NUM'")," path elements to indicate unhardened or hardened derivation steps between the fingerprint and the key or xpub/xprv root that follows"),(0,r.kt)("li",{parentName:"ul"},"A closing bracket ",(0,r.kt)("inlineCode",{parentName:"li"},"]")))),(0,r.kt)("li",{parentName:"ul"},"Followed by the actual key, which is either:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Hex encoded public keys (either 66 characters starting with ",(0,r.kt)("inlineCode",{parentName:"li"},"02")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"03")," for a compressed pubkey, or 130 characters starting with ",(0,r.kt)("inlineCode",{parentName:"li"},"04")," for an uncompressed pubkey).",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Inside ",(0,r.kt)("inlineCode",{parentName:"li"},"wpkh")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"wsh"),", only compressed public keys are permitted."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.bitcoin.it/wiki/Wallet_import_format"},"WIF")," encoded private keys may be specified instead of the corresponding public key, with the same meaning."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xpub")," encoded extended public key or ",(0,r.kt)("inlineCode",{parentName:"li"},"xprv")," encoded extended private key (as defined in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki"},"BIP 32"),").",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Followed by zero or more ",(0,r.kt)("inlineCode",{parentName:"li"},"/NUM")," unhardened and ",(0,r.kt)("inlineCode",{parentName:"li"},"/NUM'")," hardened BIP32 derivation steps."),(0,r.kt)("li",{parentName:"ul"},"Optionally followed by a single ",(0,r.kt)("inlineCode",{parentName:"li"},"/*")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"/*'")," final step to denote all (direct) unhardened or hardened children."),(0,r.kt)("li",{parentName:"ul"},"The usage of hardened derivation steps requires providing the private key.")))))),(0,r.kt)("p",null,"(Anywhere a ",(0,r.kt)("inlineCode",{parentName:"p"},"'")," suffix is permitted to denote hardened derivation, the suffix ",(0,r.kt)("inlineCode",{parentName:"p"},"h")," can be used instead.)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ADDR")," expressions are any type of supported address:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"P2PKH addresses (base58, of the form ",(0,r.kt)("inlineCode",{parentName:"li"},"1...")," for mainnet or ",(0,r.kt)("inlineCode",{parentName:"li"},"[nm]...")," for testnet). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the ",(0,r.kt)("inlineCode",{parentName:"li"},"pk")," function instead)."),(0,r.kt)("li",{parentName:"ul"},"P2SH addresses (base58, of the form ",(0,r.kt)("inlineCode",{parentName:"li"},"3...")," for mainnet or ",(0,r.kt)("inlineCode",{parentName:"li"},"2...")," for testnet, defined in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki"},"BIP 13"),")."),(0,r.kt)("li",{parentName:"ul"},"Segwit addresses (bech32, of the form ",(0,r.kt)("inlineCode",{parentName:"li"},"bc1...")," for mainnet or ",(0,r.kt)("inlineCode",{parentName:"li"},"tb1...")," for testnet, defined in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki"},"BIP 173"),").")),(0,r.kt)("h2",{id:"explanation"},"Explanation"),(0,r.kt)("h3",{id:"single-key-scripts"},"Single-key scripts"),(0,r.kt)("p",null,"Many single-key constructions are used in practice, generally including\nP2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are\nimaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH,\nP2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH."),(0,r.kt)("p",null,"To describe these, we model these as functions. The functions ",(0,r.kt)("inlineCode",{parentName:"p"},"pk"),"\n(P2PK), ",(0,r.kt)("inlineCode",{parentName:"p"},"pkh")," (P2PKH) and ",(0,r.kt)("inlineCode",{parentName:"p"},"wpkh")," (P2WPKH) take as input a ",(0,r.kt)("inlineCode",{parentName:"p"},"KEY")," expression, and return the\ncorresponding ",(0,r.kt)("em",{parentName:"p"},"scriptPubKey"),". The functions ",(0,r.kt)("inlineCode",{parentName:"p"},"sh")," (P2SH) and ",(0,r.kt)("inlineCode",{parentName:"p"},"wsh")," (P2WSH)\ntake as input a ",(0,r.kt)("inlineCode",{parentName:"p"},"SCRIPT"),' expression, and return the script describing P2SH and P2WSH\noutputs with the input as embedded script. The names of the functions do\nnot contain "p2" for brevity.'),(0,r.kt)("h3",{id:"multisig"},"Multisig"),(0,r.kt)("p",null,"Several pieces of software use multi-signature (multisig) scripts based\non Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n",(0,r.kt)("inlineCode",{parentName:"p"},"multi(k,key_1,key_2,...,key_n)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sortedmulti(k,key_1,key_2,...,key_n)"),"\nfunctions. They represent a ",(0,r.kt)("em",{parentName:"p"},"k-of-n"),"\nmultisig policy, where any ",(0,r.kt)("em",{parentName:"p"},"k")," out of the ",(0,r.kt)("em",{parentName:"p"},"n")," provided ",(0,r.kt)("inlineCode",{parentName:"p"},"KEY")," expressions must\nsign."),(0,r.kt)("p",null,"Key order is significant for ",(0,r.kt)("inlineCode",{parentName:"p"},"multi()"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"multi()")," expression describes a multisig script\nwith keys in the specified order, and in a search for TXOs, it will not match\noutputs with multisig scriptPubKeys that have the same keys in a different\norder. Also, to prevent a combinatorial explosion of the search space, if more\nthan one of the ",(0,r.kt)("inlineCode",{parentName:"p"},"multi()")," key arguments is a BIP32 wildcard path ending in ",(0,r.kt)("inlineCode",{parentName:"p"},"/*"),"\nor ",(0,r.kt)("inlineCode",{parentName:"p"},"*'"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"multi()")," expression only matches multisig scripts with the ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"th\nchild key from each wildcard path in lockstep, rather than scripts with any\ncombination of child keys from each wildcard path."),(0,r.kt)("p",null,"Key order does not matter for ",(0,r.kt)("inlineCode",{parentName:"p"},"sortedmulti()"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"sortedmulti()")," behaves in the same way\nas ",(0,r.kt)("inlineCode",{parentName:"p"},"multi()")," does but the keys are reordered in the resulting script such that they\nare lexicographically ordered as described in BIP67."),(0,r.kt)("h3",{id:"bip32-derived-keys-and-chains"},"BIP32 derived keys and chains"),(0,r.kt)("p",null,'Most modern wallet software and hardware uses keys that are derived using\nBIP32 ("HD keys"). We support these directly by permitting strings\nconsisting of an extended public key (commonly referred to as an ',(0,r.kt)("em",{parentName:"p"},"xpub"),")\nplus derivation path anywhere a public key is expected. The derivation\npath consists of a sequence of 0 or more integers (in the range\n",(0,r.kt)("em",{parentName:"p"},"0..2",(0,r.kt)("sup",null,"31"),"-1"),") each optionally followed by ",(0,r.kt)("inlineCode",{parentName:"p"},"'")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"h"),", and\nseparated by ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," characters. The string may optionally end with the\nliteral ",(0,r.kt)("inlineCode",{parentName:"p"},"/*")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"/*'")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"/*h"),") to refer to all unhardened or hardened\nchild keys in a configurable range (by default ",(0,r.kt)("inlineCode",{parentName:"p"},"0-1000"),", inclusive)."),(0,r.kt)("p",null,"Whenever a public key is described using a hardened derivation step, the\nscript cannot be computed without access to the corresponding private\nkey."),(0,r.kt)("h3",{id:"key-origin-identification"},"Key origin identification"),(0,r.kt)("p",null,"In order to describe scripts whose signing keys reside on another device,\nit may be necessary to identify the master key and derivation path an\nxpub was derived with."),(0,r.kt)("p",null,"For example, when following BIP44, it would be useful to describe a\nchange chain directly as ",(0,r.kt)("inlineCode",{parentName:"p"},"xpub.../44'/0'/0'/1/*")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"xpub..."),"\ncorresponds with the master key ",(0,r.kt)("inlineCode",{parentName:"p"},"m"),". Unfortunately, since there are\nhardened derivation steps that follow the xpub, this descriptor does not\nlet you compute scripts without access to the corresponding private keys.\nInstead, it should be written as ",(0,r.kt)("inlineCode",{parentName:"p"},"xpub.../1/*"),", where xpub corresponds to\n",(0,r.kt)("inlineCode",{parentName:"p"},"m/44'/0'/0'"),"."),(0,r.kt)("p",null,"When interacting with a hardware device, it may be necessary to include\nthe entire path from the master down. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki"},"BIP174")," standardizes this by\nproviding the master key ",(0,r.kt)("em",{parentName:"p"},"fingerprint")," (first 32 bit of the Hash160 of\nthe master pubkey), plus all derivation steps. To support constructing\nthese, we permit providing this key origin information inside the\ndescriptor language, even though it does not affect the actual\nscriptPubKeys it refers to."),(0,r.kt)("p",null,"Every public key can be prefixed by an 8-character hexadecimal\nfingerprint plus optional derivation steps (hardened and unhardened)\nsurrounded by brackets, identifying the master and derivation path the key or xpub\nthat follows was derived with."),(0,r.kt)("p",null,"Note that the fingerprint of the parent only serves as a fast way to detect\nparent and child nodes in software, and software must be willing to deal with\ncollisions."),(0,r.kt)("h3",{id:"including-private-keys"},"Including private keys"),(0,r.kt)("p",null,"Often it is useful to communicate a description of scripts along with the\nnecessary private keys. For this reason, anywhere a public key or xpub is\nsupported, a private key in WIF format or xprv may be provided instead.\nThis is useful when private keys are necessary for hardened derivation\nsteps, or for dumping wallet descriptors including private key material."),(0,r.kt)("h3",{id:"compatibility-with-old-wallets"},"Compatibility with old wallets"),(0,r.kt)("p",null,"In order to easily represent the sets of scripts currently supported by\nexisting Sbit Core wallets, a convenience function ",(0,r.kt)("inlineCode",{parentName:"p"},"combo")," is\nprovided, which takes as input a public key, and describes a set of P2PK,\nP2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\nuncompressed, the set only includes P2PK and P2PKH scripts."),(0,r.kt)("h3",{id:"checksums"},"Checksums"),(0,r.kt)("p",null,"Descriptors can optionally be suffixed with a checksum to protect against\ntypos or copy-paste errors."),(0,r.kt)("p",null,"These checksums consist of 8 alphanumeric characters. As long as errors are\nrestricted to substituting characters in ",(0,r.kt)("inlineCode",{parentName:"p"},"0123456789()[],'/*abcdefgh@:$%{}"),"\nfor others in that set and changes in letter case, up to 4 errors will always\nbe detected in descriptors up to 501 characters, and up to 3 errors in longer\nones. For larger numbers of errors, or other types of errors, there is a\nroughly 1 in a trillion chance of not detecting the errors."),(0,r.kt)("p",null,"All RPCs in Sbit Core will include the checksum in their output. Only\ncertain RPCs require checksums on input, including ",(0,r.kt)("inlineCode",{parentName:"p"},"deriveaddress")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"importmulti"),". The checksum for a descriptor without one can be computed\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"getdescriptorinfo")," RPC."))}m.isMDXComponent=!0}}]);