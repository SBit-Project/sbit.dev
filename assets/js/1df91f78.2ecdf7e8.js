"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[9518],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,b=f["".concat(s,".").concat(d)]||f[d]||p[d]||i;return n?r.createElement(b,c(c({ref:t},u),{},{components:n})):r.createElement(b,c({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4225:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),c=["components"],a={title:"SBIT Encoding",description:"SBIT Encoding",keywords:["sbit","bitcoin","blockchain","ethereum","sbitcore","tools"],sidebar_position:6},s=void 0,l={unversionedId:"Tools/SBitcore-lib/encoding",id:"Tools/SBitcore-lib/encoding",title:"SBIT Encoding",description:"SBIT Encoding",source:"@site/docs/Tools/SBitcore-lib/encoding.md",sourceDirName:"Tools/SBitcore-lib",slug:"/Tools/SBitcore-lib/encoding",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/encoding",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"SBIT Encoding",description:"SBIT Encoding",keywords:["sbit","bitcoin","blockchain","ethereum","sbitcore","tools"],sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"SBIT Crypto",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/crypto"},next:{title:"Sbitcore examples",permalink:"/sbit.dev/docs/Tools/SBitcore-lib/examples"}},u={},p=[{value:"Base58 &amp; Base58Check",id:"base58--base58check",level:2},{value:"BufferReader &amp; BufferWriter",id:"bufferreader--bufferwriter",level:2}],f={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sbitcore.Encoding")," namespace contains utilities for encoding information in common formats in the SBIT ecosystem."),(0,i.kt)("h2",{id:"base58--base58check"},"Base58 & Base58Check"),(0,i.kt)("p",null,"Two classes are provided: ",(0,i.kt)("inlineCode",{parentName:"p"},"Base58")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Base58Check"),". The first one merely encodes/decodes a set of bytes in base58 format. The second one will also take the double ",(0,i.kt)("inlineCode",{parentName:"p"},"sha256")," hash of the information and append the last 4 bytes of the hash as a checksum when encoding, and check this checksum when decoding."),(0,i.kt)("h2",{id:"bufferreader--bufferwriter"},"BufferReader & BufferWriter"),(0,i.kt)("p",null,"These classes are used internally to write information in buffers."))}d.isMDXComponent=!0}}]);