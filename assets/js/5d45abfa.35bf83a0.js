"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[7094],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,k=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(k,o(o({ref:t},d),{},{components:n})):r.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4288:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"SRC20 Integration",description:"This document explains the basics of interacting with an SRC20 contract",keywords:["sbit","smart contract","src20","ethereum"],sidebar_position:5},l=void 0,c={unversionedId:"Smart-Contract/SRC20-integration",id:"Smart-Contract/SRC20-integration",title:"SRC20 Integration",description:"This document explains the basics of interacting with an SRC20 contract",source:"@site/docs/Smart-Contract/SRC20-integration.md",sourceDirName:"Smart-Contract",slug:"/Smart-Contract/SRC20-integration",permalink:"/sbit.dev/docs/Smart-Contract/SRC20-integration",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"SRC20 Integration",description:"This document explains the basics of interacting with an SRC20 contract",keywords:["sbit","smart contract","src20","ethereum"],sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Smart Contract Raw TX",permalink:"/sbit.dev/docs/Smart-Contract/Blockchain-API/Raw-TX"},next:{title:"Raw SRC20 Transaction implementation",permalink:"/sbit.dev/docs/Smart-Contract/Raw-SRC20-Transaction-implementation-guide"}},d={},u=[{value:"Running SBITD",id:"running-sbitd",level:2},{value:"Interacting With SRC20",id:"interacting-with-src20",level:2},{value:"Getting Token Balance",id:"getting-token-balance",level:2},{value:"Withdraw",id:"withdraw",level:2},{value:"Generate a deposit address",id:"generate-a-deposit-address",level:2},{value:"Deposit and Witdraw Logs",id:"deposit-and-witdraw-logs",level:2},{value:"Checking Confirmations",id:"checking-confirmations",level:2}],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This document explains the basics of interacting with an SRC20 contract with the ",(0,i.kt)("inlineCode",{parentName:"p"},"sbitd")," CLI command tool."),(0,i.kt)("h1",{id:"intro"},"Intro"),(0,i.kt)("p",null,"We recommend that an exchange use one main address to store tokens for all users. Below ",(0,i.kt)("inlineCode",{parentName:"p"},"MAIN_SRC_ADDRESS")," is the main address."),(0,i.kt)("p",null,"The address of the SRC20 token contract is ",(0,i.kt)("inlineCode",{parentName:"p"},"TOKEN_CONTRACT_ADDRESS"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gas limit is ",(0,i.kt)("inlineCode",{parentName:"li"},"DEFAULT_GAS_LIMIT"),", recommended value is ",(0,i.kt)("inlineCode",{parentName:"li"},"250000")),(0,i.kt)("li",{parentName:"ul"},"gas price is ",(0,i.kt)("inlineCode",{parentName:"li"},"DEFAULT_GAS_PRICE"),"\uff0crecommended value is ",(0,i.kt)("inlineCode",{parentName:"li"},"0.00000040"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TOKEN_DECIMALS")," is the decimals of the token, which varies per token. Here we set it 8."),(0,i.kt)("h2",{id:"running-sbitd"},"Running SBITD"),(0,i.kt)("p",null,"You should remember to enable the indexing service when starting ",(0,i.kt)("inlineCode",{parentName:"p"},"sbitd"),", using the flags ",(0,i.kt)("inlineCode",{parentName:"p"},"-logevents -txindex"),"."),(0,i.kt)("h2",{id:"interacting-with-src20"},"Interacting With SRC20"),(0,i.kt)("p",null,"In the CLI examples below, please substitute ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," with actual addresses and values."),(0,i.kt)("h2",{id:"getting-token-balance"},"Getting Token Balance"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$userAddress")," is the deposit address")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"sbit-cli callcontract \\\n    {TOKEN_CONTRACT_ADDRESS} \\\n    70a08231{to32bytesArg(addressToHash160($userAddress))}\n")),(0,i.kt)("p",null,"In the JSON output look for ",(0,i.kt)("inlineCode",{parentName:"p"},"executionResult.output"),". This is the token balance."),(0,i.kt)("h2",{id:"withdraw"},"Withdraw"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$userAddress")," is the withdraw address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$amount")," the withdraw amount in unit token")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"sbit-cli sendtocontract \\\n    {TOKEN_CONTRACT_ADDRESS} \\\n    a9059cbb{to32bytesArg(addressToHash160($userAddress))}{to32bytesArg(addDecimals($amount)) \\\n    0 \\\n    {DEFAULT_GAS_LIMIT} \\\n    {DEFAULT_GAS_PRICE} \\\n    {MAIN_SRC_ADDRESS}\n")),(0,i.kt)("p",null,"The command returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"txid")," of this transaction. You may use it to find information about this transaction (e.g. number of confirmations)."),(0,i.kt)("h2",{id:"generate-a-deposit-address"},"Generate a deposit address"),(0,i.kt)("p",null,"For an exchange, a user may use the same address for both SBIT and other SRC20 tokens."),(0,i.kt)("p",null,"Use this command to generate a deposit address:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"sbit-cli getnewaddress\n")),(0,i.kt)("h2",{id:"deposit-and-witdraw-logs"},"Deposit and Witdraw Logs"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$startingBlock")," is where you want to start looking (inclursive)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You can start looking from 0, but for better efficiency, you should remember where to start looking.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'sbit-cli searchlogs \\\n    STARTING_BLOCK \\\n    999999999 \\\n    \'{ "addresses": ["TOKEN_CONTRACT_ADDRESS"]}\' \\\n    \'{"topics": ["ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"]}\'\n')),(0,i.kt)("p",null,"The event type filtered is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Transfer")," event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"event Transfer(address indexed _from, address indexed _to, uint256 _value)\n")),(0,i.kt)("p",null,"Look through the logs to filter by ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"from")," addresses."),(0,i.kt)("h2",{id:"checking-confirmations"},"Checking Confirmations"),(0,i.kt)("p",null,"Given a transaction id ",(0,i.kt)("inlineCode",{parentName:"p"},"$txid"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"sbit-cli gettransaction $txid\n")),(0,i.kt)("p",null,"Use the property ",(0,i.kt)("inlineCode",{parentName:"p"},"confirmations")," from output."))}m.isMDXComponent=!0}}]);