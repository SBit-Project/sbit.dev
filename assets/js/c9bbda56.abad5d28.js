"use strict";(self.webpackChunksbit_website=self.webpackChunksbit_website||[]).push([[8008],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,b=p["".concat(s,".").concat(m)]||p[m]||c[m]||a;return n?i.createElement(b,o(o({ref:t},u),{},{components:n})):i.createElement(b,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6626:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],l={title:"FreeBSD Build guide",description:"This guide describes how to build sbitd and command-line utilities on FreeBSD.",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:1},s=void 0,d={unversionedId:"SBit-Core/Building/build-freebsd",id:"SBit-Core/Building/build-freebsd",title:"FreeBSD Build guide",description:"This guide describes how to build sbitd and command-line utilities on FreeBSD.",source:"@site/docs/SBit-Core/Building/build-freebsd.md",sourceDirName:"SBit-Core/Building",slug:"/SBit-Core/Building/build-freebsd",permalink:"/sbit.dev/docs/SBit-Core/Building/build-freebsd",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"FreeBSD Build guide",description:"This guide describes how to build sbitd and command-line utilities on FreeBSD.",keywords:["sbit","bitcoin","blockchain","ethereum"],sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/sbit.dev/docs/SBit-Core/SBit"},next:{title:"NetBSD Build guide",permalink:"/sbit.dev/docs/SBit-Core/Building/build-netbsd"}},u={},c=[{value:"Preparation",id:"preparation",level:2},{value:"Building BerkeleyDB",id:"building-berkeleydb",level:3},{value:"Building Sbit Core",id:"building-sbit-core",level:2}],p={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Tested on FreeBSD 12.0"))),(0,a.kt)("p",null,"This guide describes how to build sbitd and command-line utilities on FreeBSD."),(0,a.kt)("p",null,"This guide does not contain instructions for building the GUI."),(0,a.kt)("h2",{id:"preparation"},"Preparation"),(0,a.kt)("p",null,"You will need the following dependencies, which can be installed as root via pkg:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pkg install autoconf automake boost-libs git gmake libevent libtool pkgconf gmp\n\ngit clone https://github.com/SBit-Project/sbit --recursive\n")),(0,a.kt)("p",null,"In order to run the test suite (recommended), you will need to have Python 3 installed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pkg install python3\n")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"dependencies"},"Dependencies")," for a complete overview."),(0,a.kt)("h3",{id:"building-berkeleydb"},"Building BerkeleyDB"),(0,a.kt)("p",null,"BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n",(0,a.kt)("inlineCode",{parentName:"p"},"--disable-wallet")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"./configure")," and skip to the next section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'./contrib/install_db4.sh `pwd`\nexport BDB_PREFIX="$PWD/db4"\n')),(0,a.kt)("h2",{id:"building-sbit-core"},"Building Sbit Core"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"gmake")," (the non-GNU ",(0,a.kt)("inlineCode",{parentName:"p"},"make")," will exit with an error)."))),(0,a.kt)("p",null,"With wallet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'./autogen.sh\n./configure --with-gui=no \\\n    BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" \\\n    BDB_CFLAGS="-I${BDB_PREFIX}/include" \\\n    MAKE=gmake\n')),(0,a.kt)("p",null,"Without wallet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./autogen.sh\n./configure --with-gui=no --disable-wallet MAKE=gmake\n")),(0,a.kt)("p",null,"followed by:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gmake # use -jX here for parallelism\ngmake check # Run tests if Python 3 is available\n")))}m.isMDXComponent=!0}}]);